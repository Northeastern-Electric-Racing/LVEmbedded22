
LVLoadSwitch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e30  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003008  08003008  00013008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003028  08003028  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003028  08003028  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003028  08003028  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003028  08003028  00013028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800302c  0800302c  0001302c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003030  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000000c  0800303c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  0800303c  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b9dc  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a24  00000000  00000000  0002ba18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  0002d440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a68  00000000  00000000  0002df80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c6e9  00000000  00000000  0002e9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c15d  00000000  00000000  0004b0d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b4989  00000000  00000000  0005722e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010bbb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e44  00000000  00000000  0010bc08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002ff0 	.word	0x08002ff0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002ff0 	.word	0x08002ff0

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b088      	sub	sp, #32
 800021c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 fb62 	bl	80008e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f869 	bl	80002f8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 f9a3 	bl	8000570 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800022a:	f000 f8a5 	bl	8000378 <MX_FDCAN1_Init>
  MX_I2C2_Init();
 800022e:	f000 f95f 	bl	80004f0 <MX_I2C2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  ret = HAL_I2C_Mem_Read(&hi2c2, LTC4015_ADDR, REG4015_CHGSTATE, 2, buf, 2, HAL_MAX_DELAY);
 8000232:	23d0      	movs	r3, #208	; 0xd0
 8000234:	b299      	uxth	r1, r3
 8000236:	2334      	movs	r3, #52	; 0x34
 8000238:	b29a      	uxth	r2, r3
 800023a:	f04f 33ff 	mov.w	r3, #4294967295
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	2302      	movs	r3, #2
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	463b      	mov	r3, r7
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	2302      	movs	r3, #2
 800024a:	4826      	ldr	r0, [pc, #152]	; (80002e4 <main+0xcc>)
 800024c:	f001 fb10 	bl	8001870 <HAL_I2C_Mem_Read>
 8000250:	4603      	mov	r3, r0
 8000252:	73fb      	strb	r3, [r7, #15]
	  if(ret!=HAL_OK){
 8000254:	7bfb      	ldrb	r3, [r7, #15]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <main+0x46>
	  	Error_Handler();
 800025a:	f000 fa03 	bl	8000664 <Error_Handler>
	  }

	  TxData[0] = buf[0]&1;		// Battery short
 800025e:	783b      	ldrb	r3, [r7, #0]
 8000260:	f003 0301 	and.w	r3, r3, #1
 8000264:	b2da      	uxtb	r2, r3
 8000266:	4b20      	ldr	r3, [pc, #128]	; (80002e8 <main+0xd0>)
 8000268:	701a      	strb	r2, [r3, #0]
	  TxData[1] = buf[0]&2;		// Battery missing
 800026a:	783b      	ldrb	r3, [r7, #0]
 800026c:	f003 0302 	and.w	r3, r3, #2
 8000270:	b2da      	uxtb	r2, r3
 8000272:	4b1d      	ldr	r3, [pc, #116]	; (80002e8 <main+0xd0>)
 8000274:	705a      	strb	r2, [r3, #1]
	  TxData[2] = buf[0]&4;		// C/x termination
 8000276:	783b      	ldrb	r3, [r7, #0]
 8000278:	f003 0304 	and.w	r3, r3, #4
 800027c:	b2da      	uxtb	r2, r3
 800027e:	4b1a      	ldr	r3, [pc, #104]	; (80002e8 <main+0xd0>)
 8000280:	709a      	strb	r2, [r3, #2]
	  TxData[3] = buf[0]&64;	// CC/CV
 8000282:	783b      	ldrb	r3, [r7, #0]
 8000284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000288:	b2da      	uxtb	r2, r3
 800028a:	4b17      	ldr	r3, [pc, #92]	; (80002e8 <main+0xd0>)
 800028c:	70da      	strb	r2, [r3, #3]
	  TxData[4] = buf[0]&128;	// pre-charge
 800028e:	783b      	ldrb	r3, [r7, #0]
 8000290:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000294:	b2da      	uxtb	r2, r3
 8000296:	4b14      	ldr	r3, [pc, #80]	; (80002e8 <main+0xd0>)
 8000298:	711a      	strb	r2, [r3, #4]
	  TxData[5] = buf[1]&1;		// charger suspended
 800029a:	787b      	ldrb	r3, [r7, #1]
 800029c:	f003 0301 	and.w	r3, r3, #1
 80002a0:	b2da      	uxtb	r2, r3
 80002a2:	4b11      	ldr	r3, [pc, #68]	; (80002e8 <main+0xd0>)
 80002a4:	715a      	strb	r2, [r3, #5]
	  TxData[6] = buf[1]&2;		// absorb
 80002a6:	787b      	ldrb	r3, [r7, #1]
 80002a8:	f003 0302 	and.w	r3, r3, #2
 80002ac:	b2da      	uxtb	r2, r3
 80002ae:	4b0e      	ldr	r3, [pc, #56]	; (80002e8 <main+0xd0>)
 80002b0:	719a      	strb	r2, [r3, #6]
	  TxData[7] = 69;
 80002b2:	4b0d      	ldr	r3, [pc, #52]	; (80002e8 <main+0xd0>)
 80002b4:	2245      	movs	r2, #69	; 0x45
 80002b6:	71da      	strb	r2, [r3, #7]

	  // Send TxData over CAN
	  ret = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData);
 80002b8:	4a0b      	ldr	r2, [pc, #44]	; (80002e8 <main+0xd0>)
 80002ba:	490c      	ldr	r1, [pc, #48]	; (80002ec <main+0xd4>)
 80002bc:	480c      	ldr	r0, [pc, #48]	; (80002f0 <main+0xd8>)
 80002be:	f000 fe96 	bl	8000fee <HAL_FDCAN_AddMessageToTxFifoQ>
 80002c2:	4603      	mov	r3, r0
 80002c4:	73fb      	strb	r3, [r7, #15]
	  if(ret!=HAL_OK){
 80002c6:	7bfb      	ldrb	r3, [r7, #15]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <main+0xb8>
		Error_Handler();
 80002cc:	f000 f9ca 	bl	8000664 <Error_Handler>
	  }

	 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80002d0:	2101      	movs	r1, #1
 80002d2:	4808      	ldr	r0, [pc, #32]	; (80002f4 <main+0xdc>)
 80002d4:	f001 fa22 	bl	800171c <HAL_GPIO_TogglePin>
	 HAL_Delay(500);
 80002d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002dc:	f000 fb74 	bl	80009c8 <HAL_Delay>
	  ret = HAL_I2C_Mem_Read(&hi2c2, LTC4015_ADDR, REG4015_CHGSTATE, 2, buf, 2, HAL_MAX_DELAY);
 80002e0:	e7a7      	b.n	8000232 <main+0x1a>
 80002e2:	bf00      	nop
 80002e4:	2000008c 	.word	0x2000008c
 80002e8:	200000fc 	.word	0x200000fc
 80002ec:	200000d8 	.word	0x200000d8
 80002f0:	20000028 	.word	0x20000028
 80002f4:	48000400 	.word	0x48000400

080002f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b094      	sub	sp, #80	; 0x50
 80002fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fe:	f107 0318 	add.w	r3, r7, #24
 8000302:	2238      	movs	r2, #56	; 0x38
 8000304:	2100      	movs	r1, #0
 8000306:	4618      	mov	r0, r3
 8000308:	f002 fe6a 	bl	8002fe0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	605a      	str	r2, [r3, #4]
 8000314:	609a      	str	r2, [r3, #8]
 8000316:	60da      	str	r2, [r3, #12]
 8000318:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800031a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800031e:	f001 feab 	bl	8002078 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000322:	2302      	movs	r3, #2
 8000324:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000326:	f44f 7380 	mov.w	r3, #256	; 0x100
 800032a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800032c:	2340      	movs	r3, #64	; 0x40
 800032e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000330:	2300      	movs	r3, #0
 8000332:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000334:	f107 0318 	add.w	r3, r7, #24
 8000338:	4618      	mov	r0, r3
 800033a:	f001 ff41 	bl	80021c0 <HAL_RCC_OscConfig>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000344:	f000 f98e 	bl	8000664 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000348:	230f      	movs	r3, #15
 800034a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800034c:	2301      	movs	r3, #1
 800034e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000350:	2300      	movs	r3, #0
 8000352:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000354:	2300      	movs	r3, #0
 8000356:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000358:	2300      	movs	r3, #0
 800035a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	2100      	movs	r1, #0
 8000360:	4618      	mov	r0, r3
 8000362:	f002 fa45 	bl	80027f0 <HAL_RCC_ClockConfig>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800036c:	f000 f97a 	bl	8000664 <Error_Handler>
  }
}
 8000370:	bf00      	nop
 8000372:	3750      	adds	r7, #80	; 0x50
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}

08000378 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b088      	sub	sp, #32
 800037c:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800037e:	4b59      	ldr	r3, [pc, #356]	; (80004e4 <MX_FDCAN1_Init+0x16c>)
 8000380:	4a59      	ldr	r2, [pc, #356]	; (80004e8 <MX_FDCAN1_Init+0x170>)
 8000382:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000384:	4b57      	ldr	r3, [pc, #348]	; (80004e4 <MX_FDCAN1_Init+0x16c>)
 8000386:	2200      	movs	r2, #0
 8000388:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800038a:	4b56      	ldr	r3, [pc, #344]	; (80004e4 <MX_FDCAN1_Init+0x16c>)
 800038c:	2200      	movs	r2, #0
 800038e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000390:	4b54      	ldr	r3, [pc, #336]	; (80004e4 <MX_FDCAN1_Init+0x16c>)
 8000392:	2200      	movs	r2, #0
 8000394:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000396:	4b53      	ldr	r3, [pc, #332]	; (80004e4 <MX_FDCAN1_Init+0x16c>)
 8000398:	2200      	movs	r2, #0
 800039a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800039c:	4b51      	ldr	r3, [pc, #324]	; (80004e4 <MX_FDCAN1_Init+0x16c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80003a2:	4b50      	ldr	r3, [pc, #320]	; (80004e4 <MX_FDCAN1_Init+0x16c>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80003a8:	4b4e      	ldr	r3, [pc, #312]	; (80004e4 <MX_FDCAN1_Init+0x16c>)
 80003aa:	2201      	movs	r2, #1
 80003ac:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80003ae:	4b4d      	ldr	r3, [pc, #308]	; (80004e4 <MX_FDCAN1_Init+0x16c>)
 80003b0:	2201      	movs	r2, #1
 80003b2:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 80003b4:	4b4b      	ldr	r3, [pc, #300]	; (80004e4 <MX_FDCAN1_Init+0x16c>)
 80003b6:	220d      	movs	r2, #13
 80003b8:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80003ba:	4b4a      	ldr	r3, [pc, #296]	; (80004e4 <MX_FDCAN1_Init+0x16c>)
 80003bc:	2202      	movs	r2, #2
 80003be:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80003c0:	4b48      	ldr	r3, [pc, #288]	; (80004e4 <MX_FDCAN1_Init+0x16c>)
 80003c2:	2201      	movs	r2, #1
 80003c4:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80003c6:	4b47      	ldr	r3, [pc, #284]	; (80004e4 <MX_FDCAN1_Init+0x16c>)
 80003c8:	2201      	movs	r2, #1
 80003ca:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80003cc:	4b45      	ldr	r3, [pc, #276]	; (80004e4 <MX_FDCAN1_Init+0x16c>)
 80003ce:	2201      	movs	r2, #1
 80003d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80003d2:	4b44      	ldr	r3, [pc, #272]	; (80004e4 <MX_FDCAN1_Init+0x16c>)
 80003d4:	2201      	movs	r2, #1
 80003d6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80003d8:	4b42      	ldr	r3, [pc, #264]	; (80004e4 <MX_FDCAN1_Init+0x16c>)
 80003da:	2200      	movs	r2, #0
 80003dc:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80003de:	4b41      	ldr	r3, [pc, #260]	; (80004e4 <MX_FDCAN1_Init+0x16c>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80003e4:	4b3f      	ldr	r3, [pc, #252]	; (80004e4 <MX_FDCAN1_Init+0x16c>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80003ea:	483e      	ldr	r0, [pc, #248]	; (80004e4 <MX_FDCAN1_Init+0x16c>)
 80003ec:	f000 fbf2 	bl	8000bd4 <HAL_FDCAN_Init>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 80003f6:	f000 f935 	bl	8000664 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;

      /* Configure Rx filter */
      sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80003fa:	2300      	movs	r3, #0
 80003fc:	603b      	str	r3, [r7, #0]
      sFilterConfig.FilterIndex = 0;
 80003fe:	2300      	movs	r3, #0
 8000400:	607b      	str	r3, [r7, #4]
      sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000402:	2302      	movs	r3, #2
 8000404:	60bb      	str	r3, [r7, #8]
      sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000406:	2301      	movs	r3, #1
 8000408:	60fb      	str	r3, [r7, #12]
      sFilterConfig.FilterID1 = 0x321;
 800040a:	f240 3321 	movw	r3, #801	; 0x321
 800040e:	613b      	str	r3, [r7, #16]
      sFilterConfig.FilterID2 = 0x7FF;
 8000410:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000414:	617b      	str	r3, [r7, #20]
      if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000416:	463b      	mov	r3, r7
 8000418:	4619      	mov	r1, r3
 800041a:	4832      	ldr	r0, [pc, #200]	; (80004e4 <MX_FDCAN1_Init+0x16c>)
 800041c:	f000 fd34 	bl	8000e88 <HAL_FDCAN_ConfigFilter>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_FDCAN1_Init+0xb2>
      {
        Error_Handler();
 8000426:	f000 f91d 	bl	8000664 <Error_Handler>
      }

      /* Configure global filter:
         Filter all remote frames with STD and EXT ID
         Reject non matching frames with STD ID and EXT ID */
      if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 800042a:	2300      	movs	r3, #0
 800042c:	9300      	str	r3, [sp, #0]
 800042e:	2300      	movs	r3, #0
 8000430:	2202      	movs	r2, #2
 8000432:	2102      	movs	r1, #2
 8000434:	482b      	ldr	r0, [pc, #172]	; (80004e4 <MX_FDCAN1_Init+0x16c>)
 8000436:	f000 fd81 	bl	8000f3c <HAL_FDCAN_ConfigGlobalFilter>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <MX_FDCAN1_Init+0xcc>
      {
        Error_Handler();
 8000440:	f000 f910 	bl	8000664 <Error_Handler>
      }

      /* Start the FDCAN module */
      if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8000444:	4827      	ldr	r0, [pc, #156]	; (80004e4 <MX_FDCAN1_Init+0x16c>)
 8000446:	f000 fdaa 	bl	8000f9e <HAL_FDCAN_Start>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <MX_FDCAN1_Init+0xdc>
      {
        Error_Handler();
 8000450:	f000 f908 	bl	8000664 <Error_Handler>
      }

      if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000454:	2200      	movs	r2, #0
 8000456:	2101      	movs	r1, #1
 8000458:	4822      	ldr	r0, [pc, #136]	; (80004e4 <MX_FDCAN1_Init+0x16c>)
 800045a:	f000 fe0c 	bl	8001076 <HAL_FDCAN_ActivateNotification>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <MX_FDCAN1_Init+0xf0>
      {
        Error_Handler();
 8000464:	f000 f8fe 	bl	8000664 <Error_Handler>
      }

      /* Prepare Tx Header */
      TxHeader.Identifier = 0x400; //Determines ID of CAN message
 8000468:	4b20      	ldr	r3, [pc, #128]	; (80004ec <MX_FDCAN1_Init+0x174>)
 800046a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800046e:	601a      	str	r2, [r3, #0]
      TxHeader.IdType = FDCAN_STANDARD_ID;
 8000470:	4b1e      	ldr	r3, [pc, #120]	; (80004ec <MX_FDCAN1_Init+0x174>)
 8000472:	2200      	movs	r2, #0
 8000474:	605a      	str	r2, [r3, #4]
      TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000476:	4b1d      	ldr	r3, [pc, #116]	; (80004ec <MX_FDCAN1_Init+0x174>)
 8000478:	2200      	movs	r2, #0
 800047a:	609a      	str	r2, [r3, #8]
      TxHeader.DataLength = FDCAN_DLC_BYTES_8; //Specifies the number of data bytes to be transmitted
 800047c:	4b1b      	ldr	r3, [pc, #108]	; (80004ec <MX_FDCAN1_Init+0x174>)
 800047e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000482:	60da      	str	r2, [r3, #12]
      TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000484:	4b19      	ldr	r3, [pc, #100]	; (80004ec <MX_FDCAN1_Init+0x174>)
 8000486:	2200      	movs	r2, #0
 8000488:	611a      	str	r2, [r3, #16]
      TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800048a:	4b18      	ldr	r3, [pc, #96]	; (80004ec <MX_FDCAN1_Init+0x174>)
 800048c:	2200      	movs	r2, #0
 800048e:	615a      	str	r2, [r3, #20]
      TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000490:	4b16      	ldr	r3, [pc, #88]	; (80004ec <MX_FDCAN1_Init+0x174>)
 8000492:	2200      	movs	r2, #0
 8000494:	619a      	str	r2, [r3, #24]
      TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000496:	4b15      	ldr	r3, [pc, #84]	; (80004ec <MX_FDCAN1_Init+0x174>)
 8000498:	2200      	movs	r2, #0
 800049a:	61da      	str	r2, [r3, #28]
      TxHeader.MessageMarker = 0;
 800049c:	4b13      	ldr	r3, [pc, #76]	; (80004ec <MX_FDCAN1_Init+0x174>)
 800049e:	2200      	movs	r2, #0
 80004a0:	621a      	str	r2, [r3, #32]
	  TxHeader.Identifier = 0x400; //Determines ID of CAN message
 80004a2:	4b12      	ldr	r3, [pc, #72]	; (80004ec <MX_FDCAN1_Init+0x174>)
 80004a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004a8:	601a      	str	r2, [r3, #0]
	  TxHeader.IdType = FDCAN_STANDARD_ID;
 80004aa:	4b10      	ldr	r3, [pc, #64]	; (80004ec <MX_FDCAN1_Init+0x174>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	605a      	str	r2, [r3, #4]
	  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80004b0:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <MX_FDCAN1_Init+0x174>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	609a      	str	r2, [r3, #8]
	  TxHeader.DataLength = FDCAN_DLC_BYTES_8; //Specifies the number of data bytes to be transmitted
 80004b6:	4b0d      	ldr	r3, [pc, #52]	; (80004ec <MX_FDCAN1_Init+0x174>)
 80004b8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80004bc:	60da      	str	r2, [r3, #12]
	  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80004be:	4b0b      	ldr	r3, [pc, #44]	; (80004ec <MX_FDCAN1_Init+0x174>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	611a      	str	r2, [r3, #16]
	  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80004c4:	4b09      	ldr	r3, [pc, #36]	; (80004ec <MX_FDCAN1_Init+0x174>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	615a      	str	r2, [r3, #20]
	  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80004ca:	4b08      	ldr	r3, [pc, #32]	; (80004ec <MX_FDCAN1_Init+0x174>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	619a      	str	r2, [r3, #24]
	  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <MX_FDCAN1_Init+0x174>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	61da      	str	r2, [r3, #28]
	  TxHeader.MessageMarker = 0;
 80004d6:	4b05      	ldr	r3, [pc, #20]	; (80004ec <MX_FDCAN1_Init+0x174>)
 80004d8:	2200      	movs	r2, #0
 80004da:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN1_Init 2 */

}
 80004dc:	bf00      	nop
 80004de:	3718      	adds	r7, #24
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	20000028 	.word	0x20000028
 80004e8:	40006400 	.word	0x40006400
 80004ec:	200000d8 	.word	0x200000d8

080004f0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80004f4:	4b1b      	ldr	r3, [pc, #108]	; (8000564 <MX_I2C2_Init+0x74>)
 80004f6:	4a1c      	ldr	r2, [pc, #112]	; (8000568 <MX_I2C2_Init+0x78>)
 80004f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 80004fa:	4b1a      	ldr	r3, [pc, #104]	; (8000564 <MX_I2C2_Init+0x74>)
 80004fc:	4a1b      	ldr	r2, [pc, #108]	; (800056c <MX_I2C2_Init+0x7c>)
 80004fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000500:	4b18      	ldr	r3, [pc, #96]	; (8000564 <MX_I2C2_Init+0x74>)
 8000502:	2200      	movs	r2, #0
 8000504:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000506:	4b17      	ldr	r3, [pc, #92]	; (8000564 <MX_I2C2_Init+0x74>)
 8000508:	2201      	movs	r2, #1
 800050a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800050c:	4b15      	ldr	r3, [pc, #84]	; (8000564 <MX_I2C2_Init+0x74>)
 800050e:	2200      	movs	r2, #0
 8000510:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000512:	4b14      	ldr	r3, [pc, #80]	; (8000564 <MX_I2C2_Init+0x74>)
 8000514:	2200      	movs	r2, #0
 8000516:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <MX_I2C2_Init+0x74>)
 800051a:	2200      	movs	r2, #0
 800051c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800051e:	4b11      	ldr	r3, [pc, #68]	; (8000564 <MX_I2C2_Init+0x74>)
 8000520:	2200      	movs	r2, #0
 8000522:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000524:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <MX_I2C2_Init+0x74>)
 8000526:	2200      	movs	r2, #0
 8000528:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800052a:	480e      	ldr	r0, [pc, #56]	; (8000564 <MX_I2C2_Init+0x74>)
 800052c:	f001 f910 	bl	8001750 <HAL_I2C_Init>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000536:	f000 f895 	bl	8000664 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800053a:	2100      	movs	r1, #0
 800053c:	4809      	ldr	r0, [pc, #36]	; (8000564 <MX_I2C2_Init+0x74>)
 800053e:	f001 fd03 	bl	8001f48 <HAL_I2CEx_ConfigAnalogFilter>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000548:	f000 f88c 	bl	8000664 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800054c:	2100      	movs	r1, #0
 800054e:	4805      	ldr	r0, [pc, #20]	; (8000564 <MX_I2C2_Init+0x74>)
 8000550:	f001 fd45 	bl	8001fde <HAL_I2CEx_ConfigDigitalFilter>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800055a:	f000 f883 	bl	8000664 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800055e:	bf00      	nop
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	2000008c 	.word	0x2000008c
 8000568:	40005800 	.word	0x40005800
 800056c:	00303d5b 	.word	0x00303d5b

08000570 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b088      	sub	sp, #32
 8000574:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000576:	f107 030c 	add.w	r3, r7, #12
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000586:	4b35      	ldr	r3, [pc, #212]	; (800065c <MX_GPIO_Init+0xec>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058a:	4a34      	ldr	r2, [pc, #208]	; (800065c <MX_GPIO_Init+0xec>)
 800058c:	f043 0320 	orr.w	r3, r3, #32
 8000590:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000592:	4b32      	ldr	r3, [pc, #200]	; (800065c <MX_GPIO_Init+0xec>)
 8000594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000596:	f003 0320 	and.w	r3, r3, #32
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059e:	4b2f      	ldr	r3, [pc, #188]	; (800065c <MX_GPIO_Init+0xec>)
 80005a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a2:	4a2e      	ldr	r2, [pc, #184]	; (800065c <MX_GPIO_Init+0xec>)
 80005a4:	f043 0301 	orr.w	r3, r3, #1
 80005a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005aa:	4b2c      	ldr	r3, [pc, #176]	; (800065c <MX_GPIO_Init+0xec>)
 80005ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b6:	4b29      	ldr	r3, [pc, #164]	; (800065c <MX_GPIO_Init+0xec>)
 80005b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ba:	4a28      	ldr	r2, [pc, #160]	; (800065c <MX_GPIO_Init+0xec>)
 80005bc:	f043 0302 	orr.w	r3, r3, #2
 80005c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005c2:	4b26      	ldr	r3, [pc, #152]	; (800065c <MX_GPIO_Init+0xec>)
 80005c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c6:	f003 0302 	and.w	r3, r3, #2
 80005ca:	603b      	str	r3, [r7, #0]
 80005cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2101      	movs	r1, #1
 80005d2:	4823      	ldr	r0, [pc, #140]	; (8000660 <MX_GPIO_Init+0xf0>)
 80005d4:	f001 f88a 	bl	80016ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80005d8:	2304      	movs	r3, #4
 80005da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005dc:	2302      	movs	r3, #2
 80005de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80005e8:	2307      	movs	r3, #7
 80005ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	4619      	mov	r1, r3
 80005f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f6:	f000 fef7 	bl	80013e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80005fa:	2308      	movs	r3, #8
 80005fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fe:	2302      	movs	r3, #2
 8000600:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000606:	2300      	movs	r3, #0
 8000608:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800060a:	230c      	movs	r3, #12
 800060c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060e:	f107 030c 	add.w	r3, r7, #12
 8000612:	4619      	mov	r1, r3
 8000614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000618:	f000 fee6 	bl	80013e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000620:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000624:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000626:	2300      	movs	r3, #0
 8000628:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062a:	f107 030c 	add.w	r3, r7, #12
 800062e:	4619      	mov	r1, r3
 8000630:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000634:	f000 fed8 	bl	80013e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000638:	2301      	movs	r3, #1
 800063a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063c:	2301      	movs	r3, #1
 800063e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000644:	2300      	movs	r3, #0
 8000646:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	4619      	mov	r1, r3
 800064e:	4804      	ldr	r0, [pc, #16]	; (8000660 <MX_GPIO_Init+0xf0>)
 8000650:	f000 feca 	bl	80013e8 <HAL_GPIO_Init>

}
 8000654:	bf00      	nop
 8000656:	3720      	adds	r7, #32
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40021000 	.word	0x40021000
 8000660:	48000400 	.word	0x48000400

08000664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000668:	b672      	cpsid	i
}
 800066a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800066c:	e7fe      	b.n	800066c <Error_Handler+0x8>
	...

08000670 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000676:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <HAL_MspInit+0x44>)
 8000678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800067a:	4a0e      	ldr	r2, [pc, #56]	; (80006b4 <HAL_MspInit+0x44>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	6613      	str	r3, [r2, #96]	; 0x60
 8000682:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <HAL_MspInit+0x44>)
 8000684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <HAL_MspInit+0x44>)
 8000690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000692:	4a08      	ldr	r2, [pc, #32]	; (80006b4 <HAL_MspInit+0x44>)
 8000694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000698:	6593      	str	r3, [r2, #88]	; 0x58
 800069a:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <HAL_MspInit+0x44>)
 800069c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800069e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a2:	603b      	str	r3, [r7, #0]
 80006a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006a6:	bf00      	nop
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	40021000 	.word	0x40021000

080006b8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b09a      	sub	sp, #104	; 0x68
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006d0:	f107 0310 	add.w	r3, r7, #16
 80006d4:	2244      	movs	r2, #68	; 0x44
 80006d6:	2100      	movs	r1, #0
 80006d8:	4618      	mov	r0, r3
 80006da:	f002 fc81 	bl	8002fe0 <memset>
  if(hfdcan->Instance==FDCAN1)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a20      	ldr	r2, [pc, #128]	; (8000764 <HAL_FDCAN_MspInit+0xac>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d139      	bne.n	800075c <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80006e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ec:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80006ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80006f2:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006f4:	f107 0310 	add.w	r3, r7, #16
 80006f8:	4618      	mov	r0, r3
 80006fa:	f002 fa5d 	bl	8002bb8 <HAL_RCCEx_PeriphCLKConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000704:	f7ff ffae 	bl	8000664 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000708:	4b17      	ldr	r3, [pc, #92]	; (8000768 <HAL_FDCAN_MspInit+0xb0>)
 800070a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800070c:	4a16      	ldr	r2, [pc, #88]	; (8000768 <HAL_FDCAN_MspInit+0xb0>)
 800070e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000712:	6593      	str	r3, [r2, #88]	; 0x58
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <HAL_FDCAN_MspInit+0xb0>)
 8000716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800071c:	60fb      	str	r3, [r7, #12]
 800071e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <HAL_FDCAN_MspInit+0xb0>)
 8000722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000724:	4a10      	ldr	r2, [pc, #64]	; (8000768 <HAL_FDCAN_MspInit+0xb0>)
 8000726:	f043 0301 	orr.w	r3, r3, #1
 800072a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800072c:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <HAL_FDCAN_MspInit+0xb0>)
 800072e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000730:	f003 0301 	and.w	r3, r3, #1
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000738:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800073c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073e:	2302      	movs	r3, #2
 8000740:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	2300      	movs	r3, #0
 8000748:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800074a:	2309      	movs	r3, #9
 800074c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000752:	4619      	mov	r1, r3
 8000754:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000758:	f000 fe46 	bl	80013e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800075c:	bf00      	nop
 800075e:	3768      	adds	r7, #104	; 0x68
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40006400 	.word	0x40006400
 8000768:	40021000 	.word	0x40021000

0800076c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b09a      	sub	sp, #104	; 0x68
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000774:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000784:	f107 0310 	add.w	r3, r7, #16
 8000788:	2244      	movs	r2, #68	; 0x44
 800078a:	2100      	movs	r1, #0
 800078c:	4618      	mov	r0, r3
 800078e:	f002 fc27 	bl	8002fe0 <memset>
  if(hi2c->Instance==I2C2)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a1f      	ldr	r2, [pc, #124]	; (8000814 <HAL_I2C_MspInit+0xa8>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d137      	bne.n	800080c <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800079c:	2380      	movs	r3, #128	; 0x80
 800079e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007a4:	f107 0310 	add.w	r3, r7, #16
 80007a8:	4618      	mov	r0, r3
 80007aa:	f002 fa05 	bl	8002bb8 <HAL_RCCEx_PeriphCLKConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80007b4:	f7ff ff56 	bl	8000664 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b8:	4b17      	ldr	r3, [pc, #92]	; (8000818 <HAL_I2C_MspInit+0xac>)
 80007ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007bc:	4a16      	ldr	r2, [pc, #88]	; (8000818 <HAL_I2C_MspInit+0xac>)
 80007be:	f043 0301 	orr.w	r3, r3, #1
 80007c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c4:	4b14      	ldr	r3, [pc, #80]	; (8000818 <HAL_I2C_MspInit+0xac>)
 80007c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c8:	f003 0301 	and.w	r3, r3, #1
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007d4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007d6:	2312      	movs	r3, #18
 80007d8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2300      	movs	r3, #0
 80007e0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80007e2:	2304      	movs	r3, #4
 80007e4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007ea:	4619      	mov	r1, r3
 80007ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f0:	f000 fdfa 	bl	80013e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80007f4:	4b08      	ldr	r3, [pc, #32]	; (8000818 <HAL_I2C_MspInit+0xac>)
 80007f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007f8:	4a07      	ldr	r2, [pc, #28]	; (8000818 <HAL_I2C_MspInit+0xac>)
 80007fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007fe:	6593      	str	r3, [r2, #88]	; 0x58
 8000800:	4b05      	ldr	r3, [pc, #20]	; (8000818 <HAL_I2C_MspInit+0xac>)
 8000802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000804:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800080c:	bf00      	nop
 800080e:	3768      	adds	r7, #104	; 0x68
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40005800 	.word	0x40005800
 8000818:	40021000 	.word	0x40021000

0800081c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000820:	e7fe      	b.n	8000820 <NMI_Handler+0x4>

08000822 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000826:	e7fe      	b.n	8000826 <HardFault_Handler+0x4>

08000828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800082c:	e7fe      	b.n	800082c <MemManage_Handler+0x4>

0800082e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000832:	e7fe      	b.n	8000832 <BusFault_Handler+0x4>

08000834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <UsageFault_Handler+0x4>

0800083a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000868:	f000 f890 	bl	800098c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}

08000870 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <SystemInit+0x20>)
 8000876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800087a:	4a05      	ldr	r2, [pc, #20]	; (8000890 <SystemInit+0x20>)
 800087c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000880:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000894:	480d      	ldr	r0, [pc, #52]	; (80008cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000896:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000898:	480d      	ldr	r0, [pc, #52]	; (80008d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800089a:	490e      	ldr	r1, [pc, #56]	; (80008d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800089c:	4a0e      	ldr	r2, [pc, #56]	; (80008d8 <LoopForever+0xe>)
  movs r3, #0
 800089e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80008a0:	e002      	b.n	80008a8 <LoopCopyDataInit>

080008a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008a6:	3304      	adds	r3, #4

080008a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008ac:	d3f9      	bcc.n	80008a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ae:	4a0b      	ldr	r2, [pc, #44]	; (80008dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80008b0:	4c0b      	ldr	r4, [pc, #44]	; (80008e0 <LoopForever+0x16>)
  movs r3, #0
 80008b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b4:	e001      	b.n	80008ba <LoopFillZerobss>

080008b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b8:	3204      	adds	r2, #4

080008ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008bc:	d3fb      	bcc.n	80008b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008be:	f7ff ffd7 	bl	8000870 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008c2:	f002 fb69 	bl	8002f98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008c6:	f7ff fca7 	bl	8000218 <main>

080008ca <LoopForever>:

LoopForever:
    b LoopForever
 80008ca:	e7fe      	b.n	80008ca <LoopForever>
  ldr   r0, =_estack
 80008cc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80008d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008d8:	08003030 	.word	0x08003030
  ldr r2, =_sbss
 80008dc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008e0:	20000108 	.word	0x20000108

080008e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008e4:	e7fe      	b.n	80008e4 <ADC1_2_IRQHandler>

080008e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b082      	sub	sp, #8
 80008ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008ec:	2300      	movs	r3, #0
 80008ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f0:	2003      	movs	r0, #3
 80008f2:	f000 f93d 	bl	8000b70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008f6:	200f      	movs	r0, #15
 80008f8:	f000 f80e 	bl	8000918 <HAL_InitTick>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d002      	beq.n	8000908 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000902:	2301      	movs	r3, #1
 8000904:	71fb      	strb	r3, [r7, #7]
 8000906:	e001      	b.n	800090c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000908:	f7ff feb2 	bl	8000670 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800090c:	79fb      	ldrb	r3, [r7, #7]

}
 800090e:	4618      	mov	r0, r3
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000920:	2300      	movs	r3, #0
 8000922:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000924:	4b16      	ldr	r3, [pc, #88]	; (8000980 <HAL_InitTick+0x68>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d022      	beq.n	8000972 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800092c:	4b15      	ldr	r3, [pc, #84]	; (8000984 <HAL_InitTick+0x6c>)
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	4b13      	ldr	r3, [pc, #76]	; (8000980 <HAL_InitTick+0x68>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000938:	fbb1 f3f3 	udiv	r3, r1, r3
 800093c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000940:	4618      	mov	r0, r3
 8000942:	f000 f93a 	bl	8000bba <HAL_SYSTICK_Config>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d10f      	bne.n	800096c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2b0f      	cmp	r3, #15
 8000950:	d809      	bhi.n	8000966 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000952:	2200      	movs	r2, #0
 8000954:	6879      	ldr	r1, [r7, #4]
 8000956:	f04f 30ff 	mov.w	r0, #4294967295
 800095a:	f000 f914 	bl	8000b86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800095e:	4a0a      	ldr	r2, [pc, #40]	; (8000988 <HAL_InitTick+0x70>)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6013      	str	r3, [r2, #0]
 8000964:	e007      	b.n	8000976 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000966:	2301      	movs	r3, #1
 8000968:	73fb      	strb	r3, [r7, #15]
 800096a:	e004      	b.n	8000976 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800096c:	2301      	movs	r3, #1
 800096e:	73fb      	strb	r3, [r7, #15]
 8000970:	e001      	b.n	8000976 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000972:	2301      	movs	r3, #1
 8000974:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000976:	7bfb      	ldrb	r3, [r7, #15]
}
 8000978:	4618      	mov	r0, r3
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000008 	.word	0x20000008
 8000984:	20000000 	.word	0x20000000
 8000988:	20000004 	.word	0x20000004

0800098c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <HAL_IncTick+0x1c>)
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	4b05      	ldr	r3, [pc, #20]	; (80009ac <HAL_IncTick+0x20>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4413      	add	r3, r2
 800099a:	4a03      	ldr	r2, [pc, #12]	; (80009a8 <HAL_IncTick+0x1c>)
 800099c:	6013      	str	r3, [r2, #0]
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	20000104 	.word	0x20000104
 80009ac:	20000008 	.word	0x20000008

080009b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  return uwTick;
 80009b4:	4b03      	ldr	r3, [pc, #12]	; (80009c4 <HAL_GetTick+0x14>)
 80009b6:	681b      	ldr	r3, [r3, #0]
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	20000104 	.word	0x20000104

080009c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009d0:	f7ff ffee 	bl	80009b0 <HAL_GetTick>
 80009d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009e0:	d004      	beq.n	80009ec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80009e2:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <HAL_Delay+0x40>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	68fa      	ldr	r2, [r7, #12]
 80009e8:	4413      	add	r3, r2
 80009ea:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009ec:	bf00      	nop
 80009ee:	f7ff ffdf 	bl	80009b0 <HAL_GetTick>
 80009f2:	4602      	mov	r2, r0
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	1ad3      	subs	r3, r2, r3
 80009f8:	68fa      	ldr	r2, [r7, #12]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	d8f7      	bhi.n	80009ee <HAL_Delay+0x26>
  {
  }
}
 80009fe:	bf00      	nop
 8000a00:	bf00      	nop
 8000a02:	3710      	adds	r7, #16
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000008 	.word	0x20000008

08000a0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f003 0307 	and.w	r3, r3, #7
 8000a1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <__NVIC_SetPriorityGrouping+0x44>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a28:	4013      	ands	r3, r2
 8000a2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a3e:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <__NVIC_SetPriorityGrouping+0x44>)
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	60d3      	str	r3, [r2, #12]
}
 8000a44:	bf00      	nop
 8000a46:	3714      	adds	r7, #20
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a58:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <__NVIC_GetPriorityGrouping+0x18>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	0a1b      	lsrs	r3, r3, #8
 8000a5e:	f003 0307 	and.w	r3, r3, #7
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	6039      	str	r1, [r7, #0]
 8000a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	db0a      	blt.n	8000a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	490c      	ldr	r1, [pc, #48]	; (8000abc <__NVIC_SetPriority+0x4c>)
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	0112      	lsls	r2, r2, #4
 8000a90:	b2d2      	uxtb	r2, r2
 8000a92:	440b      	add	r3, r1
 8000a94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a98:	e00a      	b.n	8000ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	4908      	ldr	r1, [pc, #32]	; (8000ac0 <__NVIC_SetPriority+0x50>)
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	f003 030f 	and.w	r3, r3, #15
 8000aa6:	3b04      	subs	r3, #4
 8000aa8:	0112      	lsls	r2, r2, #4
 8000aaa:	b2d2      	uxtb	r2, r2
 8000aac:	440b      	add	r3, r1
 8000aae:	761a      	strb	r2, [r3, #24]
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	e000e100 	.word	0xe000e100
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b089      	sub	sp, #36	; 0x24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ad8:	69fb      	ldr	r3, [r7, #28]
 8000ada:	f1c3 0307 	rsb	r3, r3, #7
 8000ade:	2b04      	cmp	r3, #4
 8000ae0:	bf28      	it	cs
 8000ae2:	2304      	movcs	r3, #4
 8000ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	3304      	adds	r3, #4
 8000aea:	2b06      	cmp	r3, #6
 8000aec:	d902      	bls.n	8000af4 <NVIC_EncodePriority+0x30>
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	3b03      	subs	r3, #3
 8000af2:	e000      	b.n	8000af6 <NVIC_EncodePriority+0x32>
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af8:	f04f 32ff 	mov.w	r2, #4294967295
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	43da      	mvns	r2, r3
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	401a      	ands	r2, r3
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	fa01 f303 	lsl.w	r3, r1, r3
 8000b16:	43d9      	mvns	r1, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b1c:	4313      	orrs	r3, r2
         );
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3724      	adds	r7, #36	; 0x24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
	...

08000b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3b01      	subs	r3, #1
 8000b38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b3c:	d301      	bcc.n	8000b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e00f      	b.n	8000b62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b42:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <SysTick_Config+0x40>)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b4a:	210f      	movs	r1, #15
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	f7ff ff8e 	bl	8000a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <SysTick_Config+0x40>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b5a:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <SysTick_Config+0x40>)
 8000b5c:	2207      	movs	r2, #7
 8000b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	e000e010 	.word	0xe000e010

08000b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f7ff ff47 	bl	8000a0c <__NVIC_SetPriorityGrouping>
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b086      	sub	sp, #24
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	60b9      	str	r1, [r7, #8]
 8000b90:	607a      	str	r2, [r7, #4]
 8000b92:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b94:	f7ff ff5e 	bl	8000a54 <__NVIC_GetPriorityGrouping>
 8000b98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	68b9      	ldr	r1, [r7, #8]
 8000b9e:	6978      	ldr	r0, [r7, #20]
 8000ba0:	f7ff ff90 	bl	8000ac4 <NVIC_EncodePriority>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000baa:	4611      	mov	r1, r2
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff ff5f 	bl	8000a70 <__NVIC_SetPriority>
}
 8000bb2:	bf00      	nop
 8000bb4:	3718      	adds	r7, #24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f7ff ffb2 	bl	8000b2c <SysTick_Config>
 8000bc8:	4603      	mov	r3, r0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d101      	bne.n	8000be6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	e147      	b.n	8000e76 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d106      	bne.n	8000c00 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff fd5c 	bl	80006b8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	699a      	ldr	r2, [r3, #24]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f022 0210 	bic.w	r2, r2, #16
 8000c0e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c10:	f7ff fece 	bl	80009b0 <HAL_GetTick>
 8000c14:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000c16:	e012      	b.n	8000c3e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000c18:	f7ff feca 	bl	80009b0 <HAL_GetTick>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	2b0a      	cmp	r3, #10
 8000c24:	d90b      	bls.n	8000c3e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c2a:	f043 0201 	orr.w	r2, r3, #1
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2203      	movs	r2, #3
 8000c36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e11b      	b.n	8000e76 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	f003 0308 	and.w	r3, r3, #8
 8000c48:	2b08      	cmp	r3, #8
 8000c4a:	d0e5      	beq.n	8000c18 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	699a      	ldr	r2, [r3, #24]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f042 0201 	orr.w	r2, r2, #1
 8000c5a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c5c:	f7ff fea8 	bl	80009b0 <HAL_GetTick>
 8000c60:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000c62:	e012      	b.n	8000c8a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000c64:	f7ff fea4 	bl	80009b0 <HAL_GetTick>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	2b0a      	cmp	r3, #10
 8000c70:	d90b      	bls.n	8000c8a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c76:	f043 0201 	orr.w	r2, r3, #1
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2203      	movs	r2, #3
 8000c82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e0f5      	b.n	8000e76 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	f003 0301 	and.w	r3, r3, #1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d0e5      	beq.n	8000c64 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	699a      	ldr	r2, [r3, #24]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f042 0202 	orr.w	r2, r2, #2
 8000ca6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a74      	ldr	r2, [pc, #464]	; (8000e80 <HAL_FDCAN_Init+0x2ac>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d103      	bne.n	8000cba <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000cb2:	4a74      	ldr	r2, [pc, #464]	; (8000e84 <HAL_FDCAN_Init+0x2b0>)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	7c1b      	ldrb	r3, [r3, #16]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d108      	bne.n	8000cd4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	699a      	ldr	r2, [r3, #24]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000cd0:	619a      	str	r2, [r3, #24]
 8000cd2:	e007      	b.n	8000ce4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	699a      	ldr	r2, [r3, #24]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ce2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	7c5b      	ldrb	r3, [r3, #17]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d108      	bne.n	8000cfe <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	699a      	ldr	r2, [r3, #24]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000cfa:	619a      	str	r2, [r3, #24]
 8000cfc:	e007      	b.n	8000d0e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	699a      	ldr	r2, [r3, #24]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000d0c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	7c9b      	ldrb	r3, [r3, #18]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d108      	bne.n	8000d28 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	699a      	ldr	r2, [r3, #24]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000d24:	619a      	str	r2, [r3, #24]
 8000d26:	e007      	b.n	8000d38 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	699a      	ldr	r2, [r3, #24]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000d36:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	689a      	ldr	r2, [r3, #8]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	430a      	orrs	r2, r1
 8000d4c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	699a      	ldr	r2, [r3, #24]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8000d5c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	691a      	ldr	r2, [r3, #16]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f022 0210 	bic.w	r2, r2, #16
 8000d6c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	68db      	ldr	r3, [r3, #12]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d108      	bne.n	8000d88 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	699a      	ldr	r2, [r3, #24]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f042 0204 	orr.w	r2, r2, #4
 8000d84:	619a      	str	r2, [r3, #24]
 8000d86:	e02c      	b.n	8000de2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d028      	beq.n	8000de2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d01c      	beq.n	8000dd2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	699a      	ldr	r2, [r3, #24]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000da6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	691a      	ldr	r2, [r3, #16]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f042 0210 	orr.w	r2, r2, #16
 8000db6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	2b03      	cmp	r3, #3
 8000dbe:	d110      	bne.n	8000de2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	699a      	ldr	r2, [r3, #24]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f042 0220 	orr.w	r2, r2, #32
 8000dce:	619a      	str	r2, [r3, #24]
 8000dd0:	e007      	b.n	8000de2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	699a      	ldr	r2, [r3, #24]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f042 0220 	orr.w	r2, r2, #32
 8000de0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	69db      	ldr	r3, [r3, #28]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000df2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6a1b      	ldr	r3, [r3, #32]
 8000df8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000dfa:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000e0a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000e0c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000e16:	d115      	bne.n	8000e44 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e1c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e22:	3b01      	subs	r3, #1
 8000e24:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000e26:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2c:	3b01      	subs	r3, #1
 8000e2e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000e30:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000e40:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000e42:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	430a      	orrs	r2, r1
 8000e56:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f000 f9f2 	bl	8001244 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2200      	movs	r2, #0
 8000e64:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2201      	movs	r2, #1
 8000e70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40006400 	.word	0x40006400
 8000e84:	40006500 	.word	0x40006500

08000e88 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b087      	sub	sp, #28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000e98:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8000e9a:	7dfb      	ldrb	r3, [r7, #23]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d002      	beq.n	8000ea6 <HAL_FDCAN_ConfigFilter+0x1e>
 8000ea0:	7dfb      	ldrb	r3, [r7, #23]
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d13d      	bne.n	8000f22 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d119      	bne.n	8000ee2 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000eba:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	691b      	ldr	r3, [r3, #16]
 8000ec0:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8000ec2:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	4413      	add	r3, r2
 8000ed8:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	e01d      	b.n	8000f1e <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	68db      	ldr	r3, [r3, #12]
 8000ee6:	075a      	lsls	r2, r3, #29
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	691b      	ldr	r3, [r3, #16]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	079a      	lsls	r2, r3, #30
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	00db      	lsls	r3, r3, #3
 8000f08:	4413      	add	r3, r2
 8000f0a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	3304      	adds	r3, #4
 8000f16:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	e006      	b.n	8000f30 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f26:	f043 0202 	orr.w	r2, r3, #2
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
  }
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	371c      	adds	r7, #28
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
 8000f48:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d116      	bne.n	8000f84 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f5e:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	011a      	lsls	r2, r3, #4
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	431a      	orrs	r2, r3
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	431a      	orrs	r2, r3
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	431a      	orrs	r2, r3
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8000f80:	2300      	movs	r3, #0
 8000f82:	e006      	b.n	8000f92 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f88:	f043 0204 	orr.w	r2, r3, #4
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
  }
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	b083      	sub	sp, #12
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d110      	bne.n	8000fd4 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	699a      	ldr	r2, [r3, #24]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f022 0201 	bic.w	r2, r2, #1
 8000fc8:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	e006      	b.n	8000fe2 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fd8:	f043 0204 	orr.w	r2, r3, #4
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
  }
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b086      	sub	sp, #24
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	60f8      	str	r0, [r7, #12]
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001000:	b2db      	uxtb	r3, r3
 8001002:	2b02      	cmp	r3, #2
 8001004:	d12c      	bne.n	8001060 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800100e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d007      	beq.n	8001026 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800101a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e023      	b.n	800106e <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800102e:	0c1b      	lsrs	r3, r3, #16
 8001030:	f003 0303 	and.w	r3, r3, #3
 8001034:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	68b9      	ldr	r1, [r7, #8]
 800103c:	68f8      	ldr	r0, [r7, #12]
 800103e:	f000 f957 	bl	80012f0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2101      	movs	r1, #1
 8001048:	697a      	ldr	r2, [r7, #20]
 800104a:	fa01 f202 	lsl.w	r2, r1, r2
 800104e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001052:	2201      	movs	r2, #1
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	409a      	lsls	r2, r3
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 800105c:	2300      	movs	r3, #0
 800105e:	e006      	b.n	800106e <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001064:	f043 0208 	orr.w	r2, r3, #8
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
  }
}
 800106e:	4618      	mov	r0, r3
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001076:	b480      	push	{r7}
 8001078:	b087      	sub	sp, #28
 800107a:	af00      	add	r7, sp, #0
 800107c:	60f8      	str	r0, [r7, #12]
 800107e:	60b9      	str	r1, [r7, #8]
 8001080:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001088:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800108a:	7dfb      	ldrb	r3, [r7, #23]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d003      	beq.n	8001098 <HAL_FDCAN_ActivateNotification+0x22>
 8001090:	7dfb      	ldrb	r3, [r7, #23]
 8001092:	2b02      	cmp	r3, #2
 8001094:	f040 80c8 	bne.w	8001228 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109e:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d004      	beq.n	80010b4 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d03b      	beq.n	800112c <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d004      	beq.n	80010c8 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	f003 0302 	and.w	r3, r3, #2
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d031      	beq.n	800112c <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d004      	beq.n	80010dc <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	f003 0304 	and.w	r3, r3, #4
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d027      	beq.n	800112c <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d004      	beq.n	80010f0 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	f003 0308 	and.w	r3, r3, #8
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d01d      	beq.n	800112c <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d004      	beq.n	8001104 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	f003 0310 	and.w	r3, r3, #16
 8001100:	2b00      	cmp	r3, #0
 8001102:	d013      	beq.n	800112c <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800110a:	2b00      	cmp	r3, #0
 800110c:	d004      	beq.n	8001118 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	f003 0320 	and.w	r3, r3, #32
 8001114:	2b00      	cmp	r3, #0
 8001116:	d009      	beq.n	800112c <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800111e:	2b00      	cmp	r3, #0
 8001120:	d00c      	beq.n	800113c <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001128:	2b00      	cmp	r3, #0
 800112a:	d107      	bne.n	800113c <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f042 0201 	orr.w	r2, r2, #1
 800113a:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	2b00      	cmp	r3, #0
 8001144:	d004      	beq.n	8001150 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	2b00      	cmp	r3, #0
 800114e:	d13b      	bne.n	80011c8 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001156:	2b00      	cmp	r3, #0
 8001158:	d004      	beq.n	8001164 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	2b00      	cmp	r3, #0
 8001162:	d131      	bne.n	80011c8 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800116a:	2b00      	cmp	r3, #0
 800116c:	d004      	beq.n	8001178 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	f003 0304 	and.w	r3, r3, #4
 8001174:	2b00      	cmp	r3, #0
 8001176:	d127      	bne.n	80011c8 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800117e:	2b00      	cmp	r3, #0
 8001180:	d004      	beq.n	800118c <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	f003 0308 	and.w	r3, r3, #8
 8001188:	2b00      	cmp	r3, #0
 800118a:	d11d      	bne.n	80011c8 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001192:	2b00      	cmp	r3, #0
 8001194:	d004      	beq.n	80011a0 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	f003 0310 	and.w	r3, r3, #16
 800119c:	2b00      	cmp	r3, #0
 800119e:	d113      	bne.n	80011c8 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d004      	beq.n	80011b4 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	f003 0320 	and.w	r3, r3, #32
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d109      	bne.n	80011c8 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d00c      	beq.n	80011d8 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d007      	beq.n	80011d8 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f042 0202 	orr.w	r2, r2, #2
 80011d6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d009      	beq.n	80011f6 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	430a      	orrs	r2, r1
 80011f2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d009      	beq.n	8001214 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	430a      	orrs	r2, r1
 8001210:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	430a      	orrs	r2, r1
 8001222:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8001224:	2300      	movs	r3, #0
 8001226:	e006      	b.n	8001236 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800122c:	f043 0202 	orr.w	r2, r3, #2
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
  }
}
 8001236:	4618      	mov	r0, r3
 8001238:	371c      	adds	r7, #28
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
	...

08001244 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800124c:	4b27      	ldr	r3, [pc, #156]	; (80012ec <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800124e:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68ba      	ldr	r2, [r7, #8]
 8001254:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800125e:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001266:	041a      	lsls	r2, r3, #16
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	430a      	orrs	r2, r1
 800126e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001284:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800128c:	061a      	lsls	r2, r3, #24
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	430a      	orrs	r2, r1
 8001294:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	e005      	b.n	80012d2 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	3304      	adds	r3, #4
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80012d8:	68fa      	ldr	r2, [r7, #12]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d3f3      	bcc.n	80012c6 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80012de:	bf00      	nop
 80012e0:	bf00      	nop
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	4000a400 	.word	0x4000a400

080012f0 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b089      	sub	sp, #36	; 0x24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
 80012fc:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d10a      	bne.n	800131c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800130e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001316:	4313      	orrs	r3, r2
 8001318:	61fb      	str	r3, [r7, #28]
 800131a:	e00a      	b.n	8001332 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001324:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800132a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800132c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001330:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	6a1b      	ldr	r3, [r3, #32]
 8001336:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800133c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001342:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001348:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800134e:	4313      	orrs	r3, r2
 8001350:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001356:	683a      	ldr	r2, [r7, #0]
 8001358:	4613      	mov	r3, r2
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	4413      	add	r3, r2
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	440b      	add	r3, r1
 8001362:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	69fa      	ldr	r2, [r7, #28]
 8001368:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	3304      	adds	r3, #4
 800136e:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	3304      	adds	r3, #4
 800137a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	e020      	b.n	80013c4 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	3303      	adds	r3, #3
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	3302      	adds	r3, #2
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	440b      	add	r3, r1
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800139a:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	3301      	adds	r3, #1
 80013a0:	6879      	ldr	r1, [r7, #4]
 80013a2:	440b      	add	r3, r1
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80013a8:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	697a      	ldr	r2, [r7, #20]
 80013ae:	440a      	add	r2, r1
 80013b0:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80013b2:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	3304      	adds	r3, #4
 80013bc:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	3304      	adds	r3, #4
 80013c2:	617b      	str	r3, [r7, #20]
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	0c1b      	lsrs	r3, r3, #16
 80013ca:	4a06      	ldr	r2, [pc, #24]	; (80013e4 <FDCAN_CopyMessageToRAM+0xf4>)
 80013cc:	5cd3      	ldrb	r3, [r2, r3]
 80013ce:	461a      	mov	r2, r3
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d3d5      	bcc.n	8001382 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 80013d6:	bf00      	nop
 80013d8:	bf00      	nop
 80013da:	3724      	adds	r7, #36	; 0x24
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	08003018 	.word	0x08003018

080013e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b087      	sub	sp, #28
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013f2:	2300      	movs	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80013f6:	e15a      	b.n	80016ae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	2101      	movs	r1, #1
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	fa01 f303 	lsl.w	r3, r1, r3
 8001404:	4013      	ands	r3, r2
 8001406:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2b00      	cmp	r3, #0
 800140c:	f000 814c 	beq.w	80016a8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f003 0303 	and.w	r3, r3, #3
 8001418:	2b01      	cmp	r3, #1
 800141a:	d005      	beq.n	8001428 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001424:	2b02      	cmp	r3, #2
 8001426:	d130      	bne.n	800148a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	2203      	movs	r2, #3
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4013      	ands	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	68da      	ldr	r2, [r3, #12]
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	4313      	orrs	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800145e:	2201      	movs	r2, #1
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43db      	mvns	r3, r3
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	4013      	ands	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	091b      	lsrs	r3, r3, #4
 8001474:	f003 0201 	and.w	r2, r3, #1
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f003 0303 	and.w	r3, r3, #3
 8001492:	2b03      	cmp	r3, #3
 8001494:	d017      	beq.n	80014c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	2203      	movs	r2, #3
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4013      	ands	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4313      	orrs	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f003 0303 	and.w	r3, r3, #3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d123      	bne.n	800151a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	08da      	lsrs	r2, r3, #3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	3208      	adds	r2, #8
 80014da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	220f      	movs	r2, #15
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	691a      	ldr	r2, [r3, #16]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	f003 0307 	and.w	r3, r3, #7
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	08da      	lsrs	r2, r3, #3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3208      	adds	r2, #8
 8001514:	6939      	ldr	r1, [r7, #16]
 8001516:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	2203      	movs	r2, #3
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43db      	mvns	r3, r3
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	4013      	ands	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f003 0203 	and.w	r2, r3, #3
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4313      	orrs	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 80a6 	beq.w	80016a8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155c:	4b5b      	ldr	r3, [pc, #364]	; (80016cc <HAL_GPIO_Init+0x2e4>)
 800155e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001560:	4a5a      	ldr	r2, [pc, #360]	; (80016cc <HAL_GPIO_Init+0x2e4>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	6613      	str	r3, [r2, #96]	; 0x60
 8001568:	4b58      	ldr	r3, [pc, #352]	; (80016cc <HAL_GPIO_Init+0x2e4>)
 800156a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001574:	4a56      	ldr	r2, [pc, #344]	; (80016d0 <HAL_GPIO_Init+0x2e8>)
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	089b      	lsrs	r3, r3, #2
 800157a:	3302      	adds	r3, #2
 800157c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001580:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	f003 0303 	and.w	r3, r3, #3
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	220f      	movs	r2, #15
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4013      	ands	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800159e:	d01f      	beq.n	80015e0 <HAL_GPIO_Init+0x1f8>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4a4c      	ldr	r2, [pc, #304]	; (80016d4 <HAL_GPIO_Init+0x2ec>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d019      	beq.n	80015dc <HAL_GPIO_Init+0x1f4>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a4b      	ldr	r2, [pc, #300]	; (80016d8 <HAL_GPIO_Init+0x2f0>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d013      	beq.n	80015d8 <HAL_GPIO_Init+0x1f0>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a4a      	ldr	r2, [pc, #296]	; (80016dc <HAL_GPIO_Init+0x2f4>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d00d      	beq.n	80015d4 <HAL_GPIO_Init+0x1ec>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a49      	ldr	r2, [pc, #292]	; (80016e0 <HAL_GPIO_Init+0x2f8>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d007      	beq.n	80015d0 <HAL_GPIO_Init+0x1e8>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a48      	ldr	r2, [pc, #288]	; (80016e4 <HAL_GPIO_Init+0x2fc>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d101      	bne.n	80015cc <HAL_GPIO_Init+0x1e4>
 80015c8:	2305      	movs	r3, #5
 80015ca:	e00a      	b.n	80015e2 <HAL_GPIO_Init+0x1fa>
 80015cc:	2306      	movs	r3, #6
 80015ce:	e008      	b.n	80015e2 <HAL_GPIO_Init+0x1fa>
 80015d0:	2304      	movs	r3, #4
 80015d2:	e006      	b.n	80015e2 <HAL_GPIO_Init+0x1fa>
 80015d4:	2303      	movs	r3, #3
 80015d6:	e004      	b.n	80015e2 <HAL_GPIO_Init+0x1fa>
 80015d8:	2302      	movs	r3, #2
 80015da:	e002      	b.n	80015e2 <HAL_GPIO_Init+0x1fa>
 80015dc:	2301      	movs	r3, #1
 80015de:	e000      	b.n	80015e2 <HAL_GPIO_Init+0x1fa>
 80015e0:	2300      	movs	r3, #0
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	f002 0203 	and.w	r2, r2, #3
 80015e8:	0092      	lsls	r2, r2, #2
 80015ea:	4093      	lsls	r3, r2
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015f2:	4937      	ldr	r1, [pc, #220]	; (80016d0 <HAL_GPIO_Init+0x2e8>)
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	089b      	lsrs	r3, r3, #2
 80015f8:	3302      	adds	r3, #2
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001600:	4b39      	ldr	r3, [pc, #228]	; (80016e8 <HAL_GPIO_Init+0x300>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	43db      	mvns	r3, r3
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	4013      	ands	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d003      	beq.n	8001624 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	4313      	orrs	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001624:	4a30      	ldr	r2, [pc, #192]	; (80016e8 <HAL_GPIO_Init+0x300>)
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800162a:	4b2f      	ldr	r3, [pc, #188]	; (80016e8 <HAL_GPIO_Init+0x300>)
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	43db      	mvns	r3, r3
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	4013      	ands	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4313      	orrs	r3, r2
 800164c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800164e:	4a26      	ldr	r2, [pc, #152]	; (80016e8 <HAL_GPIO_Init+0x300>)
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001654:	4b24      	ldr	r3, [pc, #144]	; (80016e8 <HAL_GPIO_Init+0x300>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	43db      	mvns	r3, r3
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	4013      	ands	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d003      	beq.n	8001678 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	4313      	orrs	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001678:	4a1b      	ldr	r2, [pc, #108]	; (80016e8 <HAL_GPIO_Init+0x300>)
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800167e:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <HAL_GPIO_Init+0x300>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	43db      	mvns	r3, r3
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	4013      	ands	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4313      	orrs	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016a2:	4a11      	ldr	r2, [pc, #68]	; (80016e8 <HAL_GPIO_Init+0x300>)
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	3301      	adds	r3, #1
 80016ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	fa22 f303 	lsr.w	r3, r2, r3
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f47f ae9d 	bne.w	80013f8 <HAL_GPIO_Init+0x10>
  }
}
 80016be:	bf00      	nop
 80016c0:	bf00      	nop
 80016c2:	371c      	adds	r7, #28
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	40021000 	.word	0x40021000
 80016d0:	40010000 	.word	0x40010000
 80016d4:	48000400 	.word	0x48000400
 80016d8:	48000800 	.word	0x48000800
 80016dc:	48000c00 	.word	0x48000c00
 80016e0:	48001000 	.word	0x48001000
 80016e4:	48001400 	.word	0x48001400
 80016e8:	40010400 	.word	0x40010400

080016ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	807b      	strh	r3, [r7, #2]
 80016f8:	4613      	mov	r3, r2
 80016fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016fc:	787b      	ldrb	r3, [r7, #1]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001702:	887a      	ldrh	r2, [r7, #2]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001708:	e002      	b.n	8001710 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800170a:	887a      	ldrh	r2, [r7, #2]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	695b      	ldr	r3, [r3, #20]
 800172c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800172e:	887a      	ldrh	r2, [r7, #2]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4013      	ands	r3, r2
 8001734:	041a      	lsls	r2, r3, #16
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	43d9      	mvns	r1, r3
 800173a:	887b      	ldrh	r3, [r7, #2]
 800173c:	400b      	ands	r3, r1
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	619a      	str	r2, [r3, #24]
}
 8001744:	bf00      	nop
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d101      	bne.n	8001762 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e081      	b.n	8001866 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b00      	cmp	r3, #0
 800176c:	d106      	bne.n	800177c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7fe fff8 	bl	800076c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2224      	movs	r2, #36	; 0x24
 8001780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f022 0201 	bic.w	r2, r2, #1
 8001792:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d107      	bne.n	80017ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689a      	ldr	r2, [r3, #8]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	e006      	b.n	80017d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	689a      	ldr	r2, [r3, #8]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80017d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d104      	bne.n	80017ea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	6812      	ldr	r2, [r2, #0]
 80017f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68da      	ldr	r2, [r3, #12]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800180c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	691a      	ldr	r2, [r3, #16]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	430a      	orrs	r2, r1
 8001826:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	69d9      	ldr	r1, [r3, #28]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a1a      	ldr	r2, [r3, #32]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	430a      	orrs	r2, r1
 8001836:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f042 0201 	orr.w	r2, r2, #1
 8001846:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2220      	movs	r2, #32
 8001852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b088      	sub	sp, #32
 8001874:	af02      	add	r7, sp, #8
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	4608      	mov	r0, r1
 800187a:	4611      	mov	r1, r2
 800187c:	461a      	mov	r2, r3
 800187e:	4603      	mov	r3, r0
 8001880:	817b      	strh	r3, [r7, #10]
 8001882:	460b      	mov	r3, r1
 8001884:	813b      	strh	r3, [r7, #8]
 8001886:	4613      	mov	r3, r2
 8001888:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b20      	cmp	r3, #32
 8001894:	f040 80fd 	bne.w	8001a92 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001898:	6a3b      	ldr	r3, [r7, #32]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d002      	beq.n	80018a4 <HAL_I2C_Mem_Read+0x34>
 800189e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d105      	bne.n	80018b0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018aa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e0f1      	b.n	8001a94 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d101      	bne.n	80018be <HAL_I2C_Mem_Read+0x4e>
 80018ba:	2302      	movs	r3, #2
 80018bc:	e0ea      	b.n	8001a94 <HAL_I2C_Mem_Read+0x224>
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80018c6:	f7ff f873 	bl	80009b0 <HAL_GetTick>
 80018ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	2319      	movs	r3, #25
 80018d2:	2201      	movs	r2, #1
 80018d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018d8:	68f8      	ldr	r0, [r7, #12]
 80018da:	f000 f95b 	bl	8001b94 <I2C_WaitOnFlagUntilTimeout>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e0d5      	b.n	8001a94 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2222      	movs	r2, #34	; 0x22
 80018ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2240      	movs	r2, #64	; 0x40
 80018f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2200      	movs	r2, #0
 80018fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6a3a      	ldr	r2, [r7, #32]
 8001902:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001908:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2200      	movs	r2, #0
 800190e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001910:	88f8      	ldrh	r0, [r7, #6]
 8001912:	893a      	ldrh	r2, [r7, #8]
 8001914:	8979      	ldrh	r1, [r7, #10]
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	9301      	str	r3, [sp, #4]
 800191a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	4603      	mov	r3, r0
 8001920:	68f8      	ldr	r0, [r7, #12]
 8001922:	f000 f8bf 	bl	8001aa4 <I2C_RequestMemoryRead>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d005      	beq.n	8001938 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e0ad      	b.n	8001a94 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800193c:	b29b      	uxth	r3, r3
 800193e:	2bff      	cmp	r3, #255	; 0xff
 8001940:	d90e      	bls.n	8001960 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	22ff      	movs	r2, #255	; 0xff
 8001946:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800194c:	b2da      	uxtb	r2, r3
 800194e:	8979      	ldrh	r1, [r7, #10]
 8001950:	4b52      	ldr	r3, [pc, #328]	; (8001a9c <HAL_I2C_Mem_Read+0x22c>)
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f000 fac3 	bl	8001ee4 <I2C_TransferConfig>
 800195e:	e00f      	b.n	8001980 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001964:	b29a      	uxth	r2, r3
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800196e:	b2da      	uxtb	r2, r3
 8001970:	8979      	ldrh	r1, [r7, #10]
 8001972:	4b4a      	ldr	r3, [pc, #296]	; (8001a9c <HAL_I2C_Mem_Read+0x22c>)
 8001974:	9300      	str	r3, [sp, #0]
 8001976:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f000 fab2 	bl	8001ee4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001986:	2200      	movs	r2, #0
 8001988:	2104      	movs	r1, #4
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f000 f902 	bl	8001b94 <I2C_WaitOnFlagUntilTimeout>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e07c      	b.n	8001a94 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a4:	b2d2      	uxtb	r2, r2
 80019a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ac:	1c5a      	adds	r2, r3, #1
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b6:	3b01      	subs	r3, #1
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	3b01      	subs	r3, #1
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d034      	beq.n	8001a40 <HAL_I2C_Mem_Read+0x1d0>
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d130      	bne.n	8001a40 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e4:	2200      	movs	r2, #0
 80019e6:	2180      	movs	r1, #128	; 0x80
 80019e8:	68f8      	ldr	r0, [r7, #12]
 80019ea:	f000 f8d3 	bl	8001b94 <I2C_WaitOnFlagUntilTimeout>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e04d      	b.n	8001a94 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	2bff      	cmp	r3, #255	; 0xff
 8001a00:	d90e      	bls.n	8001a20 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	22ff      	movs	r2, #255	; 0xff
 8001a06:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	8979      	ldrh	r1, [r7, #10]
 8001a10:	2300      	movs	r3, #0
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	f000 fa63 	bl	8001ee4 <I2C_TransferConfig>
 8001a1e:	e00f      	b.n	8001a40 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	8979      	ldrh	r1, [r7, #10]
 8001a32:	2300      	movs	r3, #0
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f000 fa52 	bl	8001ee4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d19a      	bne.n	8001980 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	f000 f920 	bl	8001c94 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e01a      	b.n	8001a94 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2220      	movs	r2, #32
 8001a64:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6859      	ldr	r1, [r3, #4]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <HAL_I2C_Mem_Read+0x230>)
 8001a72:	400b      	ands	r3, r1
 8001a74:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2220      	movs	r2, #32
 8001a7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	e000      	b.n	8001a94 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001a92:	2302      	movs	r3, #2
  }
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	80002400 	.word	0x80002400
 8001aa0:	fe00e800 	.word	0xfe00e800

08001aa4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af02      	add	r7, sp, #8
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	4608      	mov	r0, r1
 8001aae:	4611      	mov	r1, r2
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	817b      	strh	r3, [r7, #10]
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	813b      	strh	r3, [r7, #8]
 8001aba:	4613      	mov	r3, r2
 8001abc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001abe:	88fb      	ldrh	r3, [r7, #6]
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	8979      	ldrh	r1, [r7, #10]
 8001ac4:	4b20      	ldr	r3, [pc, #128]	; (8001b48 <I2C_RequestMemoryRead+0xa4>)
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	2300      	movs	r3, #0
 8001aca:	68f8      	ldr	r0, [r7, #12]
 8001acc:	f000 fa0a 	bl	8001ee4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ad0:	69fa      	ldr	r2, [r7, #28]
 8001ad2:	69b9      	ldr	r1, [r7, #24]
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	f000 f89d 	bl	8001c14 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e02c      	b.n	8001b3e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001ae4:	88fb      	ldrh	r3, [r7, #6]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d105      	bne.n	8001af6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001aea:	893b      	ldrh	r3, [r7, #8]
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	629a      	str	r2, [r3, #40]	; 0x28
 8001af4:	e015      	b.n	8001b22 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001af6:	893b      	ldrh	r3, [r7, #8]
 8001af8:	0a1b      	lsrs	r3, r3, #8
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b04:	69fa      	ldr	r2, [r7, #28]
 8001b06:	69b9      	ldr	r1, [r7, #24]
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	f000 f883 	bl	8001c14 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e012      	b.n	8001b3e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b18:	893b      	ldrh	r3, [r7, #8]
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	2140      	movs	r1, #64	; 0x40
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f000 f831 	bl	8001b94 <I2C_WaitOnFlagUntilTimeout>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e000      	b.n	8001b3e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	80002000 	.word	0x80002000

08001b4c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d103      	bne.n	8001b6a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2200      	movs	r2, #0
 8001b68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d007      	beq.n	8001b88 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	699a      	ldr	r2, [r3, #24]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 0201 	orr.w	r2, r2, #1
 8001b86:	619a      	str	r2, [r3, #24]
  }
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	603b      	str	r3, [r7, #0]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ba4:	e022      	b.n	8001bec <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bac:	d01e      	beq.n	8001bec <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bae:	f7fe feff 	bl	80009b0 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d302      	bcc.n	8001bc4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d113      	bne.n	8001bec <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc8:	f043 0220 	orr.w	r2, r3, #32
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2220      	movs	r2, #32
 8001bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e00f      	b.n	8001c0c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	699a      	ldr	r2, [r3, #24]
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	68ba      	ldr	r2, [r7, #8]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	bf0c      	ite	eq
 8001bfc:	2301      	moveq	r3, #1
 8001bfe:	2300      	movne	r3, #0
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	461a      	mov	r2, r3
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d0cd      	beq.n	8001ba6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c20:	e02c      	b.n	8001c7c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	68b9      	ldr	r1, [r7, #8]
 8001c26:	68f8      	ldr	r0, [r7, #12]
 8001c28:	f000 f870 	bl	8001d0c <I2C_IsErrorOccurred>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e02a      	b.n	8001c8c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c3c:	d01e      	beq.n	8001c7c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c3e:	f7fe feb7 	bl	80009b0 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	68ba      	ldr	r2, [r7, #8]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d302      	bcc.n	8001c54 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d113      	bne.n	8001c7c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c58:	f043 0220 	orr.w	r2, r3, #32
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2220      	movs	r2, #32
 8001c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e007      	b.n	8001c8c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d1cb      	bne.n	8001c22 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ca0:	e028      	b.n	8001cf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	68b9      	ldr	r1, [r7, #8]
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f000 f830 	bl	8001d0c <I2C_IsErrorOccurred>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e026      	b.n	8001d04 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cb6:	f7fe fe7b 	bl	80009b0 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	68ba      	ldr	r2, [r7, #8]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d302      	bcc.n	8001ccc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d113      	bne.n	8001cf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd0:	f043 0220 	orr.w	r2, r3, #32
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2220      	movs	r2, #32
 8001cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e007      	b.n	8001d04 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	f003 0320 	and.w	r3, r3, #32
 8001cfe:	2b20      	cmp	r3, #32
 8001d00:	d1cf      	bne.n	8001ca2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	; 0x28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	f003 0310 	and.w	r3, r3, #16
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d075      	beq.n	8001e24 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2210      	movs	r2, #16
 8001d3e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d40:	e056      	b.n	8001df0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d48:	d052      	beq.n	8001df0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d4a:	f7fe fe31 	bl	80009b0 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	68ba      	ldr	r2, [r7, #8]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d302      	bcc.n	8001d60 <I2C_IsErrorOccurred+0x54>
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d147      	bne.n	8001df0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d6a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d72:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d82:	d12e      	bne.n	8001de2 <I2C_IsErrorOccurred+0xd6>
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d8a:	d02a      	beq.n	8001de2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001d8c:	7cfb      	ldrb	r3, [r7, #19]
 8001d8e:	2b20      	cmp	r3, #32
 8001d90:	d027      	beq.n	8001de2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001da0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001da2:	f7fe fe05 	bl	80009b0 <HAL_GetTick>
 8001da6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001da8:	e01b      	b.n	8001de2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001daa:	f7fe fe01 	bl	80009b0 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b19      	cmp	r3, #25
 8001db6:	d914      	bls.n	8001de2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbc:	f043 0220 	orr.w	r2, r3, #32
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2220      	movs	r2, #32
 8001dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	f003 0320 	and.w	r3, r3, #32
 8001dec:	2b20      	cmp	r3, #32
 8001dee:	d1dc      	bne.n	8001daa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	f003 0320 	and.w	r3, r3, #32
 8001dfa:	2b20      	cmp	r3, #32
 8001dfc:	d003      	beq.n	8001e06 <I2C_IsErrorOccurred+0xfa>
 8001dfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d09d      	beq.n	8001d42 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001e06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d103      	bne.n	8001e16 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2220      	movs	r2, #32
 8001e14:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001e16:	6a3b      	ldr	r3, [r7, #32]
 8001e18:	f043 0304 	orr.w	r3, r3, #4
 8001e1c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00b      	beq.n	8001e4e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001e36:	6a3b      	ldr	r3, [r7, #32]
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e46:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00b      	beq.n	8001e70 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001e58:	6a3b      	ldr	r3, [r7, #32]
 8001e5a:	f043 0308 	orr.w	r3, r3, #8
 8001e5e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e68:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00b      	beq.n	8001e92 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001e7a:	6a3b      	ldr	r3, [r7, #32]
 8001e7c:	f043 0302 	orr.w	r3, r3, #2
 8001e80:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e8a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001e92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d01c      	beq.n	8001ed4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f7ff fe56 	bl	8001b4c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6859      	ldr	r1, [r3, #4]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <I2C_IsErrorOccurred+0x1d4>)
 8001eac:	400b      	ands	r3, r1
 8001eae:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001eb4:	6a3b      	ldr	r3, [r7, #32]
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2220      	movs	r2, #32
 8001ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3728      	adds	r7, #40	; 0x28
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	fe00e800 	.word	0xfe00e800

08001ee4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b087      	sub	sp, #28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	607b      	str	r3, [r7, #4]
 8001eee:	460b      	mov	r3, r1
 8001ef0:	817b      	strh	r3, [r7, #10]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ef6:	897b      	ldrh	r3, [r7, #10]
 8001ef8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001efc:	7a7b      	ldrb	r3, [r7, #9]
 8001efe:	041b      	lsls	r3, r3, #16
 8001f00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f04:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f0a:	6a3b      	ldr	r3, [r7, #32]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f12:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	6a3b      	ldr	r3, [r7, #32]
 8001f1c:	0d5b      	lsrs	r3, r3, #21
 8001f1e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001f22:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <I2C_TransferConfig+0x60>)
 8001f24:	430b      	orrs	r3, r1
 8001f26:	43db      	mvns	r3, r3
 8001f28:	ea02 0103 	and.w	r1, r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001f36:	bf00      	nop
 8001f38:	371c      	adds	r7, #28
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	03ff63ff 	.word	0x03ff63ff

08001f48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b20      	cmp	r3, #32
 8001f5c:	d138      	bne.n	8001fd0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d101      	bne.n	8001f6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f68:	2302      	movs	r3, #2
 8001f6a:	e032      	b.n	8001fd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2224      	movs	r2, #36	; 0x24
 8001f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 0201 	bic.w	r2, r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6819      	ldr	r1, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f042 0201 	orr.w	r2, r2, #1
 8001fba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2220      	movs	r2, #32
 8001fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	e000      	b.n	8001fd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001fd0:	2302      	movs	r3, #2
  }
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b085      	sub	sp, #20
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
 8001fe6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b20      	cmp	r3, #32
 8001ff2:	d139      	bne.n	8002068 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d101      	bne.n	8002002 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ffe:	2302      	movs	r3, #2
 8002000:	e033      	b.n	800206a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2224      	movs	r2, #36	; 0x24
 800200e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 0201 	bic.w	r2, r2, #1
 8002020:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002030:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	021b      	lsls	r3, r3, #8
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	4313      	orrs	r3, r2
 800203a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f042 0201 	orr.w	r2, r2, #1
 8002052:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2220      	movs	r2, #32
 8002058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002064:	2300      	movs	r3, #0
 8002066:	e000      	b.n	800206a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002068:	2302      	movs	r3, #2
  }
}
 800206a:	4618      	mov	r0, r3
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
	...

08002078 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d141      	bne.n	800210a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002086:	4b4b      	ldr	r3, [pc, #300]	; (80021b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800208e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002092:	d131      	bne.n	80020f8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002094:	4b47      	ldr	r3, [pc, #284]	; (80021b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002096:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800209a:	4a46      	ldr	r2, [pc, #280]	; (80021b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800209c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020a4:	4b43      	ldr	r3, [pc, #268]	; (80021b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020ac:	4a41      	ldr	r2, [pc, #260]	; (80021b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020b4:	4b40      	ldr	r3, [pc, #256]	; (80021b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2232      	movs	r2, #50	; 0x32
 80020ba:	fb02 f303 	mul.w	r3, r2, r3
 80020be:	4a3f      	ldr	r2, [pc, #252]	; (80021bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80020c0:	fba2 2303 	umull	r2, r3, r2, r3
 80020c4:	0c9b      	lsrs	r3, r3, #18
 80020c6:	3301      	adds	r3, #1
 80020c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020ca:	e002      	b.n	80020d2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	3b01      	subs	r3, #1
 80020d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020d2:	4b38      	ldr	r3, [pc, #224]	; (80021b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020de:	d102      	bne.n	80020e6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f2      	bne.n	80020cc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020e6:	4b33      	ldr	r3, [pc, #204]	; (80021b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020f2:	d158      	bne.n	80021a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e057      	b.n	80021a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020f8:	4b2e      	ldr	r3, [pc, #184]	; (80021b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020fe:	4a2d      	ldr	r2, [pc, #180]	; (80021b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002100:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002104:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002108:	e04d      	b.n	80021a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002110:	d141      	bne.n	8002196 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002112:	4b28      	ldr	r3, [pc, #160]	; (80021b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800211a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800211e:	d131      	bne.n	8002184 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002120:	4b24      	ldr	r3, [pc, #144]	; (80021b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002122:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002126:	4a23      	ldr	r2, [pc, #140]	; (80021b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800212c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002130:	4b20      	ldr	r3, [pc, #128]	; (80021b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002138:	4a1e      	ldr	r2, [pc, #120]	; (80021b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800213a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800213e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002140:	4b1d      	ldr	r3, [pc, #116]	; (80021b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2232      	movs	r2, #50	; 0x32
 8002146:	fb02 f303 	mul.w	r3, r2, r3
 800214a:	4a1c      	ldr	r2, [pc, #112]	; (80021bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800214c:	fba2 2303 	umull	r2, r3, r2, r3
 8002150:	0c9b      	lsrs	r3, r3, #18
 8002152:	3301      	adds	r3, #1
 8002154:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002156:	e002      	b.n	800215e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	3b01      	subs	r3, #1
 800215c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800215e:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800216a:	d102      	bne.n	8002172 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f2      	bne.n	8002158 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002172:	4b10      	ldr	r3, [pc, #64]	; (80021b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800217a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800217e:	d112      	bne.n	80021a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e011      	b.n	80021a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002184:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002186:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800218a:	4a0a      	ldr	r2, [pc, #40]	; (80021b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800218c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002190:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002194:	e007      	b.n	80021a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002196:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800219e:	4a05      	ldr	r2, [pc, #20]	; (80021b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021a4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	40007000 	.word	0x40007000
 80021b8:	20000000 	.word	0x20000000
 80021bc:	431bde83 	.word	0x431bde83

080021c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b088      	sub	sp, #32
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e306      	b.n	80027e0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d075      	beq.n	80022ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021de:	4b97      	ldr	r3, [pc, #604]	; (800243c <HAL_RCC_OscConfig+0x27c>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 030c 	and.w	r3, r3, #12
 80021e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021e8:	4b94      	ldr	r3, [pc, #592]	; (800243c <HAL_RCC_OscConfig+0x27c>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	f003 0303 	and.w	r3, r3, #3
 80021f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	2b0c      	cmp	r3, #12
 80021f6:	d102      	bne.n	80021fe <HAL_RCC_OscConfig+0x3e>
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	2b03      	cmp	r3, #3
 80021fc:	d002      	beq.n	8002204 <HAL_RCC_OscConfig+0x44>
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	2b08      	cmp	r3, #8
 8002202:	d10b      	bne.n	800221c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002204:	4b8d      	ldr	r3, [pc, #564]	; (800243c <HAL_RCC_OscConfig+0x27c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d05b      	beq.n	80022c8 <HAL_RCC_OscConfig+0x108>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d157      	bne.n	80022c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e2e1      	b.n	80027e0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002224:	d106      	bne.n	8002234 <HAL_RCC_OscConfig+0x74>
 8002226:	4b85      	ldr	r3, [pc, #532]	; (800243c <HAL_RCC_OscConfig+0x27c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a84      	ldr	r2, [pc, #528]	; (800243c <HAL_RCC_OscConfig+0x27c>)
 800222c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	e01d      	b.n	8002270 <HAL_RCC_OscConfig+0xb0>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800223c:	d10c      	bne.n	8002258 <HAL_RCC_OscConfig+0x98>
 800223e:	4b7f      	ldr	r3, [pc, #508]	; (800243c <HAL_RCC_OscConfig+0x27c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a7e      	ldr	r2, [pc, #504]	; (800243c <HAL_RCC_OscConfig+0x27c>)
 8002244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	4b7c      	ldr	r3, [pc, #496]	; (800243c <HAL_RCC_OscConfig+0x27c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a7b      	ldr	r2, [pc, #492]	; (800243c <HAL_RCC_OscConfig+0x27c>)
 8002250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	e00b      	b.n	8002270 <HAL_RCC_OscConfig+0xb0>
 8002258:	4b78      	ldr	r3, [pc, #480]	; (800243c <HAL_RCC_OscConfig+0x27c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a77      	ldr	r2, [pc, #476]	; (800243c <HAL_RCC_OscConfig+0x27c>)
 800225e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002262:	6013      	str	r3, [r2, #0]
 8002264:	4b75      	ldr	r3, [pc, #468]	; (800243c <HAL_RCC_OscConfig+0x27c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a74      	ldr	r2, [pc, #464]	; (800243c <HAL_RCC_OscConfig+0x27c>)
 800226a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800226e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d013      	beq.n	80022a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002278:	f7fe fb9a 	bl	80009b0 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002280:	f7fe fb96 	bl	80009b0 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b64      	cmp	r3, #100	; 0x64
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e2a6      	b.n	80027e0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002292:	4b6a      	ldr	r3, [pc, #424]	; (800243c <HAL_RCC_OscConfig+0x27c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0f0      	beq.n	8002280 <HAL_RCC_OscConfig+0xc0>
 800229e:	e014      	b.n	80022ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a0:	f7fe fb86 	bl	80009b0 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a8:	f7fe fb82 	bl	80009b0 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b64      	cmp	r3, #100	; 0x64
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e292      	b.n	80027e0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022ba:	4b60      	ldr	r3, [pc, #384]	; (800243c <HAL_RCC_OscConfig+0x27c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f0      	bne.n	80022a8 <HAL_RCC_OscConfig+0xe8>
 80022c6:	e000      	b.n	80022ca <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d075      	beq.n	80023c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022d6:	4b59      	ldr	r3, [pc, #356]	; (800243c <HAL_RCC_OscConfig+0x27c>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 030c 	and.w	r3, r3, #12
 80022de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022e0:	4b56      	ldr	r3, [pc, #344]	; (800243c <HAL_RCC_OscConfig+0x27c>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	f003 0303 	and.w	r3, r3, #3
 80022e8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	2b0c      	cmp	r3, #12
 80022ee:	d102      	bne.n	80022f6 <HAL_RCC_OscConfig+0x136>
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d002      	beq.n	80022fc <HAL_RCC_OscConfig+0x13c>
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	2b04      	cmp	r3, #4
 80022fa:	d11f      	bne.n	800233c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022fc:	4b4f      	ldr	r3, [pc, #316]	; (800243c <HAL_RCC_OscConfig+0x27c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002304:	2b00      	cmp	r3, #0
 8002306:	d005      	beq.n	8002314 <HAL_RCC_OscConfig+0x154>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e265      	b.n	80027e0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002314:	4b49      	ldr	r3, [pc, #292]	; (800243c <HAL_RCC_OscConfig+0x27c>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	061b      	lsls	r3, r3, #24
 8002322:	4946      	ldr	r1, [pc, #280]	; (800243c <HAL_RCC_OscConfig+0x27c>)
 8002324:	4313      	orrs	r3, r2
 8002326:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002328:	4b45      	ldr	r3, [pc, #276]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f7fe faf3 	bl	8000918 <HAL_InitTick>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d043      	beq.n	80023c0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e251      	b.n	80027e0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d023      	beq.n	800238c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002344:	4b3d      	ldr	r3, [pc, #244]	; (800243c <HAL_RCC_OscConfig+0x27c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a3c      	ldr	r2, [pc, #240]	; (800243c <HAL_RCC_OscConfig+0x27c>)
 800234a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800234e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002350:	f7fe fb2e 	bl	80009b0 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002358:	f7fe fb2a 	bl	80009b0 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e23a      	b.n	80027e0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800236a:	4b34      	ldr	r3, [pc, #208]	; (800243c <HAL_RCC_OscConfig+0x27c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f0      	beq.n	8002358 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002376:	4b31      	ldr	r3, [pc, #196]	; (800243c <HAL_RCC_OscConfig+0x27c>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	061b      	lsls	r3, r3, #24
 8002384:	492d      	ldr	r1, [pc, #180]	; (800243c <HAL_RCC_OscConfig+0x27c>)
 8002386:	4313      	orrs	r3, r2
 8002388:	604b      	str	r3, [r1, #4]
 800238a:	e01a      	b.n	80023c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800238c:	4b2b      	ldr	r3, [pc, #172]	; (800243c <HAL_RCC_OscConfig+0x27c>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a2a      	ldr	r2, [pc, #168]	; (800243c <HAL_RCC_OscConfig+0x27c>)
 8002392:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002398:	f7fe fb0a 	bl	80009b0 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a0:	f7fe fb06 	bl	80009b0 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e216      	b.n	80027e0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023b2:	4b22      	ldr	r3, [pc, #136]	; (800243c <HAL_RCC_OscConfig+0x27c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1f0      	bne.n	80023a0 <HAL_RCC_OscConfig+0x1e0>
 80023be:	e000      	b.n	80023c2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d041      	beq.n	8002452 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d01c      	beq.n	8002410 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023d6:	4b19      	ldr	r3, [pc, #100]	; (800243c <HAL_RCC_OscConfig+0x27c>)
 80023d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023dc:	4a17      	ldr	r2, [pc, #92]	; (800243c <HAL_RCC_OscConfig+0x27c>)
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e6:	f7fe fae3 	bl	80009b0 <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ee:	f7fe fadf 	bl	80009b0 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e1ef      	b.n	80027e0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002400:	4b0e      	ldr	r3, [pc, #56]	; (800243c <HAL_RCC_OscConfig+0x27c>)
 8002402:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0ef      	beq.n	80023ee <HAL_RCC_OscConfig+0x22e>
 800240e:	e020      	b.n	8002452 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002410:	4b0a      	ldr	r3, [pc, #40]	; (800243c <HAL_RCC_OscConfig+0x27c>)
 8002412:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002416:	4a09      	ldr	r2, [pc, #36]	; (800243c <HAL_RCC_OscConfig+0x27c>)
 8002418:	f023 0301 	bic.w	r3, r3, #1
 800241c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002420:	f7fe fac6 	bl	80009b0 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002426:	e00d      	b.n	8002444 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002428:	f7fe fac2 	bl	80009b0 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d906      	bls.n	8002444 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e1d2      	b.n	80027e0 <HAL_RCC_OscConfig+0x620>
 800243a:	bf00      	nop
 800243c:	40021000 	.word	0x40021000
 8002440:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002444:	4b8c      	ldr	r3, [pc, #560]	; (8002678 <HAL_RCC_OscConfig+0x4b8>)
 8002446:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1ea      	bne.n	8002428 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0304 	and.w	r3, r3, #4
 800245a:	2b00      	cmp	r3, #0
 800245c:	f000 80a6 	beq.w	80025ac <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002460:	2300      	movs	r3, #0
 8002462:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002464:	4b84      	ldr	r3, [pc, #528]	; (8002678 <HAL_RCC_OscConfig+0x4b8>)
 8002466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <HAL_RCC_OscConfig+0x2b4>
 8002470:	2301      	movs	r3, #1
 8002472:	e000      	b.n	8002476 <HAL_RCC_OscConfig+0x2b6>
 8002474:	2300      	movs	r3, #0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00d      	beq.n	8002496 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800247a:	4b7f      	ldr	r3, [pc, #508]	; (8002678 <HAL_RCC_OscConfig+0x4b8>)
 800247c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800247e:	4a7e      	ldr	r2, [pc, #504]	; (8002678 <HAL_RCC_OscConfig+0x4b8>)
 8002480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002484:	6593      	str	r3, [r2, #88]	; 0x58
 8002486:	4b7c      	ldr	r3, [pc, #496]	; (8002678 <HAL_RCC_OscConfig+0x4b8>)
 8002488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002492:	2301      	movs	r3, #1
 8002494:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002496:	4b79      	ldr	r3, [pc, #484]	; (800267c <HAL_RCC_OscConfig+0x4bc>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d118      	bne.n	80024d4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024a2:	4b76      	ldr	r3, [pc, #472]	; (800267c <HAL_RCC_OscConfig+0x4bc>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a75      	ldr	r2, [pc, #468]	; (800267c <HAL_RCC_OscConfig+0x4bc>)
 80024a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ae:	f7fe fa7f 	bl	80009b0 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024b6:	f7fe fa7b 	bl	80009b0 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e18b      	b.n	80027e0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c8:	4b6c      	ldr	r3, [pc, #432]	; (800267c <HAL_RCC_OscConfig+0x4bc>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d108      	bne.n	80024ee <HAL_RCC_OscConfig+0x32e>
 80024dc:	4b66      	ldr	r3, [pc, #408]	; (8002678 <HAL_RCC_OscConfig+0x4b8>)
 80024de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e2:	4a65      	ldr	r2, [pc, #404]	; (8002678 <HAL_RCC_OscConfig+0x4b8>)
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024ec:	e024      	b.n	8002538 <HAL_RCC_OscConfig+0x378>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	2b05      	cmp	r3, #5
 80024f4:	d110      	bne.n	8002518 <HAL_RCC_OscConfig+0x358>
 80024f6:	4b60      	ldr	r3, [pc, #384]	; (8002678 <HAL_RCC_OscConfig+0x4b8>)
 80024f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fc:	4a5e      	ldr	r2, [pc, #376]	; (8002678 <HAL_RCC_OscConfig+0x4b8>)
 80024fe:	f043 0304 	orr.w	r3, r3, #4
 8002502:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002506:	4b5c      	ldr	r3, [pc, #368]	; (8002678 <HAL_RCC_OscConfig+0x4b8>)
 8002508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250c:	4a5a      	ldr	r2, [pc, #360]	; (8002678 <HAL_RCC_OscConfig+0x4b8>)
 800250e:	f043 0301 	orr.w	r3, r3, #1
 8002512:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002516:	e00f      	b.n	8002538 <HAL_RCC_OscConfig+0x378>
 8002518:	4b57      	ldr	r3, [pc, #348]	; (8002678 <HAL_RCC_OscConfig+0x4b8>)
 800251a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251e:	4a56      	ldr	r2, [pc, #344]	; (8002678 <HAL_RCC_OscConfig+0x4b8>)
 8002520:	f023 0301 	bic.w	r3, r3, #1
 8002524:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002528:	4b53      	ldr	r3, [pc, #332]	; (8002678 <HAL_RCC_OscConfig+0x4b8>)
 800252a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252e:	4a52      	ldr	r2, [pc, #328]	; (8002678 <HAL_RCC_OscConfig+0x4b8>)
 8002530:	f023 0304 	bic.w	r3, r3, #4
 8002534:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d016      	beq.n	800256e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002540:	f7fe fa36 	bl	80009b0 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002546:	e00a      	b.n	800255e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002548:	f7fe fa32 	bl	80009b0 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	f241 3288 	movw	r2, #5000	; 0x1388
 8002556:	4293      	cmp	r3, r2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e140      	b.n	80027e0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800255e:	4b46      	ldr	r3, [pc, #280]	; (8002678 <HAL_RCC_OscConfig+0x4b8>)
 8002560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0ed      	beq.n	8002548 <HAL_RCC_OscConfig+0x388>
 800256c:	e015      	b.n	800259a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800256e:	f7fe fa1f 	bl	80009b0 <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002574:	e00a      	b.n	800258c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002576:	f7fe fa1b 	bl	80009b0 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	f241 3288 	movw	r2, #5000	; 0x1388
 8002584:	4293      	cmp	r3, r2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e129      	b.n	80027e0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800258c:	4b3a      	ldr	r3, [pc, #232]	; (8002678 <HAL_RCC_OscConfig+0x4b8>)
 800258e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1ed      	bne.n	8002576 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800259a:	7ffb      	ldrb	r3, [r7, #31]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d105      	bne.n	80025ac <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a0:	4b35      	ldr	r3, [pc, #212]	; (8002678 <HAL_RCC_OscConfig+0x4b8>)
 80025a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a4:	4a34      	ldr	r2, [pc, #208]	; (8002678 <HAL_RCC_OscConfig+0x4b8>)
 80025a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025aa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0320 	and.w	r3, r3, #32
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d03c      	beq.n	8002632 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d01c      	beq.n	80025fa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025c0:	4b2d      	ldr	r3, [pc, #180]	; (8002678 <HAL_RCC_OscConfig+0x4b8>)
 80025c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025c6:	4a2c      	ldr	r2, [pc, #176]	; (8002678 <HAL_RCC_OscConfig+0x4b8>)
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d0:	f7fe f9ee 	bl	80009b0 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025d8:	f7fe f9ea 	bl	80009b0 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e0fa      	b.n	80027e0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025ea:	4b23      	ldr	r3, [pc, #140]	; (8002678 <HAL_RCC_OscConfig+0x4b8>)
 80025ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0ef      	beq.n	80025d8 <HAL_RCC_OscConfig+0x418>
 80025f8:	e01b      	b.n	8002632 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025fa:	4b1f      	ldr	r3, [pc, #124]	; (8002678 <HAL_RCC_OscConfig+0x4b8>)
 80025fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002600:	4a1d      	ldr	r2, [pc, #116]	; (8002678 <HAL_RCC_OscConfig+0x4b8>)
 8002602:	f023 0301 	bic.w	r3, r3, #1
 8002606:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260a:	f7fe f9d1 	bl	80009b0 <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002612:	f7fe f9cd 	bl	80009b0 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e0dd      	b.n	80027e0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002624:	4b14      	ldr	r3, [pc, #80]	; (8002678 <HAL_RCC_OscConfig+0x4b8>)
 8002626:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1ef      	bne.n	8002612 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 80d1 	beq.w	80027de <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800263c:	4b0e      	ldr	r3, [pc, #56]	; (8002678 <HAL_RCC_OscConfig+0x4b8>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 030c 	and.w	r3, r3, #12
 8002644:	2b0c      	cmp	r3, #12
 8002646:	f000 808b 	beq.w	8002760 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	2b02      	cmp	r3, #2
 8002650:	d15e      	bne.n	8002710 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002652:	4b09      	ldr	r3, [pc, #36]	; (8002678 <HAL_RCC_OscConfig+0x4b8>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a08      	ldr	r2, [pc, #32]	; (8002678 <HAL_RCC_OscConfig+0x4b8>)
 8002658:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800265c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265e:	f7fe f9a7 	bl	80009b0 <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002664:	e00c      	b.n	8002680 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002666:	f7fe f9a3 	bl	80009b0 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d905      	bls.n	8002680 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e0b3      	b.n	80027e0 <HAL_RCC_OscConfig+0x620>
 8002678:	40021000 	.word	0x40021000
 800267c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002680:	4b59      	ldr	r3, [pc, #356]	; (80027e8 <HAL_RCC_OscConfig+0x628>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1ec      	bne.n	8002666 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800268c:	4b56      	ldr	r3, [pc, #344]	; (80027e8 <HAL_RCC_OscConfig+0x628>)
 800268e:	68da      	ldr	r2, [r3, #12]
 8002690:	4b56      	ldr	r3, [pc, #344]	; (80027ec <HAL_RCC_OscConfig+0x62c>)
 8002692:	4013      	ands	r3, r2
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6a11      	ldr	r1, [r2, #32]
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800269c:	3a01      	subs	r2, #1
 800269e:	0112      	lsls	r2, r2, #4
 80026a0:	4311      	orrs	r1, r2
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80026a6:	0212      	lsls	r2, r2, #8
 80026a8:	4311      	orrs	r1, r2
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80026ae:	0852      	lsrs	r2, r2, #1
 80026b0:	3a01      	subs	r2, #1
 80026b2:	0552      	lsls	r2, r2, #21
 80026b4:	4311      	orrs	r1, r2
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026ba:	0852      	lsrs	r2, r2, #1
 80026bc:	3a01      	subs	r2, #1
 80026be:	0652      	lsls	r2, r2, #25
 80026c0:	4311      	orrs	r1, r2
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80026c6:	06d2      	lsls	r2, r2, #27
 80026c8:	430a      	orrs	r2, r1
 80026ca:	4947      	ldr	r1, [pc, #284]	; (80027e8 <HAL_RCC_OscConfig+0x628>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026d0:	4b45      	ldr	r3, [pc, #276]	; (80027e8 <HAL_RCC_OscConfig+0x628>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a44      	ldr	r2, [pc, #272]	; (80027e8 <HAL_RCC_OscConfig+0x628>)
 80026d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026da:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026dc:	4b42      	ldr	r3, [pc, #264]	; (80027e8 <HAL_RCC_OscConfig+0x628>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	4a41      	ldr	r2, [pc, #260]	; (80027e8 <HAL_RCC_OscConfig+0x628>)
 80026e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026e6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e8:	f7fe f962 	bl	80009b0 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f0:	f7fe f95e 	bl	80009b0 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e06e      	b.n	80027e0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002702:	4b39      	ldr	r3, [pc, #228]	; (80027e8 <HAL_RCC_OscConfig+0x628>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0f0      	beq.n	80026f0 <HAL_RCC_OscConfig+0x530>
 800270e:	e066      	b.n	80027de <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002710:	4b35      	ldr	r3, [pc, #212]	; (80027e8 <HAL_RCC_OscConfig+0x628>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a34      	ldr	r2, [pc, #208]	; (80027e8 <HAL_RCC_OscConfig+0x628>)
 8002716:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800271a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800271c:	4b32      	ldr	r3, [pc, #200]	; (80027e8 <HAL_RCC_OscConfig+0x628>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	4a31      	ldr	r2, [pc, #196]	; (80027e8 <HAL_RCC_OscConfig+0x628>)
 8002722:	f023 0303 	bic.w	r3, r3, #3
 8002726:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002728:	4b2f      	ldr	r3, [pc, #188]	; (80027e8 <HAL_RCC_OscConfig+0x628>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	4a2e      	ldr	r2, [pc, #184]	; (80027e8 <HAL_RCC_OscConfig+0x628>)
 800272e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002736:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002738:	f7fe f93a 	bl	80009b0 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002740:	f7fe f936 	bl	80009b0 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e046      	b.n	80027e0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002752:	4b25      	ldr	r3, [pc, #148]	; (80027e8 <HAL_RCC_OscConfig+0x628>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f0      	bne.n	8002740 <HAL_RCC_OscConfig+0x580>
 800275e:	e03e      	b.n	80027de <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	69db      	ldr	r3, [r3, #28]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d101      	bne.n	800276c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e039      	b.n	80027e0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800276c:	4b1e      	ldr	r3, [pc, #120]	; (80027e8 <HAL_RCC_OscConfig+0x628>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f003 0203 	and.w	r2, r3, #3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	429a      	cmp	r2, r3
 800277e:	d12c      	bne.n	80027da <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	3b01      	subs	r3, #1
 800278c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800278e:	429a      	cmp	r2, r3
 8002790:	d123      	bne.n	80027da <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800279e:	429a      	cmp	r2, r3
 80027a0:	d11b      	bne.n	80027da <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d113      	bne.n	80027da <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027bc:	085b      	lsrs	r3, r3, #1
 80027be:	3b01      	subs	r3, #1
 80027c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d109      	bne.n	80027da <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d0:	085b      	lsrs	r3, r3, #1
 80027d2:	3b01      	subs	r3, #1
 80027d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d001      	beq.n	80027de <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3720      	adds	r7, #32
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40021000 	.word	0x40021000
 80027ec:	019f800c 	.word	0x019f800c

080027f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e11e      	b.n	8002a46 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002808:	4b91      	ldr	r3, [pc, #580]	; (8002a50 <HAL_RCC_ClockConfig+0x260>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 030f 	and.w	r3, r3, #15
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	429a      	cmp	r2, r3
 8002814:	d910      	bls.n	8002838 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002816:	4b8e      	ldr	r3, [pc, #568]	; (8002a50 <HAL_RCC_ClockConfig+0x260>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f023 020f 	bic.w	r2, r3, #15
 800281e:	498c      	ldr	r1, [pc, #560]	; (8002a50 <HAL_RCC_ClockConfig+0x260>)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	4313      	orrs	r3, r2
 8002824:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002826:	4b8a      	ldr	r3, [pc, #552]	; (8002a50 <HAL_RCC_ClockConfig+0x260>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	429a      	cmp	r2, r3
 8002832:	d001      	beq.n	8002838 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e106      	b.n	8002a46 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b00      	cmp	r3, #0
 8002842:	d073      	beq.n	800292c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b03      	cmp	r3, #3
 800284a:	d129      	bne.n	80028a0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800284c:	4b81      	ldr	r3, [pc, #516]	; (8002a54 <HAL_RCC_ClockConfig+0x264>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e0f4      	b.n	8002a46 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800285c:	f000 f966 	bl	8002b2c <RCC_GetSysClockFreqFromPLLSource>
 8002860:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	4a7c      	ldr	r2, [pc, #496]	; (8002a58 <HAL_RCC_ClockConfig+0x268>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d93f      	bls.n	80028ea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800286a:	4b7a      	ldr	r3, [pc, #488]	; (8002a54 <HAL_RCC_ClockConfig+0x264>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d009      	beq.n	800288a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800287e:	2b00      	cmp	r3, #0
 8002880:	d033      	beq.n	80028ea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002886:	2b00      	cmp	r3, #0
 8002888:	d12f      	bne.n	80028ea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800288a:	4b72      	ldr	r3, [pc, #456]	; (8002a54 <HAL_RCC_ClockConfig+0x264>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002892:	4a70      	ldr	r2, [pc, #448]	; (8002a54 <HAL_RCC_ClockConfig+0x264>)
 8002894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002898:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800289a:	2380      	movs	r3, #128	; 0x80
 800289c:	617b      	str	r3, [r7, #20]
 800289e:	e024      	b.n	80028ea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d107      	bne.n	80028b8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028a8:	4b6a      	ldr	r3, [pc, #424]	; (8002a54 <HAL_RCC_ClockConfig+0x264>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d109      	bne.n	80028c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e0c6      	b.n	8002a46 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028b8:	4b66      	ldr	r3, [pc, #408]	; (8002a54 <HAL_RCC_ClockConfig+0x264>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e0be      	b.n	8002a46 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80028c8:	f000 f8ce 	bl	8002a68 <HAL_RCC_GetSysClockFreq>
 80028cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	4a61      	ldr	r2, [pc, #388]	; (8002a58 <HAL_RCC_ClockConfig+0x268>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d909      	bls.n	80028ea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80028d6:	4b5f      	ldr	r3, [pc, #380]	; (8002a54 <HAL_RCC_ClockConfig+0x264>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028de:	4a5d      	ldr	r2, [pc, #372]	; (8002a54 <HAL_RCC_ClockConfig+0x264>)
 80028e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028e4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80028e6:	2380      	movs	r3, #128	; 0x80
 80028e8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028ea:	4b5a      	ldr	r3, [pc, #360]	; (8002a54 <HAL_RCC_ClockConfig+0x264>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f023 0203 	bic.w	r2, r3, #3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	4957      	ldr	r1, [pc, #348]	; (8002a54 <HAL_RCC_ClockConfig+0x264>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028fc:	f7fe f858 	bl	80009b0 <HAL_GetTick>
 8002900:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002902:	e00a      	b.n	800291a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002904:	f7fe f854 	bl	80009b0 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002912:	4293      	cmp	r3, r2
 8002914:	d901      	bls.n	800291a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e095      	b.n	8002a46 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291a:	4b4e      	ldr	r3, [pc, #312]	; (8002a54 <HAL_RCC_ClockConfig+0x264>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 020c 	and.w	r2, r3, #12
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	429a      	cmp	r2, r3
 800292a:	d1eb      	bne.n	8002904 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d023      	beq.n	8002980 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	d005      	beq.n	8002950 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002944:	4b43      	ldr	r3, [pc, #268]	; (8002a54 <HAL_RCC_ClockConfig+0x264>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	4a42      	ldr	r2, [pc, #264]	; (8002a54 <HAL_RCC_ClockConfig+0x264>)
 800294a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800294e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0308 	and.w	r3, r3, #8
 8002958:	2b00      	cmp	r3, #0
 800295a:	d007      	beq.n	800296c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800295c:	4b3d      	ldr	r3, [pc, #244]	; (8002a54 <HAL_RCC_ClockConfig+0x264>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002964:	4a3b      	ldr	r2, [pc, #236]	; (8002a54 <HAL_RCC_ClockConfig+0x264>)
 8002966:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800296a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800296c:	4b39      	ldr	r3, [pc, #228]	; (8002a54 <HAL_RCC_ClockConfig+0x264>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	4936      	ldr	r1, [pc, #216]	; (8002a54 <HAL_RCC_ClockConfig+0x264>)
 800297a:	4313      	orrs	r3, r2
 800297c:	608b      	str	r3, [r1, #8]
 800297e:	e008      	b.n	8002992 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	2b80      	cmp	r3, #128	; 0x80
 8002984:	d105      	bne.n	8002992 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002986:	4b33      	ldr	r3, [pc, #204]	; (8002a54 <HAL_RCC_ClockConfig+0x264>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	4a32      	ldr	r2, [pc, #200]	; (8002a54 <HAL_RCC_ClockConfig+0x264>)
 800298c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002990:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002992:	4b2f      	ldr	r3, [pc, #188]	; (8002a50 <HAL_RCC_ClockConfig+0x260>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	429a      	cmp	r2, r3
 800299e:	d21d      	bcs.n	80029dc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a0:	4b2b      	ldr	r3, [pc, #172]	; (8002a50 <HAL_RCC_ClockConfig+0x260>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f023 020f 	bic.w	r2, r3, #15
 80029a8:	4929      	ldr	r1, [pc, #164]	; (8002a50 <HAL_RCC_ClockConfig+0x260>)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80029b0:	f7fd fffe 	bl	80009b0 <HAL_GetTick>
 80029b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b6:	e00a      	b.n	80029ce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b8:	f7fd fffa 	bl	80009b0 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e03b      	b.n	8002a46 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ce:	4b20      	ldr	r3, [pc, #128]	; (8002a50 <HAL_RCC_ClockConfig+0x260>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 030f 	and.w	r3, r3, #15
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d1ed      	bne.n	80029b8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d008      	beq.n	80029fa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029e8:	4b1a      	ldr	r3, [pc, #104]	; (8002a54 <HAL_RCC_ClockConfig+0x264>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	4917      	ldr	r1, [pc, #92]	; (8002a54 <HAL_RCC_ClockConfig+0x264>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0308 	and.w	r3, r3, #8
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d009      	beq.n	8002a1a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a06:	4b13      	ldr	r3, [pc, #76]	; (8002a54 <HAL_RCC_ClockConfig+0x264>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	490f      	ldr	r1, [pc, #60]	; (8002a54 <HAL_RCC_ClockConfig+0x264>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a1a:	f000 f825 	bl	8002a68 <HAL_RCC_GetSysClockFreq>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	4b0c      	ldr	r3, [pc, #48]	; (8002a54 <HAL_RCC_ClockConfig+0x264>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	091b      	lsrs	r3, r3, #4
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	490c      	ldr	r1, [pc, #48]	; (8002a5c <HAL_RCC_ClockConfig+0x26c>)
 8002a2c:	5ccb      	ldrb	r3, [r1, r3]
 8002a2e:	f003 031f 	and.w	r3, r3, #31
 8002a32:	fa22 f303 	lsr.w	r3, r2, r3
 8002a36:	4a0a      	ldr	r2, [pc, #40]	; (8002a60 <HAL_RCC_ClockConfig+0x270>)
 8002a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002a3a:	4b0a      	ldr	r3, [pc, #40]	; (8002a64 <HAL_RCC_ClockConfig+0x274>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7fd ff6a 	bl	8000918 <HAL_InitTick>
 8002a44:	4603      	mov	r3, r0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40022000 	.word	0x40022000
 8002a54:	40021000 	.word	0x40021000
 8002a58:	04c4b400 	.word	0x04c4b400
 8002a5c:	08003008 	.word	0x08003008
 8002a60:	20000000 	.word	0x20000000
 8002a64:	20000004 	.word	0x20000004

08002a68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b087      	sub	sp, #28
 8002a6c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002a6e:	4b2c      	ldr	r3, [pc, #176]	; (8002b20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 030c 	and.w	r3, r3, #12
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d102      	bne.n	8002a80 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a7a:	4b2a      	ldr	r3, [pc, #168]	; (8002b24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a7c:	613b      	str	r3, [r7, #16]
 8002a7e:	e047      	b.n	8002b10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002a80:	4b27      	ldr	r3, [pc, #156]	; (8002b20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 030c 	and.w	r3, r3, #12
 8002a88:	2b08      	cmp	r3, #8
 8002a8a:	d102      	bne.n	8002a92 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a8c:	4b26      	ldr	r3, [pc, #152]	; (8002b28 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	e03e      	b.n	8002b10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002a92:	4b23      	ldr	r3, [pc, #140]	; (8002b20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 030c 	and.w	r3, r3, #12
 8002a9a:	2b0c      	cmp	r3, #12
 8002a9c:	d136      	bne.n	8002b0c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a9e:	4b20      	ldr	r3, [pc, #128]	; (8002b20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	f003 0303 	and.w	r3, r3, #3
 8002aa6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002aa8:	4b1d      	ldr	r3, [pc, #116]	; (8002b20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	091b      	lsrs	r3, r3, #4
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2b03      	cmp	r3, #3
 8002aba:	d10c      	bne.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002abc:	4a1a      	ldr	r2, [pc, #104]	; (8002b28 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac4:	4a16      	ldr	r2, [pc, #88]	; (8002b20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ac6:	68d2      	ldr	r2, [r2, #12]
 8002ac8:	0a12      	lsrs	r2, r2, #8
 8002aca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ace:	fb02 f303 	mul.w	r3, r2, r3
 8002ad2:	617b      	str	r3, [r7, #20]
      break;
 8002ad4:	e00c      	b.n	8002af0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ad6:	4a13      	ldr	r2, [pc, #76]	; (8002b24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ade:	4a10      	ldr	r2, [pc, #64]	; (8002b20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ae0:	68d2      	ldr	r2, [r2, #12]
 8002ae2:	0a12      	lsrs	r2, r2, #8
 8002ae4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ae8:	fb02 f303 	mul.w	r3, r2, r3
 8002aec:	617b      	str	r3, [r7, #20]
      break;
 8002aee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002af0:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	0e5b      	lsrs	r3, r3, #25
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	3301      	adds	r3, #1
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b08:	613b      	str	r3, [r7, #16]
 8002b0a:	e001      	b.n	8002b10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002b10:	693b      	ldr	r3, [r7, #16]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	371c      	adds	r7, #28
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	40021000 	.word	0x40021000
 8002b24:	00f42400 	.word	0x00f42400
 8002b28:	007a1200 	.word	0x007a1200

08002b2c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b087      	sub	sp, #28
 8002b30:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b32:	4b1e      	ldr	r3, [pc, #120]	; (8002bac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b3c:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	091b      	lsrs	r3, r3, #4
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	3301      	adds	r3, #1
 8002b48:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	2b03      	cmp	r3, #3
 8002b4e:	d10c      	bne.n	8002b6a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b50:	4a17      	ldr	r2, [pc, #92]	; (8002bb0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b58:	4a14      	ldr	r2, [pc, #80]	; (8002bac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b5a:	68d2      	ldr	r2, [r2, #12]
 8002b5c:	0a12      	lsrs	r2, r2, #8
 8002b5e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b62:	fb02 f303 	mul.w	r3, r2, r3
 8002b66:	617b      	str	r3, [r7, #20]
    break;
 8002b68:	e00c      	b.n	8002b84 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b6a:	4a12      	ldr	r2, [pc, #72]	; (8002bb4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b72:	4a0e      	ldr	r2, [pc, #56]	; (8002bac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b74:	68d2      	ldr	r2, [r2, #12]
 8002b76:	0a12      	lsrs	r2, r2, #8
 8002b78:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b7c:	fb02 f303 	mul.w	r3, r2, r3
 8002b80:	617b      	str	r3, [r7, #20]
    break;
 8002b82:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b84:	4b09      	ldr	r3, [pc, #36]	; (8002bac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	0e5b      	lsrs	r3, r3, #25
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	3301      	adds	r3, #1
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002b9e:	687b      	ldr	r3, [r7, #4]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	371c      	adds	r7, #28
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	007a1200 	.word	0x007a1200
 8002bb4:	00f42400 	.word	0x00f42400

08002bb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 8098 	beq.w	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bda:	4b43      	ldr	r3, [pc, #268]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10d      	bne.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002be6:	4b40      	ldr	r3, [pc, #256]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bea:	4a3f      	ldr	r2, [pc, #252]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf0:	6593      	str	r3, [r2, #88]	; 0x58
 8002bf2:	4b3d      	ldr	r3, [pc, #244]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfa:	60bb      	str	r3, [r7, #8]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c02:	4b3a      	ldr	r3, [pc, #232]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a39      	ldr	r2, [pc, #228]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c0e:	f7fd fecf 	bl	80009b0 <HAL_GetTick>
 8002c12:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c14:	e009      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c16:	f7fd fecb 	bl	80009b0 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d902      	bls.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	74fb      	strb	r3, [r7, #19]
        break;
 8002c28:	e005      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c2a:	4b30      	ldr	r3, [pc, #192]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0ef      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002c36:	7cfb      	ldrb	r3, [r7, #19]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d159      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c3c:	4b2a      	ldr	r3, [pc, #168]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c46:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d01e      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d019      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c58:	4b23      	ldr	r3, [pc, #140]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c64:	4b20      	ldr	r3, [pc, #128]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6a:	4a1f      	ldr	r2, [pc, #124]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c74:	4b1c      	ldr	r3, [pc, #112]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c7a:	4a1b      	ldr	r2, [pc, #108]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c84:	4a18      	ldr	r2, [pc, #96]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d016      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c96:	f7fd fe8b 	bl	80009b0 <HAL_GetTick>
 8002c9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c9c:	e00b      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c9e:	f7fd fe87 	bl	80009b0 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d902      	bls.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	74fb      	strb	r3, [r7, #19]
            break;
 8002cb4:	e006      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cb6:	4b0c      	ldr	r3, [pc, #48]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0ec      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002cc4:	7cfb      	ldrb	r3, [r7, #19]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10b      	bne.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cca:	4b07      	ldr	r3, [pc, #28]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	4903      	ldr	r1, [pc, #12]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ce2:	7cfb      	ldrb	r3, [r7, #19]
 8002ce4:	74bb      	strb	r3, [r7, #18]
 8002ce6:	e005      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cf0:	7cfb      	ldrb	r3, [r7, #19]
 8002cf2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cf4:	7c7b      	ldrb	r3, [r7, #17]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d105      	bne.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cfa:	4ba6      	ldr	r3, [pc, #664]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfe:	4aa5      	ldr	r2, [pc, #660]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d04:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00a      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d12:	4ba0      	ldr	r3, [pc, #640]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d18:	f023 0203 	bic.w	r2, r3, #3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	499c      	ldr	r1, [pc, #624]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00a      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d34:	4b97      	ldr	r3, [pc, #604]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3a:	f023 020c 	bic.w	r2, r3, #12
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	4994      	ldr	r1, [pc, #592]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00a      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d56:	4b8f      	ldr	r3, [pc, #572]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	498b      	ldr	r1, [pc, #556]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0308 	and.w	r3, r3, #8
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00a      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d78:	4b86      	ldr	r3, [pc, #536]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	4983      	ldr	r1, [pc, #524]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0320 	and.w	r3, r3, #32
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00a      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d9a:	4b7e      	ldr	r3, [pc, #504]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	497a      	ldr	r1, [pc, #488]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00a      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dbc:	4b75      	ldr	r3, [pc, #468]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	4972      	ldr	r1, [pc, #456]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00a      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002dde:	4b6d      	ldr	r3, [pc, #436]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	69db      	ldr	r3, [r3, #28]
 8002dec:	4969      	ldr	r1, [pc, #420]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00a      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e00:	4b64      	ldr	r3, [pc, #400]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e06:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	4961      	ldr	r1, [pc, #388]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00a      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e22:	4b5c      	ldr	r3, [pc, #368]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e28:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	4958      	ldr	r1, [pc, #352]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d015      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e44:	4b53      	ldr	r3, [pc, #332]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e52:	4950      	ldr	r1, [pc, #320]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e62:	d105      	bne.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e64:	4b4b      	ldr	r3, [pc, #300]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	4a4a      	ldr	r2, [pc, #296]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e6e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d015      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e7c:	4b45      	ldr	r3, [pc, #276]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8a:	4942      	ldr	r1, [pc, #264]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e9a:	d105      	bne.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e9c:	4b3d      	ldr	r3, [pc, #244]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	4a3c      	ldr	r2, [pc, #240]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ea2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ea6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d015      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002eb4:	4b37      	ldr	r3, [pc, #220]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	4934      	ldr	r1, [pc, #208]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ece:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ed2:	d105      	bne.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ed4:	4b2f      	ldr	r3, [pc, #188]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	4a2e      	ldr	r2, [pc, #184]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ede:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d015      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002eec:	4b29      	ldr	r3, [pc, #164]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002efa:	4926      	ldr	r1, [pc, #152]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f0a:	d105      	bne.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f0c:	4b21      	ldr	r3, [pc, #132]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	4a20      	ldr	r2, [pc, #128]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f16:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d015      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f24:	4b1b      	ldr	r3, [pc, #108]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f32:	4918      	ldr	r1, [pc, #96]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f42:	d105      	bne.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f44:	4b13      	ldr	r3, [pc, #76]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	4a12      	ldr	r2, [pc, #72]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f4e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d015      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f5c:	4b0d      	ldr	r3, [pc, #52]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f62:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6a:	490a      	ldr	r1, [pc, #40]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f7a:	d105      	bne.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002f7c:	4b05      	ldr	r3, [pc, #20]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	4a04      	ldr	r2, [pc, #16]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f86:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002f88:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3718      	adds	r7, #24
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40021000 	.word	0x40021000

08002f98 <__libc_init_array>:
 8002f98:	b570      	push	{r4, r5, r6, lr}
 8002f9a:	4d0d      	ldr	r5, [pc, #52]	; (8002fd0 <__libc_init_array+0x38>)
 8002f9c:	4c0d      	ldr	r4, [pc, #52]	; (8002fd4 <__libc_init_array+0x3c>)
 8002f9e:	1b64      	subs	r4, r4, r5
 8002fa0:	10a4      	asrs	r4, r4, #2
 8002fa2:	2600      	movs	r6, #0
 8002fa4:	42a6      	cmp	r6, r4
 8002fa6:	d109      	bne.n	8002fbc <__libc_init_array+0x24>
 8002fa8:	4d0b      	ldr	r5, [pc, #44]	; (8002fd8 <__libc_init_array+0x40>)
 8002faa:	4c0c      	ldr	r4, [pc, #48]	; (8002fdc <__libc_init_array+0x44>)
 8002fac:	f000 f820 	bl	8002ff0 <_init>
 8002fb0:	1b64      	subs	r4, r4, r5
 8002fb2:	10a4      	asrs	r4, r4, #2
 8002fb4:	2600      	movs	r6, #0
 8002fb6:	42a6      	cmp	r6, r4
 8002fb8:	d105      	bne.n	8002fc6 <__libc_init_array+0x2e>
 8002fba:	bd70      	pop	{r4, r5, r6, pc}
 8002fbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fc0:	4798      	blx	r3
 8002fc2:	3601      	adds	r6, #1
 8002fc4:	e7ee      	b.n	8002fa4 <__libc_init_array+0xc>
 8002fc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fca:	4798      	blx	r3
 8002fcc:	3601      	adds	r6, #1
 8002fce:	e7f2      	b.n	8002fb6 <__libc_init_array+0x1e>
 8002fd0:	08003028 	.word	0x08003028
 8002fd4:	08003028 	.word	0x08003028
 8002fd8:	08003028 	.word	0x08003028
 8002fdc:	0800302c 	.word	0x0800302c

08002fe0 <memset>:
 8002fe0:	4402      	add	r2, r0
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d100      	bne.n	8002fea <memset+0xa>
 8002fe8:	4770      	bx	lr
 8002fea:	f803 1b01 	strb.w	r1, [r3], #1
 8002fee:	e7f9      	b.n	8002fe4 <memset+0x4>

08002ff0 <_init>:
 8002ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ff2:	bf00      	nop
 8002ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ff6:	bc08      	pop	{r3}
 8002ff8:	469e      	mov	lr, r3
 8002ffa:	4770      	bx	lr

08002ffc <_fini>:
 8002ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ffe:	bf00      	nop
 8003000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003002:	bc08      	pop	{r3}
 8003004:	469e      	mov	lr, r3
 8003006:	4770      	bx	lr
