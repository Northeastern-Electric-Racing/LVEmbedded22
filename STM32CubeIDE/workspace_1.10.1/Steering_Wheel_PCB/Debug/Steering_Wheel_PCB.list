
Steering_Wheel_PCB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bb0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004d88  08004d88  00014d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004da8  08004da8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004da8  08004da8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004da8  08004da8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004da8  08004da8  00014da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004dac  08004dac  00014dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004db0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  2000000c  08004dbc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08004dbc  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011dcf  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002216  00000000  00000000  00031e0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  00034028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c8  00000000  00000000  000351e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f4e7  00000000  00000000  000362b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000115e4  00000000  00000000  00055797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d62ad  00000000  00000000  00066d7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013d028  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c88  00000000  00000000  0013d078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004d70 	.word	0x08004d70

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004d70 	.word	0x08004d70

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 fd88 	bl	8000d32 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f8c3 	bl	80003ac <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 faef 	bl	8000808 <MX_GPIO_Init>
  MX_DMA_Init();
 800022a:	f000 fac3 	bl	80007b4 <MX_DMA_Init>
  MX_FDCAN1_Init();
 800022e:	f000 f97f 	bl	8000530 <MX_FDCAN1_Init>
  MX_TIM4_Init();
 8000232:	f000 fa71 	bl	8000718 <MX_TIM4_Init>
  MX_ADC2_Init();
 8000236:	f000 f905 	bl	8000444 <MX_ADC2_Init>
  MX_TIM1_Init();
 800023a:	f000 fa19 	bl	8000670 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //Defining variables
  #define ADC_BUF_LEN 2
  uint16_t AdcResults[ADC_BUF_LEN];
  uint8_t  digital_word = 0; //Digital Input Data
 800023e:	2300      	movs	r3, #0
 8000240:	73fb      	strb	r3, [r7, #15]
  uint16_t analog1_word = 0; //Analog Input Data 1
 8000242:	2300      	movs	r3, #0
 8000244:	81bb      	strh	r3, [r7, #12]
  uint16_t analog2_word = 0; //Analog Input Data 2
 8000246:	2300      	movs	r3, #0
 8000248:	817b      	strh	r3, [r7, #10]
  uint8_t analog1_half1 = 0; //Lower 8 bits
 800024a:	2300      	movs	r3, #0
 800024c:	727b      	strb	r3, [r7, #9]
  uint8_t analog1_half2 = 0; //Upper 4 bits
 800024e:	2300      	movs	r3, #0
 8000250:	723b      	strb	r3, [r7, #8]
  uint8_t analog2_half1 = 0; //Lower 8 bits
 8000252:	2300      	movs	r3, #0
 8000254:	71fb      	strb	r3, [r7, #7]
  uint8_t analog2_half2 = 0; //Upper 4 bits
 8000256:	2300      	movs	r3, #0
 8000258:	71bb      	strb	r3, [r7, #6]

  //Starting timers
  HAL_TIM_Base_Start_IT(&htim1);
 800025a:	484d      	ldr	r0, [pc, #308]	; (8000390 <main+0x178>)
 800025c:	f004 f85c 	bl	8004318 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000260:	484c      	ldr	r0, [pc, #304]	; (8000394 <main+0x17c>)
 8000262:	f004 f859 	bl	8004318 <HAL_TIM_Base_Start_IT>

  //Starting DMA
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)AdcResults, ADC_BUF_LEN);
 8000266:	463b      	mov	r3, r7
 8000268:	2202      	movs	r2, #2
 800026a:	4619      	mov	r1, r3
 800026c:	484a      	ldr	r0, [pc, #296]	; (8000398 <main+0x180>)
 800026e:	f001 f97d 	bl	800156c <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	analog1_word = AdcResults[0]; //Analog Input Data 1
 8000272:	883b      	ldrh	r3, [r7, #0]
 8000274:	81bb      	strh	r3, [r7, #12]
	analog2_word = AdcResults[1]; //Analog Input Data 2
 8000276:	887b      	ldrh	r3, [r7, #2]
 8000278:	817b      	strh	r3, [r7, #10]
	analog1_half1 = (0b11111111 & analog1_word); //lower 8 bits
 800027a:	89bb      	ldrh	r3, [r7, #12]
 800027c:	727b      	strb	r3, [r7, #9]
	analog1_half2 = ((0b11111111<<8) & analog1_word)>>8; //upper 8 bits
 800027e:	89bb      	ldrh	r3, [r7, #12]
 8000280:	0a1b      	lsrs	r3, r3, #8
 8000282:	b29b      	uxth	r3, r3
 8000284:	723b      	strb	r3, [r7, #8]
	analog2_half1 = (0b11111111 & analog2_word); //lower 8 bits
 8000286:	897b      	ldrh	r3, [r7, #10]
 8000288:	71fb      	strb	r3, [r7, #7]
	analog2_half2 = ((0b11111111<<8) & analog2_word)>>8; //upper 8 bits
 800028a:	897b      	ldrh	r3, [r7, #10]
 800028c:	0a1b      	lsrs	r3, r3, #8
 800028e:	b29b      	uxth	r3, r3
 8000290:	71bb      	strb	r3, [r7, #6]

	//Connectors from right to left mapped to bits 0 through 7. J6 (last connector on the left) is unused.
	//| MSB:J10 | J12 | J7 | J9 | J11 | J13 | J5 | J8:LSB |
	digital_word = 0x00;
 8000292:	2300      	movs	r3, #0
 8000294:	73fb      	strb	r3, [r7, #15]
	digital_word = digital_word |  HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13); 	//PB6, J8
 8000296:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800029a:	4840      	ldr	r0, [pc, #256]	; (800039c <main+0x184>)
 800029c:	f003 f822 	bl	80032e4 <HAL_GPIO_ReadPin>
 80002a0:	4603      	mov	r3, r0
 80002a2:	461a      	mov	r2, r3
 80002a4:	7bfb      	ldrb	r3, [r7, #15]
 80002a6:	4313      	orrs	r3, r2
 80002a8:	73fb      	strb	r3, [r7, #15]
	digital_word = digital_word | (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14)) <<1; 		//PB5, J5
 80002aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002ae:	483b      	ldr	r0, [pc, #236]	; (800039c <main+0x184>)
 80002b0:	f003 f818 	bl	80032e4 <HAL_GPIO_ReadPin>
 80002b4:	4603      	mov	r3, r0
 80002b6:	005b      	lsls	r3, r3, #1
 80002b8:	b25a      	sxtb	r2, r3
 80002ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80002be:	4313      	orrs	r3, r2
 80002c0:	b25b      	sxtb	r3, r3
 80002c2:	73fb      	strb	r3, [r7, #15]
	digital_word = digital_word | (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15)) <<2; 	//PB4, J13
 80002c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002c8:	4834      	ldr	r0, [pc, #208]	; (800039c <main+0x184>)
 80002ca:	f003 f80b 	bl	80032e4 <HAL_GPIO_ReadPin>
 80002ce:	4603      	mov	r3, r0
 80002d0:	009b      	lsls	r3, r3, #2
 80002d2:	b25a      	sxtb	r2, r3
 80002d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80002d8:	4313      	orrs	r3, r2
 80002da:	b25b      	sxtb	r3, r3
 80002dc:	73fb      	strb	r3, [r7, #15]
	digital_word = digital_word | (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_1)) <<3; 	//PB3, J11
 80002de:	2102      	movs	r1, #2
 80002e0:	482f      	ldr	r0, [pc, #188]	; (80003a0 <main+0x188>)
 80002e2:	f002 ffff 	bl	80032e4 <HAL_GPIO_ReadPin>
 80002e6:	4603      	mov	r3, r0
 80002e8:	00db      	lsls	r3, r3, #3
 80002ea:	b25a      	sxtb	r2, r3
 80002ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80002f0:	4313      	orrs	r3, r2
 80002f2:	b25b      	sxtb	r3, r3
 80002f4:	73fb      	strb	r3, [r7, #15]
	digital_word = digital_word | (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) <<4; 	//PB2, J9
 80002f6:	2101      	movs	r1, #1
 80002f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002fc:	f002 fff2 	bl	80032e4 <HAL_GPIO_ReadPin>
 8000300:	4603      	mov	r3, r0
 8000302:	011b      	lsls	r3, r3, #4
 8000304:	b25a      	sxtb	r2, r3
 8000306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800030a:	4313      	orrs	r3, r2
 800030c:	b25b      	sxtb	r3, r3
 800030e:	73fb      	strb	r3, [r7, #15]
	digital_word = digital_word | (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)) <<5; 	//PB1, J7
 8000310:	2102      	movs	r1, #2
 8000312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000316:	f002 ffe5 	bl	80032e4 <HAL_GPIO_ReadPin>
 800031a:	4603      	mov	r3, r0
 800031c:	015b      	lsls	r3, r3, #5
 800031e:	b25a      	sxtb	r2, r3
 8000320:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000324:	4313      	orrs	r3, r2
 8000326:	b25b      	sxtb	r3, r3
 8000328:	73fb      	strb	r3, [r7, #15]
	digital_word = digital_word | (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)) <<6; 	//PB9, J12
 800032a:	2180      	movs	r1, #128	; 0x80
 800032c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000330:	f002 ffd8 	bl	80032e4 <HAL_GPIO_ReadPin>
 8000334:	4603      	mov	r3, r0
 8000336:	019b      	lsls	r3, r3, #6
 8000338:	b25a      	sxtb	r2, r3
 800033a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800033e:	4313      	orrs	r3, r2
 8000340:	b25b      	sxtb	r3, r3
 8000342:	73fb      	strb	r3, [r7, #15]
	digital_word = digital_word | (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)) <<7; 	//PB8, J10
 8000344:	2101      	movs	r1, #1
 8000346:	4817      	ldr	r0, [pc, #92]	; (80003a4 <main+0x18c>)
 8000348:	f002 ffcc 	bl	80032e4 <HAL_GPIO_ReadPin>
 800034c:	4603      	mov	r3, r0
 800034e:	01db      	lsls	r3, r3, #7
 8000350:	b25a      	sxtb	r2, r3
 8000352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000356:	4313      	orrs	r3, r2
 8000358:	b25b      	sxtb	r3, r3
 800035a:	73fb      	strb	r3, [r7, #15]

	//Defining CAN message to be sent
	TxData[0] = analog2_half2;//analog2 upper 4 bits
 800035c:	4a12      	ldr	r2, [pc, #72]	; (80003a8 <main+0x190>)
 800035e:	79bb      	ldrb	r3, [r7, #6]
 8000360:	7013      	strb	r3, [r2, #0]
	TxData[1] = analog2_half1;//analog2 lower 8 bits
 8000362:	4a11      	ldr	r2, [pc, #68]	; (80003a8 <main+0x190>)
 8000364:	79fb      	ldrb	r3, [r7, #7]
 8000366:	7053      	strb	r3, [r2, #1]
	TxData[2] = analog1_half2;//analog1 upper 4 bits
 8000368:	4a0f      	ldr	r2, [pc, #60]	; (80003a8 <main+0x190>)
 800036a:	7a3b      	ldrb	r3, [r7, #8]
 800036c:	7093      	strb	r3, [r2, #2]
	TxData[3] = analog1_half1;//analog1 lower 8 bits
 800036e:	4a0e      	ldr	r2, [pc, #56]	; (80003a8 <main+0x190>)
 8000370:	7a7b      	ldrb	r3, [r7, #9]
 8000372:	70d3      	strb	r3, [r2, #3]
	TxData[4] = digital_word; //Digital input Byte
 8000374:	4a0c      	ldr	r2, [pc, #48]	; (80003a8 <main+0x190>)
 8000376:	7bfb      	ldrb	r3, [r7, #15]
 8000378:	7113      	strb	r3, [r2, #4]
	TxData[5] = 0x00;
 800037a:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <main+0x190>)
 800037c:	2200      	movs	r2, #0
 800037e:	715a      	strb	r2, [r3, #5]
	TxData[6] = 0x00;
 8000380:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <main+0x190>)
 8000382:	2200      	movs	r2, #0
 8000384:	719a      	strb	r2, [r3, #6]
	TxData[7] = 0x00;
 8000386:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <main+0x190>)
 8000388:	2200      	movs	r2, #0
 800038a:	71da      	strb	r2, [r3, #7]
	analog1_word = AdcResults[0]; //Analog Input Data 1
 800038c:	e771      	b.n	8000272 <main+0x5a>
 800038e:	bf00      	nop
 8000390:	20000158 	.word	0x20000158
 8000394:	200001a4 	.word	0x200001a4
 8000398:	20000028 	.word	0x20000028
 800039c:	48000800 	.word	0x48000800
 80003a0:	48001400 	.word	0x48001400
 80003a4:	48000400 	.word	0x48000400
 80003a8:	20000214 	.word	0x20000214

080003ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b094      	sub	sp, #80	; 0x50
 80003b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003b2:	f107 0318 	add.w	r3, r7, #24
 80003b6:	2238      	movs	r2, #56	; 0x38
 80003b8:	2100      	movs	r1, #0
 80003ba:	4618      	mov	r0, r3
 80003bc:	f004 fcd0 	bl	8004d60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c0:	1d3b      	adds	r3, r7, #4
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
 80003c6:	605a      	str	r2, [r3, #4]
 80003c8:	609a      	str	r2, [r3, #8]
 80003ca:	60da      	str	r2, [r3, #12]
 80003cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003d2:	f002 ffb9 	bl	8003348 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003d6:	2302      	movs	r3, #2
 80003d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003de:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003e0:	2340      	movs	r3, #64	; 0x40
 80003e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003e4:	2302      	movs	r3, #2
 80003e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003e8:	2302      	movs	r3, #2
 80003ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80003ec:	2301      	movs	r3, #1
 80003ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 80003f0:	230a      	movs	r3, #10
 80003f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80003f4:	2302      	movs	r3, #2
 80003f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 80003f8:	2308      	movs	r3, #8
 80003fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003fc:	2302      	movs	r3, #2
 80003fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000400:	f107 0318 	add.w	r3, r7, #24
 8000404:	4618      	mov	r0, r3
 8000406:	f003 f843 	bl	8003490 <HAL_RCC_OscConfig>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000410:	f000 fa9e 	bl	8000950 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000414:	230f      	movs	r3, #15
 8000416:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000418:	2301      	movs	r3, #1
 800041a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800041c:	2300      	movs	r3, #0
 800041e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000420:	2300      	movs	r3, #0
 8000422:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000424:	2300      	movs	r3, #0
 8000426:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000428:	1d3b      	adds	r3, r7, #4
 800042a:	2100      	movs	r1, #0
 800042c:	4618      	mov	r0, r3
 800042e:	f003 fb47 	bl	8003ac0 <HAL_RCC_ClockConfig>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000438:	f000 fa8a 	bl	8000950 <Error_Handler>
  }
}
 800043c:	bf00      	nop
 800043e:	3750      	adds	r7, #80	; 0x50
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}

08000444 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b088      	sub	sp, #32
 8000448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800044a:	463b      	mov	r3, r7
 800044c:	2220      	movs	r2, #32
 800044e:	2100      	movs	r1, #0
 8000450:	4618      	mov	r0, r3
 8000452:	f004 fc85 	bl	8004d60 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000456:	4b32      	ldr	r3, [pc, #200]	; (8000520 <MX_ADC2_Init+0xdc>)
 8000458:	4a32      	ldr	r2, [pc, #200]	; (8000524 <MX_ADC2_Init+0xe0>)
 800045a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800045c:	4b30      	ldr	r3, [pc, #192]	; (8000520 <MX_ADC2_Init+0xdc>)
 800045e:	2200      	movs	r2, #0
 8000460:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000462:	4b2f      	ldr	r3, [pc, #188]	; (8000520 <MX_ADC2_Init+0xdc>)
 8000464:	2200      	movs	r2, #0
 8000466:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000468:	4b2d      	ldr	r3, [pc, #180]	; (8000520 <MX_ADC2_Init+0xdc>)
 800046a:	2200      	movs	r2, #0
 800046c:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800046e:	4b2c      	ldr	r3, [pc, #176]	; (8000520 <MX_ADC2_Init+0xdc>)
 8000470:	2200      	movs	r2, #0
 8000472:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000474:	4b2a      	ldr	r3, [pc, #168]	; (8000520 <MX_ADC2_Init+0xdc>)
 8000476:	2201      	movs	r2, #1
 8000478:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800047a:	4b29      	ldr	r3, [pc, #164]	; (8000520 <MX_ADC2_Init+0xdc>)
 800047c:	2204      	movs	r2, #4
 800047e:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000480:	4b27      	ldr	r3, [pc, #156]	; (8000520 <MX_ADC2_Init+0xdc>)
 8000482:	2200      	movs	r2, #0
 8000484:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000486:	4b26      	ldr	r3, [pc, #152]	; (8000520 <MX_ADC2_Init+0xdc>)
 8000488:	2200      	movs	r2, #0
 800048a:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 800048c:	4b24      	ldr	r3, [pc, #144]	; (8000520 <MX_ADC2_Init+0xdc>)
 800048e:	2202      	movs	r2, #2
 8000490:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000492:	4b23      	ldr	r3, [pc, #140]	; (8000520 <MX_ADC2_Init+0xdc>)
 8000494:	2200      	movs	r2, #0
 8000496:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800049a:	4b21      	ldr	r3, [pc, #132]	; (8000520 <MX_ADC2_Init+0xdc>)
 800049c:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 80004a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80004a2:	4b1f      	ldr	r3, [pc, #124]	; (8000520 <MX_ADC2_Init+0xdc>)
 80004a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004a8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80004aa:	4b1d      	ldr	r3, [pc, #116]	; (8000520 <MX_ADC2_Init+0xdc>)
 80004ac:	2201      	movs	r2, #1
 80004ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004b2:	4b1b      	ldr	r3, [pc, #108]	; (8000520 <MX_ADC2_Init+0xdc>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80004b8:	4b19      	ldr	r3, [pc, #100]	; (8000520 <MX_ADC2_Init+0xdc>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80004c0:	4817      	ldr	r0, [pc, #92]	; (8000520 <MX_ADC2_Init+0xdc>)
 80004c2:	f000 fec9 	bl	8001258 <HAL_ADC_Init>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 80004cc:	f000 fa40 	bl	8000950 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80004d0:	4b15      	ldr	r3, [pc, #84]	; (8000528 <MX_ADC2_Init+0xe4>)
 80004d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004d4:	2306      	movs	r3, #6
 80004d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80004d8:	2300      	movs	r3, #0
 80004da:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004dc:	237f      	movs	r3, #127	; 0x7f
 80004de:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004e0:	2304      	movs	r3, #4
 80004e2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80004e4:	2300      	movs	r3, #0
 80004e6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80004e8:	463b      	mov	r3, r7
 80004ea:	4619      	mov	r1, r3
 80004ec:	480c      	ldr	r0, [pc, #48]	; (8000520 <MX_ADC2_Init+0xdc>)
 80004ee:	f001 f905 	bl	80016fc <HAL_ADC_ConfigChannel>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 80004f8:	f000 fa2a 	bl	8000950 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80004fc:	4b0b      	ldr	r3, [pc, #44]	; (800052c <MX_ADC2_Init+0xe8>)
 80004fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000500:	230c      	movs	r3, #12
 8000502:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000504:	463b      	mov	r3, r7
 8000506:	4619      	mov	r1, r3
 8000508:	4805      	ldr	r0, [pc, #20]	; (8000520 <MX_ADC2_Init+0xdc>)
 800050a:	f001 f8f7 	bl	80016fc <HAL_ADC_ConfigChannel>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 8000514:	f000 fa1c 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000518:	bf00      	nop
 800051a:	3720      	adds	r7, #32
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	20000028 	.word	0x20000028
 8000524:	50000100 	.word	0x50000100
 8000528:	36902000 	.word	0x36902000
 800052c:	0c900008 	.word	0x0c900008

08000530 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b088      	sub	sp, #32
 8000534:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN FDCAN1_Init 0 */
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */
  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000536:	4b4b      	ldr	r3, [pc, #300]	; (8000664 <MX_FDCAN1_Init+0x134>)
 8000538:	4a4b      	ldr	r2, [pc, #300]	; (8000668 <MX_FDCAN1_Init+0x138>)
 800053a:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800053c:	4b49      	ldr	r3, [pc, #292]	; (8000664 <MX_FDCAN1_Init+0x134>)
 800053e:	2200      	movs	r2, #0
 8000540:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000542:	4b48      	ldr	r3, [pc, #288]	; (8000664 <MX_FDCAN1_Init+0x134>)
 8000544:	2200      	movs	r2, #0
 8000546:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000548:	4b46      	ldr	r3, [pc, #280]	; (8000664 <MX_FDCAN1_Init+0x134>)
 800054a:	2200      	movs	r2, #0
 800054c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800054e:	4b45      	ldr	r3, [pc, #276]	; (8000664 <MX_FDCAN1_Init+0x134>)
 8000550:	2200      	movs	r2, #0
 8000552:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000554:	4b43      	ldr	r3, [pc, #268]	; (8000664 <MX_FDCAN1_Init+0x134>)
 8000556:	2200      	movs	r2, #0
 8000558:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800055a:	4b42      	ldr	r3, [pc, #264]	; (8000664 <MX_FDCAN1_Init+0x134>)
 800055c:	2200      	movs	r2, #0
 800055e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000560:	4b40      	ldr	r3, [pc, #256]	; (8000664 <MX_FDCAN1_Init+0x134>)
 8000562:	2201      	movs	r2, #1
 8000564:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 3;
 8000566:	4b3f      	ldr	r3, [pc, #252]	; (8000664 <MX_FDCAN1_Init+0x134>)
 8000568:	2203      	movs	r2, #3
 800056a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 16;
 800056c:	4b3d      	ldr	r3, [pc, #244]	; (8000664 <MX_FDCAN1_Init+0x134>)
 800056e:	2210      	movs	r2, #16
 8000570:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 3;
 8000572:	4b3c      	ldr	r3, [pc, #240]	; (8000664 <MX_FDCAN1_Init+0x134>)
 8000574:	2203      	movs	r2, #3
 8000576:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000578:	4b3a      	ldr	r3, [pc, #232]	; (8000664 <MX_FDCAN1_Init+0x134>)
 800057a:	2201      	movs	r2, #1
 800057c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 3;
 800057e:	4b39      	ldr	r3, [pc, #228]	; (8000664 <MX_FDCAN1_Init+0x134>)
 8000580:	2203      	movs	r2, #3
 8000582:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 16;
 8000584:	4b37      	ldr	r3, [pc, #220]	; (8000664 <MX_FDCAN1_Init+0x134>)
 8000586:	2210      	movs	r2, #16
 8000588:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 3;
 800058a:	4b36      	ldr	r3, [pc, #216]	; (8000664 <MX_FDCAN1_Init+0x134>)
 800058c:	2203      	movs	r2, #3
 800058e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000590:	4b34      	ldr	r3, [pc, #208]	; (8000664 <MX_FDCAN1_Init+0x134>)
 8000592:	2200      	movs	r2, #0
 8000594:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000596:	4b33      	ldr	r3, [pc, #204]	; (8000664 <MX_FDCAN1_Init+0x134>)
 8000598:	2200      	movs	r2, #0
 800059a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800059c:	4b31      	ldr	r3, [pc, #196]	; (8000664 <MX_FDCAN1_Init+0x134>)
 800059e:	2200      	movs	r2, #0
 80005a0:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80005a2:	4830      	ldr	r0, [pc, #192]	; (8000664 <MX_FDCAN1_Init+0x134>)
 80005a4:	f002 f912 	bl	80027cc <HAL_FDCAN_Init>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 80005ae:	f000 f9cf 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;

    /* Configure Rx filter */
    sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80005b2:	2300      	movs	r3, #0
 80005b4:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIndex = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80005ba:	2302      	movs	r3, #2
 80005bc:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80005be:	2301      	movs	r3, #1
 80005c0:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterID1 = 0x321;
 80005c2:	f240 3321 	movw	r3, #801	; 0x321
 80005c6:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterID2 = 0x7FF;
 80005c8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80005cc:	617b      	str	r3, [r7, #20]
    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80005ce:	463b      	mov	r3, r7
 80005d0:	4619      	mov	r1, r3
 80005d2:	4824      	ldr	r0, [pc, #144]	; (8000664 <MX_FDCAN1_Init+0x134>)
 80005d4:	f002 fa54 	bl	8002a80 <HAL_FDCAN_ConfigFilter>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <MX_FDCAN1_Init+0xb2>
    {
      Error_Handler();
 80005de:	f000 f9b7 	bl	8000950 <Error_Handler>
    }

    /* Configure global filter:
       Filter all remote frames with STD and EXT ID
       Reject non matching frames with STD ID and EXT ID */
    if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 80005e2:	2300      	movs	r3, #0
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	2300      	movs	r3, #0
 80005e8:	2202      	movs	r2, #2
 80005ea:	2102      	movs	r1, #2
 80005ec:	481d      	ldr	r0, [pc, #116]	; (8000664 <MX_FDCAN1_Init+0x134>)
 80005ee:	f002 faa1 	bl	8002b34 <HAL_FDCAN_ConfigGlobalFilter>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_FDCAN1_Init+0xcc>
    {
      Error_Handler();
 80005f8:	f000 f9aa 	bl	8000950 <Error_Handler>
    }

    /* Start the FDCAN module */
    if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 80005fc:	4819      	ldr	r0, [pc, #100]	; (8000664 <MX_FDCAN1_Init+0x134>)
 80005fe:	f002 faca 	bl	8002b96 <HAL_FDCAN_Start>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_FDCAN1_Init+0xdc>
    {
      Error_Handler();
 8000608:	f000 f9a2 	bl	8000950 <Error_Handler>
    }

    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800060c:	2200      	movs	r2, #0
 800060e:	2101      	movs	r1, #1
 8000610:	4814      	ldr	r0, [pc, #80]	; (8000664 <MX_FDCAN1_Init+0x134>)
 8000612:	f002 fb2c 	bl	8002c6e <HAL_FDCAN_ActivateNotification>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_FDCAN1_Init+0xf0>
    {
      Error_Handler();
 800061c:	f000 f998 	bl	8000950 <Error_Handler>
    }

    /* Prepare Tx Header */
    TxHeader.Identifier = 0x400; //Determines ID of CAN message
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <MX_FDCAN1_Init+0x13c>)
 8000622:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000626:	601a      	str	r2, [r3, #0]
    TxHeader.IdType = FDCAN_STANDARD_ID;
 8000628:	4b10      	ldr	r3, [pc, #64]	; (800066c <MX_FDCAN1_Init+0x13c>)
 800062a:	2200      	movs	r2, #0
 800062c:	605a      	str	r2, [r3, #4]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800062e:	4b0f      	ldr	r3, [pc, #60]	; (800066c <MX_FDCAN1_Init+0x13c>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
    TxHeader.DataLength = FDCAN_DLC_BYTES_8; //Specifies the number of data bytes to be transmitted
 8000634:	4b0d      	ldr	r3, [pc, #52]	; (800066c <MX_FDCAN1_Init+0x13c>)
 8000636:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800063a:	60da      	str	r2, [r3, #12]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800063c:	4b0b      	ldr	r3, [pc, #44]	; (800066c <MX_FDCAN1_Init+0x13c>)
 800063e:	2200      	movs	r2, #0
 8000640:	611a      	str	r2, [r3, #16]
    TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000642:	4b0a      	ldr	r3, [pc, #40]	; (800066c <MX_FDCAN1_Init+0x13c>)
 8000644:	2200      	movs	r2, #0
 8000646:	615a      	str	r2, [r3, #20]
    TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000648:	4b08      	ldr	r3, [pc, #32]	; (800066c <MX_FDCAN1_Init+0x13c>)
 800064a:	2200      	movs	r2, #0
 800064c:	619a      	str	r2, [r3, #24]
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800064e:	4b07      	ldr	r3, [pc, #28]	; (800066c <MX_FDCAN1_Init+0x13c>)
 8000650:	2200      	movs	r2, #0
 8000652:	61da      	str	r2, [r3, #28]
    TxHeader.MessageMarker = 0;
 8000654:	4b05      	ldr	r3, [pc, #20]	; (800066c <MX_FDCAN1_Init+0x13c>)
 8000656:	2200      	movs	r2, #0
 8000658:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN1_Init 2 */

}
 800065a:	bf00      	nop
 800065c:	3718      	adds	r7, #24
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	200000f4 	.word	0x200000f4
 8000668:	40006400 	.word	0x40006400
 800066c:	200001f0 	.word	0x200001f0

08000670 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b088      	sub	sp, #32
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000676:	f107 0310 	add.w	r3, r7, #16
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800068e:	4b20      	ldr	r3, [pc, #128]	; (8000710 <MX_TIM1_Init+0xa0>)
 8000690:	4a20      	ldr	r2, [pc, #128]	; (8000714 <MX_TIM1_Init+0xa4>)
 8000692:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000694:	4b1e      	ldr	r3, [pc, #120]	; (8000710 <MX_TIM1_Init+0xa0>)
 8000696:	2200      	movs	r2, #0
 8000698:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800069a:	4b1d      	ldr	r3, [pc, #116]	; (8000710 <MX_TIM1_Init+0xa0>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1599;
 80006a0:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <MX_TIM1_Init+0xa0>)
 80006a2:	f240 623f 	movw	r2, #1599	; 0x63f
 80006a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a8:	4b19      	ldr	r3, [pc, #100]	; (8000710 <MX_TIM1_Init+0xa0>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006ae:	4b18      	ldr	r3, [pc, #96]	; (8000710 <MX_TIM1_Init+0xa0>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006b4:	4b16      	ldr	r3, [pc, #88]	; (8000710 <MX_TIM1_Init+0xa0>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006ba:	4815      	ldr	r0, [pc, #84]	; (8000710 <MX_TIM1_Init+0xa0>)
 80006bc:	f003 fdd4 	bl	8004268 <HAL_TIM_Base_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80006c6:	f000 f943 	bl	8000950 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006d0:	f107 0310 	add.w	r3, r7, #16
 80006d4:	4619      	mov	r1, r3
 80006d6:	480e      	ldr	r0, [pc, #56]	; (8000710 <MX_TIM1_Init+0xa0>)
 80006d8:	f004 f808 	bl	80046ec <HAL_TIM_ConfigClockSource>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80006e2:	f000 f935 	bl	8000950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80006e6:	2320      	movs	r3, #32
 80006e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 80006ea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80006ee:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	4619      	mov	r1, r3
 80006f8:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_TIM1_Init+0xa0>)
 80006fa:	f004 fa45 	bl	8004b88 <HAL_TIMEx_MasterConfigSynchronization>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000704:	f000 f924 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	3720      	adds	r7, #32
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000158 	.word	0x20000158
 8000714:	40012c00 	.word	0x40012c00

08000718 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b088      	sub	sp, #32
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800071e:	f107 0310 	add.w	r3, r7, #16
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000736:	4b1d      	ldr	r3, [pc, #116]	; (80007ac <MX_TIM4_Init+0x94>)
 8000738:	4a1d      	ldr	r2, [pc, #116]	; (80007b0 <MX_TIM4_Init+0x98>)
 800073a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100 - 1;
 800073c:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <MX_TIM4_Init+0x94>)
 800073e:	2263      	movs	r2, #99	; 0x63
 8000740:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000742:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <MX_TIM4_Init+0x94>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1279;
 8000748:	4b18      	ldr	r3, [pc, #96]	; (80007ac <MX_TIM4_Init+0x94>)
 800074a:	f240 42ff 	movw	r2, #1279	; 0x4ff
 800074e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000750:	4b16      	ldr	r3, [pc, #88]	; (80007ac <MX_TIM4_Init+0x94>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <MX_TIM4_Init+0x94>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800075c:	4813      	ldr	r0, [pc, #76]	; (80007ac <MX_TIM4_Init+0x94>)
 800075e:	f003 fd83 	bl	8004268 <HAL_TIM_Base_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000768:	f000 f8f2 	bl	8000950 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800076c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000770:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000772:	f107 0310 	add.w	r3, r7, #16
 8000776:	4619      	mov	r1, r3
 8000778:	480c      	ldr	r0, [pc, #48]	; (80007ac <MX_TIM4_Init+0x94>)
 800077a:	f003 ffb7 	bl	80046ec <HAL_TIM_ConfigClockSource>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000784:	f000 f8e4 	bl	8000950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000788:	2320      	movs	r3, #32
 800078a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	4619      	mov	r1, r3
 8000794:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_TIM4_Init+0x94>)
 8000796:	f004 f9f7 	bl	8004b88 <HAL_TIMEx_MasterConfigSynchronization>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80007a0:	f000 f8d6 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  /* USER CODE END TIM4_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	3720      	adds	r7, #32
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	200001a4 	.word	0x200001a4
 80007b0:	40000800 	.word	0x40000800

080007b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80007ba:	4b12      	ldr	r3, [pc, #72]	; (8000804 <MX_DMA_Init+0x50>)
 80007bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007be:	4a11      	ldr	r2, [pc, #68]	; (8000804 <MX_DMA_Init+0x50>)
 80007c0:	f043 0304 	orr.w	r3, r3, #4
 80007c4:	6493      	str	r3, [r2, #72]	; 0x48
 80007c6:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_DMA_Init+0x50>)
 80007c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007ca:	f003 0304 	and.w	r3, r3, #4
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_DMA_Init+0x50>)
 80007d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007d6:	4a0b      	ldr	r2, [pc, #44]	; (8000804 <MX_DMA_Init+0x50>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6493      	str	r3, [r2, #72]	; 0x48
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_DMA_Init+0x50>)
 80007e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2100      	movs	r1, #0
 80007ee:	200b      	movs	r0, #11
 80007f0:	f001 fd45 	bl	800227e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007f4:	200b      	movs	r0, #11
 80007f6:	f001 fd5c 	bl	80022b2 <HAL_NVIC_EnableIRQ>

}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40021000 	.word	0x40021000

08000808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08a      	sub	sp, #40	; 0x28
 800080c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081e:	4b33      	ldr	r3, [pc, #204]	; (80008ec <MX_GPIO_Init+0xe4>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	4a32      	ldr	r2, [pc, #200]	; (80008ec <MX_GPIO_Init+0xe4>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082a:	4b30      	ldr	r3, [pc, #192]	; (80008ec <MX_GPIO_Init+0xe4>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000836:	4b2d      	ldr	r3, [pc, #180]	; (80008ec <MX_GPIO_Init+0xe4>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	4a2c      	ldr	r2, [pc, #176]	; (80008ec <MX_GPIO_Init+0xe4>)
 800083c:	f043 0320 	orr.w	r3, r3, #32
 8000840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000842:	4b2a      	ldr	r3, [pc, #168]	; (80008ec <MX_GPIO_Init+0xe4>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	f003 0320 	and.w	r3, r3, #32
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	4b27      	ldr	r3, [pc, #156]	; (80008ec <MX_GPIO_Init+0xe4>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	4a26      	ldr	r2, [pc, #152]	; (80008ec <MX_GPIO_Init+0xe4>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085a:	4b24      	ldr	r3, [pc, #144]	; (80008ec <MX_GPIO_Init+0xe4>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	4b21      	ldr	r3, [pc, #132]	; (80008ec <MX_GPIO_Init+0xe4>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	4a20      	ldr	r2, [pc, #128]	; (80008ec <MX_GPIO_Init+0xe4>)
 800086c:	f043 0302 	orr.w	r3, r3, #2
 8000870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000872:	4b1e      	ldr	r3, [pc, #120]	; (80008ec <MX_GPIO_Init+0xe4>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC13 PB5_Pin PB4_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|PB5_Pin|PB4_Pin;
 800087e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000884:	2300      	movs	r3, #0
 8000886:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	4619      	mov	r1, r3
 8000892:	4817      	ldr	r0, [pc, #92]	; (80008f0 <MX_GPIO_Init+0xe8>)
 8000894:	f002 fba4 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3_Pin */
  GPIO_InitStruct.Pin = PB3_Pin;
 8000898:	2302      	movs	r3, #2
 800089a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089c:	2300      	movs	r3, #0
 800089e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PB3_GPIO_Port, &GPIO_InitStruct);
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4619      	mov	r1, r3
 80008aa:	4812      	ldr	r0, [pc, #72]	; (80008f4 <MX_GPIO_Init+0xec>)
 80008ac:	f002 fb98 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2_Pin PB1_Pin PB9_Pin */
  GPIO_InitStruct.Pin = PB2_Pin|PB1_Pin|PB9_Pin;
 80008b0:	2383      	movs	r3, #131	; 0x83
 80008b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	4619      	mov	r1, r3
 80008c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c6:	f002 fb8b 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8_Pin PB7_Pin */
  GPIO_InitStruct.Pin = PB8_Pin|PB7_Pin;
 80008ca:	2303      	movs	r3, #3
 80008cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	4619      	mov	r1, r3
 80008dc:	4806      	ldr	r0, [pc, #24]	; (80008f8 <MX_GPIO_Init+0xf0>)
 80008de:	f002 fb7f 	bl	8002fe0 <HAL_GPIO_Init>

}
 80008e2:	bf00      	nop
 80008e4:	3728      	adds	r7, #40	; 0x28
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40021000 	.word	0x40021000
 80008f0:	48000800 	.word	0x48000800
 80008f4:	48001400 	.word	0x48001400
 80008f8:	48000400 	.word	0x48000400

080008fc <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

//ADC Callback function
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc2)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	UNUSED(hadc2); //is this functionally important?
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000904:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000908:	4803      	ldr	r0, [pc, #12]	; (8000918 <HAL_ADC_ConvCpltCallback+0x1c>)
 800090a:	f002 fd03 	bl	8003314 <HAL_GPIO_TogglePin>
	//HAL_GPIO_WritePin(port, pinname, GPIO_PIN_SET);
	//asm("nop");
	//HAL_GPIO_WrtiePin(port, pinname, GPIO_PIN_RESET);
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	48000800 	.word	0x48000800

0800091c <HAL_TIM_PeriodElapsedCallback>:

//updates the CAN TX FIFO precisely every 8ms
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
	//Checks that the interrupt was generated by clock 4
	if(htim == &htim4)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4a06      	ldr	r2, [pc, #24]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d104      	bne.n	8000936 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		//Adds another message to the CAN FIFO every 8ms
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData);
 800092c:	4a05      	ldr	r2, [pc, #20]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800092e:	4906      	ldr	r1, [pc, #24]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000930:	4806      	ldr	r0, [pc, #24]	; (800094c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000932:	f002 f958 	bl	8002be6 <HAL_FDCAN_AddMessageToTxFifoQ>
	}
	if(htim == &htim1)
	{
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	}
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	200001a4 	.word	0x200001a4
 8000944:	20000214 	.word	0x20000214
 8000948:	200001f0 	.word	0x200001f0
 800094c:	200000f4 	.word	0x200000f4

08000950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000954:	b672      	cpsid	i
}
 8000956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000958:	e7fe      	b.n	8000958 <Error_Handler+0x8>
	...

0800095c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <HAL_MspInit+0x44>)
 8000964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000966:	4a0e      	ldr	r2, [pc, #56]	; (80009a0 <HAL_MspInit+0x44>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6613      	str	r3, [r2, #96]	; 0x60
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <HAL_MspInit+0x44>)
 8000970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <HAL_MspInit+0x44>)
 800097c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800097e:	4a08      	ldr	r2, [pc, #32]	; (80009a0 <HAL_MspInit+0x44>)
 8000980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000984:	6593      	str	r3, [r2, #88]	; 0x58
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_MspInit+0x44>)
 8000988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	40021000 	.word	0x40021000

080009a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b09a      	sub	sp, #104	; 0x68
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009bc:	f107 0310 	add.w	r3, r7, #16
 80009c0:	2244      	movs	r2, #68	; 0x44
 80009c2:	2100      	movs	r1, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f004 f9cb 	bl	8004d60 <memset>
  if(hadc->Instance==ADC2)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a33      	ldr	r2, [pc, #204]	; (8000a9c <HAL_ADC_MspInit+0xf8>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d15f      	bne.n	8000a94 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80009d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009d8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80009da:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80009de:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009e0:	f107 0310 	add.w	r3, r7, #16
 80009e4:	4618      	mov	r0, r3
 80009e6:	f003 fa4f 	bl	8003e88 <HAL_RCCEx_PeriphCLKConfig>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80009f0:	f7ff ffae 	bl	8000950 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80009f4:	4b2a      	ldr	r3, [pc, #168]	; (8000aa0 <HAL_ADC_MspInit+0xfc>)
 80009f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f8:	4a29      	ldr	r2, [pc, #164]	; (8000aa0 <HAL_ADC_MspInit+0xfc>)
 80009fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a00:	4b27      	ldr	r3, [pc, #156]	; (8000aa0 <HAL_ADC_MspInit+0xfc>)
 8000a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0c:	4b24      	ldr	r3, [pc, #144]	; (8000aa0 <HAL_ADC_MspInit+0xfc>)
 8000a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a10:	4a23      	ldr	r2, [pc, #140]	; (8000aa0 <HAL_ADC_MspInit+0xfc>)
 8000a12:	f043 0301 	orr.w	r3, r3, #1
 8000a16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a18:	4b21      	ldr	r3, [pc, #132]	; (8000aa0 <HAL_ADC_MspInit+0xfc>)
 8000a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1c:	f003 0301 	and.w	r3, r3, #1
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA5     ------> ADC2_IN13
    PA6     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = POT2_Pin|POT1_Pin;
 8000a24:	2360      	movs	r3, #96	; 0x60
 8000a26:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a30:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a34:	4619      	mov	r1, r3
 8000a36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a3a:	f002 fad1 	bl	8002fe0 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 8000a3e:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <HAL_ADC_MspInit+0x100>)
 8000a40:	4a19      	ldr	r2, [pc, #100]	; (8000aa8 <HAL_ADC_MspInit+0x104>)
 8000a42:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000a44:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <HAL_ADC_MspInit+0x100>)
 8000a46:	2224      	movs	r2, #36	; 0x24
 8000a48:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a4a:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <HAL_ADC_MspInit+0x100>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a50:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <HAL_ADC_MspInit+0x100>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000a56:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <HAL_ADC_MspInit+0x100>)
 8000a58:	2280      	movs	r2, #128	; 0x80
 8000a5a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a5c:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <HAL_ADC_MspInit+0x100>)
 8000a5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a62:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <HAL_ADC_MspInit+0x100>)
 8000a66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a6a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000a6c:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <HAL_ADC_MspInit+0x100>)
 8000a6e:	2220      	movs	r2, #32
 8000a70:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000a72:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <HAL_ADC_MspInit+0x100>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000a78:	480a      	ldr	r0, [pc, #40]	; (8000aa4 <HAL_ADC_MspInit+0x100>)
 8000a7a:	f001 fc35 	bl	80022e8 <HAL_DMA_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8000a84:	f7ff ff64 	bl	8000950 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4a06      	ldr	r2, [pc, #24]	; (8000aa4 <HAL_ADC_MspInit+0x100>)
 8000a8c:	655a      	str	r2, [r3, #84]	; 0x54
 8000a8e:	4a05      	ldr	r2, [pc, #20]	; (8000aa4 <HAL_ADC_MspInit+0x100>)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000a94:	bf00      	nop
 8000a96:	3768      	adds	r7, #104	; 0x68
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	50000100 	.word	0x50000100
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	20000094 	.word	0x20000094
 8000aa8:	40020008 	.word	0x40020008

08000aac <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b09a      	sub	sp, #104	; 0x68
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ac4:	f107 0310 	add.w	r3, r7, #16
 8000ac8:	2244      	movs	r2, #68	; 0x44
 8000aca:	2100      	movs	r1, #0
 8000acc:	4618      	mov	r0, r3
 8000ace:	f004 f947 	bl	8004d60 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a20      	ldr	r2, [pc, #128]	; (8000b58 <HAL_FDCAN_MspInit+0xac>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d139      	bne.n	8000b50 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000ae2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ae6:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ae8:	f107 0310 	add.w	r3, r7, #16
 8000aec:	4618      	mov	r0, r3
 8000aee:	f003 f9cb 	bl	8003e88 <HAL_RCCEx_PeriphCLKConfig>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000af8:	f7ff ff2a 	bl	8000950 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000afc:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <HAL_FDCAN_MspInit+0xb0>)
 8000afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b00:	4a16      	ldr	r2, [pc, #88]	; (8000b5c <HAL_FDCAN_MspInit+0xb0>)
 8000b02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b06:	6593      	str	r3, [r2, #88]	; 0x58
 8000b08:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <HAL_FDCAN_MspInit+0xb0>)
 8000b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b14:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <HAL_FDCAN_MspInit+0xb0>)
 8000b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b18:	4a10      	ldr	r2, [pc, #64]	; (8000b5c <HAL_FDCAN_MspInit+0xb0>)
 8000b1a:	f043 0301 	orr.w	r3, r3, #1
 8000b1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b20:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <HAL_FDCAN_MspInit+0xb0>)
 8000b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b24:	f003 0301 	and.w	r3, r3, #1
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b2c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b30:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b32:	2302      	movs	r3, #2
 8000b34:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000b3e:	2309      	movs	r3, #9
 8000b40:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b42:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b46:	4619      	mov	r1, r3
 8000b48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4c:	f002 fa48 	bl	8002fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000b50:	bf00      	nop
 8000b52:	3768      	adds	r7, #104	; 0x68
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40006400 	.word	0x40006400
 8000b5c:	40021000 	.word	0x40021000

08000b60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a22      	ldr	r2, [pc, #136]	; (8000bf8 <HAL_TIM_Base_MspInit+0x98>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d124      	bne.n	8000bbc <HAL_TIM_Base_MspInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b72:	4b22      	ldr	r3, [pc, #136]	; (8000bfc <HAL_TIM_Base_MspInit+0x9c>)
 8000b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b76:	4a21      	ldr	r2, [pc, #132]	; (8000bfc <HAL_TIM_Base_MspInit+0x9c>)
 8000b78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b7e:	4b1f      	ldr	r3, [pc, #124]	; (8000bfc <HAL_TIM_Base_MspInit+0x9c>)
 8000b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	2018      	movs	r0, #24
 8000b90:	f001 fb75 	bl	800227e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000b94:	2018      	movs	r0, #24
 8000b96:	f001 fb8c 	bl	80022b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	2019      	movs	r0, #25
 8000ba0:	f001 fb6d 	bl	800227e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000ba4:	2019      	movs	r0, #25
 8000ba6:	f001 fb84 	bl	80022b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2100      	movs	r1, #0
 8000bae:	201a      	movs	r0, #26
 8000bb0:	f001 fb65 	bl	800227e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000bb4:	201a      	movs	r0, #26
 8000bb6:	f001 fb7c 	bl	80022b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000bba:	e018      	b.n	8000bee <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM4)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a0f      	ldr	r2, [pc, #60]	; (8000c00 <HAL_TIM_Base_MspInit+0xa0>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d113      	bne.n	8000bee <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000bc6:	4b0d      	ldr	r3, [pc, #52]	; (8000bfc <HAL_TIM_Base_MspInit+0x9c>)
 8000bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bca:	4a0c      	ldr	r2, [pc, #48]	; (8000bfc <HAL_TIM_Base_MspInit+0x9c>)
 8000bcc:	f043 0304 	orr.w	r3, r3, #4
 8000bd0:	6593      	str	r3, [r2, #88]	; 0x58
 8000bd2:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <HAL_TIM_Base_MspInit+0x9c>)
 8000bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bd6:	f003 0304 	and.w	r3, r3, #4
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2100      	movs	r1, #0
 8000be2:	201e      	movs	r0, #30
 8000be4:	f001 fb4b 	bl	800227e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000be8:	201e      	movs	r0, #30
 8000bea:	f001 fb62 	bl	80022b2 <HAL_NVIC_EnableIRQ>
}
 8000bee:	bf00      	nop
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40012c00 	.word	0x40012c00
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	40000800 	.word	0x40000800

08000c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <NMI_Handler+0x4>

08000c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <HardFault_Handler+0x4>

08000c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <MemManage_Handler+0x4>

08000c16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <BusFault_Handler+0x4>

08000c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <UsageFault_Handler+0x4>

08000c22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c50:	f000 f8c2 	bl	8000dd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000c5c:	4802      	ldr	r0, [pc, #8]	; (8000c68 <DMA1_Channel1_IRQHandler+0x10>)
 8000c5e:	f001 fc66 	bl	800252e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000094 	.word	0x20000094

08000c6c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c70:	4802      	ldr	r0, [pc, #8]	; (8000c7c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8000c72:	f003 fbbb 	bl	80043ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000158 	.word	0x20000158

08000c80 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c84:	4802      	ldr	r0, [pc, #8]	; (8000c90 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000c86:	f003 fbb1 	bl	80043ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000158 	.word	0x20000158

08000c94 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c98:	4802      	ldr	r0, [pc, #8]	; (8000ca4 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000c9a:	f003 fba7 	bl	80043ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000158 	.word	0x20000158

08000ca8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000cac:	4802      	ldr	r0, [pc, #8]	; (8000cb8 <TIM4_IRQHandler+0x10>)
 8000cae:	f003 fb9d 	bl	80043ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	200001a4 	.word	0x200001a4

08000cbc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <SystemInit+0x20>)
 8000cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc6:	4a05      	ldr	r2, [pc, #20]	; (8000cdc <SystemInit+0x20>)
 8000cc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ccc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ce0:	480d      	ldr	r0, [pc, #52]	; (8000d18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ce2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ce4:	480d      	ldr	r0, [pc, #52]	; (8000d1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000ce6:	490e      	ldr	r1, [pc, #56]	; (8000d20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ce8:	4a0e      	ldr	r2, [pc, #56]	; (8000d24 <LoopForever+0xe>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000cec:	e002      	b.n	8000cf4 <LoopCopyDataInit>

08000cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cf2:	3304      	adds	r3, #4

08000cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf8:	d3f9      	bcc.n	8000cee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cfa:	4a0b      	ldr	r2, [pc, #44]	; (8000d28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cfc:	4c0b      	ldr	r4, [pc, #44]	; (8000d2c <LoopForever+0x16>)
  movs r3, #0
 8000cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d00:	e001      	b.n	8000d06 <LoopFillZerobss>

08000d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d04:	3204      	adds	r2, #4

08000d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d08:	d3fb      	bcc.n	8000d02 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d0a:	f7ff ffd7 	bl	8000cbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d0e:	f004 f803 	bl	8004d18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d12:	f7ff fa81 	bl	8000218 <main>

08000d16 <LoopForever>:

LoopForever:
    b LoopForever
 8000d16:	e7fe      	b.n	8000d16 <LoopForever>
  ldr   r0, =_estack
 8000d18:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000d1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d20:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d24:	08004db0 	.word	0x08004db0
  ldr r2, =_sbss
 8000d28:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d2c:	20000220 	.word	0x20000220

08000d30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d30:	e7fe      	b.n	8000d30 <ADC1_2_IRQHandler>

08000d32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b082      	sub	sp, #8
 8000d36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	f001 fa93 	bl	8002268 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d42:	200f      	movs	r0, #15
 8000d44:	f000 f80e 	bl	8000d64 <HAL_InitTick>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d002      	beq.n	8000d54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	71fb      	strb	r3, [r7, #7]
 8000d52:	e001      	b.n	8000d58 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d54:	f7ff fe02 	bl	800095c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d58:	79fb      	ldrb	r3, [r7, #7]

}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d70:	4b16      	ldr	r3, [pc, #88]	; (8000dcc <HAL_InitTick+0x68>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d022      	beq.n	8000dbe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d78:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <HAL_InitTick+0x6c>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <HAL_InitTick+0x68>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d84:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f001 fa9e 	bl	80022ce <HAL_SYSTICK_Config>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d10f      	bne.n	8000db8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2b0f      	cmp	r3, #15
 8000d9c:	d809      	bhi.n	8000db2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	6879      	ldr	r1, [r7, #4]
 8000da2:	f04f 30ff 	mov.w	r0, #4294967295
 8000da6:	f001 fa6a 	bl	800227e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000daa:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <HAL_InitTick+0x70>)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6013      	str	r3, [r2, #0]
 8000db0:	e007      	b.n	8000dc2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	73fb      	strb	r3, [r7, #15]
 8000db6:	e004      	b.n	8000dc2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	73fb      	strb	r3, [r7, #15]
 8000dbc:	e001      	b.n	8000dc2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000008 	.word	0x20000008
 8000dd0:	20000000 	.word	0x20000000
 8000dd4:	20000004 	.word	0x20000004

08000dd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <HAL_IncTick+0x1c>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <HAL_IncTick+0x20>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4413      	add	r3, r2
 8000de6:	4a03      	ldr	r2, [pc, #12]	; (8000df4 <HAL_IncTick+0x1c>)
 8000de8:	6013      	str	r3, [r2, #0]
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	2000021c 	.word	0x2000021c
 8000df8:	20000008 	.word	0x20000008

08000dfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000e00:	4b03      	ldr	r3, [pc, #12]	; (8000e10 <HAL_GetTick+0x14>)
 8000e02:	681b      	ldr	r3, [r3, #0]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	2000021c 	.word	0x2000021c

08000e14 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	431a      	orrs	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	b083      	sub	sp, #12
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
 8000e42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	431a      	orrs	r2, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	609a      	str	r2, [r3, #8]
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b087      	sub	sp, #28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
 8000e88:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	3360      	adds	r3, #96	; 0x60
 8000e8e:	461a      	mov	r2, r3
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	4413      	add	r3, r2
 8000e96:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <LL_ADC_SetOffset+0x44>)
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000ea6:	683a      	ldr	r2, [r7, #0]
 8000ea8:	430a      	orrs	r2, r1
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000eb4:	bf00      	nop
 8000eb6:	371c      	adds	r7, #28
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	03fff000 	.word	0x03fff000

08000ec4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	3360      	adds	r3, #96	; 0x60
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	4413      	add	r3, r2
 8000eda:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b087      	sub	sp, #28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	3360      	adds	r3, #96	; 0x60
 8000f00:	461a      	mov	r2, r3
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	4413      	add	r3, r2
 8000f08:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	431a      	orrs	r2, r3
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000f1a:	bf00      	nop
 8000f1c:	371c      	adds	r7, #28
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000f26:	b480      	push	{r7}
 8000f28:	b087      	sub	sp, #28
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	60f8      	str	r0, [r7, #12]
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	3360      	adds	r3, #96	; 0x60
 8000f36:	461a      	mov	r2, r3
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	4413      	add	r3, r2
 8000f3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	431a      	orrs	r2, r3
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000f50:	bf00      	nop
 8000f52:	371c      	adds	r7, #28
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b087      	sub	sp, #28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	3360      	adds	r3, #96	; 0x60
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	4413      	add	r3, r2
 8000f74:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	431a      	orrs	r2, r3
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000f86:	bf00      	nop
 8000f88:	371c      	adds	r7, #28
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
 8000f9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	695b      	ldr	r3, [r3, #20]
 8000fa0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	431a      	orrs	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	615a      	str	r2, [r3, #20]
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d101      	bne.n	8000fd0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e000      	b.n	8000fd2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b087      	sub	sp, #28
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	60f8      	str	r0, [r7, #12]
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	3330      	adds	r3, #48	; 0x30
 8000fee:	461a      	mov	r2, r3
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	0a1b      	lsrs	r3, r3, #8
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	f003 030c 	and.w	r3, r3, #12
 8000ffa:	4413      	add	r3, r2
 8000ffc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	f003 031f 	and.w	r3, r3, #31
 8001008:	211f      	movs	r1, #31
 800100a:	fa01 f303 	lsl.w	r3, r1, r3
 800100e:	43db      	mvns	r3, r3
 8001010:	401a      	ands	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	0e9b      	lsrs	r3, r3, #26
 8001016:	f003 011f 	and.w	r1, r3, #31
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	f003 031f 	and.w	r3, r3, #31
 8001020:	fa01 f303 	lsl.w	r3, r1, r3
 8001024:	431a      	orrs	r2, r3
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800102a:	bf00      	nop
 800102c:	371c      	adds	r7, #28
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001036:	b480      	push	{r7}
 8001038:	b087      	sub	sp, #28
 800103a:	af00      	add	r7, sp, #0
 800103c:	60f8      	str	r0, [r7, #12]
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	3314      	adds	r3, #20
 8001046:	461a      	mov	r2, r3
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	0e5b      	lsrs	r3, r3, #25
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	f003 0304 	and.w	r3, r3, #4
 8001052:	4413      	add	r3, r2
 8001054:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	0d1b      	lsrs	r3, r3, #20
 800105e:	f003 031f 	and.w	r3, r3, #31
 8001062:	2107      	movs	r1, #7
 8001064:	fa01 f303 	lsl.w	r3, r1, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	401a      	ands	r2, r3
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	0d1b      	lsrs	r3, r3, #20
 8001070:	f003 031f 	and.w	r3, r3, #31
 8001074:	6879      	ldr	r1, [r7, #4]
 8001076:	fa01 f303 	lsl.w	r3, r1, r3
 800107a:	431a      	orrs	r2, r3
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001080:	bf00      	nop
 8001082:	371c      	adds	r7, #28
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4a0f      	ldr	r2, [pc, #60]	; (80010d8 <LL_ADC_SetChannelSingleDiff+0x4c>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d10a      	bne.n	80010b6 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010ac:	431a      	orrs	r2, r3
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80010b4:	e00a      	b.n	80010cc <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010c2:	43db      	mvns	r3, r3
 80010c4:	401a      	ands	r2, r3
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80010cc:	bf00      	nop
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	407f0000 	.word	0x407f0000

080010dc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	f003 031f 	and.w	r3, r3, #31
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001108:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	6093      	str	r3, [r2, #8]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800112c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001130:	d101      	bne.n	8001136 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001132:	2301      	movs	r3, #1
 8001134:	e000      	b.n	8001138 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001136:	2300      	movs	r3, #0
}
 8001138:	4618      	mov	r0, r3
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001154:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001158:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001180:	d101      	bne.n	8001186 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001182:	2301      	movs	r3, #1
 8001184:	e000      	b.n	8001188 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001186:	2300      	movs	r3, #0
}
 8001188:	4618      	mov	r0, r3
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011a8:	f043 0201 	orr.w	r2, r3, #1
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	f003 0301 	and.w	r3, r3, #1
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d101      	bne.n	80011d4 <LL_ADC_IsEnabled+0x18>
 80011d0:	2301      	movs	r3, #1
 80011d2:	e000      	b.n	80011d6 <LL_ADC_IsEnabled+0x1a>
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011f2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011f6:	f043 0204 	orr.w	r2, r3, #4
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800120a:	b480      	push	{r7}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 0304 	and.w	r3, r3, #4
 800121a:	2b04      	cmp	r3, #4
 800121c:	d101      	bne.n	8001222 <LL_ADC_REG_IsConversionOngoing+0x18>
 800121e:	2301      	movs	r3, #1
 8001220:	e000      	b.n	8001224 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001222:	2300      	movs	r3, #0
}
 8001224:	4618      	mov	r0, r3
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f003 0308 	and.w	r3, r3, #8
 8001240:	2b08      	cmp	r3, #8
 8001242:	d101      	bne.n	8001248 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001244:	2301      	movs	r3, #1
 8001246:	e000      	b.n	800124a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
	...

08001258 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001258:	b590      	push	{r4, r7, lr}
 800125a:	b089      	sub	sp, #36	; 0x24
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001260:	2300      	movs	r3, #0
 8001262:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001264:	2300      	movs	r3, #0
 8001266:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d101      	bne.n	8001272 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e177      	b.n	8001562 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800127c:	2b00      	cmp	r3, #0
 800127e:	d109      	bne.n	8001294 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff fb8f 	bl	80009a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff3f 	bl	800111c <LL_ADC_IsDeepPowerDownEnabled>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d004      	beq.n	80012ae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff25 	bl	80010f8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff ff5a 	bl	800116c <LL_ADC_IsInternalRegulatorEnabled>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d115      	bne.n	80012ea <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff ff3e 	bl	8001144 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80012c8:	4b9c      	ldr	r3, [pc, #624]	; (800153c <HAL_ADC_Init+0x2e4>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	099b      	lsrs	r3, r3, #6
 80012ce:	4a9c      	ldr	r2, [pc, #624]	; (8001540 <HAL_ADC_Init+0x2e8>)
 80012d0:	fba2 2303 	umull	r2, r3, r2, r3
 80012d4:	099b      	lsrs	r3, r3, #6
 80012d6:	3301      	adds	r3, #1
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80012dc:	e002      	b.n	80012e4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	3b01      	subs	r3, #1
 80012e2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1f9      	bne.n	80012de <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff ff3c 	bl	800116c <LL_ADC_IsInternalRegulatorEnabled>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d10d      	bne.n	8001316 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012fe:	f043 0210 	orr.w	r2, r3, #16
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800130a:	f043 0201 	orr.w	r2, r3, #1
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff ff75 	bl	800120a <LL_ADC_REG_IsConversionOngoing>
 8001320:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001326:	f003 0310 	and.w	r3, r3, #16
 800132a:	2b00      	cmp	r3, #0
 800132c:	f040 8110 	bne.w	8001550 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	2b00      	cmp	r3, #0
 8001334:	f040 810c 	bne.w	8001550 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800133c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001340:	f043 0202 	orr.w	r2, r3, #2
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff35 	bl	80011bc <LL_ADC_IsEnabled>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d111      	bne.n	800137c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001358:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800135c:	f7ff ff2e 	bl	80011bc <LL_ADC_IsEnabled>
 8001360:	4604      	mov	r4, r0
 8001362:	4878      	ldr	r0, [pc, #480]	; (8001544 <HAL_ADC_Init+0x2ec>)
 8001364:	f7ff ff2a 	bl	80011bc <LL_ADC_IsEnabled>
 8001368:	4603      	mov	r3, r0
 800136a:	4323      	orrs	r3, r4
 800136c:	2b00      	cmp	r3, #0
 800136e:	d105      	bne.n	800137c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	4619      	mov	r1, r3
 8001376:	4874      	ldr	r0, [pc, #464]	; (8001548 <HAL_ADC_Init+0x2f0>)
 8001378:	f7ff fd4c 	bl	8000e14 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	7f5b      	ldrb	r3, [r3, #29]
 8001380:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001386:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800138c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001392:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800139a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d106      	bne.n	80013b8 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ae:	3b01      	subs	r3, #1
 80013b0:	045b      	lsls	r3, r3, #17
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d009      	beq.n	80013d4 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013cc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	68da      	ldr	r2, [r3, #12]
 80013da:	4b5c      	ldr	r3, [pc, #368]	; (800154c <HAL_ADC_Init+0x2f4>)
 80013dc:	4013      	ands	r3, r2
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	6812      	ldr	r2, [r2, #0]
 80013e2:	69b9      	ldr	r1, [r7, #24]
 80013e4:	430b      	orrs	r3, r1
 80013e6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	430a      	orrs	r2, r1
 80013fc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff ff01 	bl	800120a <LL_ADC_REG_IsConversionOngoing>
 8001408:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff ff0e 	bl	8001230 <LL_ADC_INJ_IsConversionOngoing>
 8001414:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d16d      	bne.n	80014f8 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d16a      	bne.n	80014f8 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001426:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800142e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001430:	4313      	orrs	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800143e:	f023 0302 	bic.w	r3, r3, #2
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	6812      	ldr	r2, [r2, #0]
 8001446:	69b9      	ldr	r1, [r7, #24]
 8001448:	430b      	orrs	r3, r1
 800144a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d017      	beq.n	8001484 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	691a      	ldr	r2, [r3, #16]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001462:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800146c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001470:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	6911      	ldr	r1, [r2, #16]
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	6812      	ldr	r2, [r2, #0]
 800147c:	430b      	orrs	r3, r1
 800147e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001482:	e013      	b.n	80014ac <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	691a      	ldr	r2, [r3, #16]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001492:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	6812      	ldr	r2, [r2, #0]
 80014a0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80014a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014a8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d118      	bne.n	80014e8 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80014c0:	f023 0304 	bic.w	r3, r3, #4
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80014cc:	4311      	orrs	r1, r2
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80014d2:	4311      	orrs	r1, r2
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80014d8:	430a      	orrs	r2, r1
 80014da:	431a      	orrs	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f042 0201 	orr.w	r2, r2, #1
 80014e4:	611a      	str	r2, [r3, #16]
 80014e6:	e007      	b.n	80014f8 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	691a      	ldr	r2, [r3, #16]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f022 0201 	bic.w	r2, r2, #1
 80014f6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	695b      	ldr	r3, [r3, #20]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d10c      	bne.n	800151a <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f023 010f 	bic.w	r1, r3, #15
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a1b      	ldr	r3, [r3, #32]
 800150e:	1e5a      	subs	r2, r3, #1
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	430a      	orrs	r2, r1
 8001516:	631a      	str	r2, [r3, #48]	; 0x30
 8001518:	e007      	b.n	800152a <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f022 020f 	bic.w	r2, r2, #15
 8001528:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800152e:	f023 0303 	bic.w	r3, r3, #3
 8001532:	f043 0201 	orr.w	r2, r3, #1
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	65da      	str	r2, [r3, #92]	; 0x5c
 800153a:	e011      	b.n	8001560 <HAL_ADC_Init+0x308>
 800153c:	20000000 	.word	0x20000000
 8001540:	053e2d63 	.word	0x053e2d63
 8001544:	50000100 	.word	0x50000100
 8001548:	50000300 	.word	0x50000300
 800154c:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001554:	f043 0210 	orr.w	r2, r3, #16
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001560:	7ffb      	ldrb	r3, [r7, #31]
}
 8001562:	4618      	mov	r0, r3
 8001564:	3724      	adds	r7, #36	; 0x24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd90      	pop	{r4, r7, pc}
 800156a:	bf00      	nop

0800156c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001578:	4851      	ldr	r0, [pc, #324]	; (80016c0 <HAL_ADC_Start_DMA+0x154>)
 800157a:	f7ff fdaf 	bl	80010dc <LL_ADC_GetMultimode>
 800157e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fe40 	bl	800120a <LL_ADC_REG_IsConversionOngoing>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	f040 808f 	bne.w	80016b0 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001598:	2b01      	cmp	r3, #1
 800159a:	d101      	bne.n	80015a0 <HAL_ADC_Start_DMA+0x34>
 800159c:	2302      	movs	r3, #2
 800159e:	e08a      	b.n	80016b6 <HAL_ADC_Start_DMA+0x14a>
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2201      	movs	r2, #1
 80015a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d005      	beq.n	80015ba <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	2b05      	cmp	r3, #5
 80015b2:	d002      	beq.n	80015ba <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	2b09      	cmp	r3, #9
 80015b8:	d173      	bne.n	80016a2 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80015ba:	68f8      	ldr	r0, [r7, #12]
 80015bc:	f000 fc8e 	bl	8001edc <ADC_Enable>
 80015c0:	4603      	mov	r3, r0
 80015c2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80015c4:	7dfb      	ldrb	r3, [r7, #23]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d166      	bne.n	8001698 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80015d2:	f023 0301 	bic.w	r3, r3, #1
 80015d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a38      	ldr	r2, [pc, #224]	; (80016c4 <HAL_ADC_Start_DMA+0x158>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d002      	beq.n	80015ee <HAL_ADC_Start_DMA+0x82>
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	e001      	b.n	80015f2 <HAL_ADC_Start_DMA+0x86>
 80015ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	6812      	ldr	r2, [r2, #0]
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d002      	beq.n	8001600 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d105      	bne.n	800160c <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001604:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001610:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d006      	beq.n	8001626 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800161c:	f023 0206 	bic.w	r2, r3, #6
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	661a      	str	r2, [r3, #96]	; 0x60
 8001624:	e002      	b.n	800162c <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2200      	movs	r2, #0
 800162a:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001630:	4a25      	ldr	r2, [pc, #148]	; (80016c8 <HAL_ADC_Start_DMA+0x15c>)
 8001632:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001638:	4a24      	ldr	r2, [pc, #144]	; (80016cc <HAL_ADC_Start_DMA+0x160>)
 800163a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001640:	4a23      	ldr	r2, [pc, #140]	; (80016d0 <HAL_ADC_Start_DMA+0x164>)
 8001642:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	221c      	movs	r2, #28
 800164a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f042 0210 	orr.w	r2, r2, #16
 8001662:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	68da      	ldr	r2, [r3, #12]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f042 0201 	orr.w	r2, r2, #1
 8001672:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	3340      	adds	r3, #64	; 0x40
 800167e:	4619      	mov	r1, r3
 8001680:	68ba      	ldr	r2, [r7, #8]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f000 fed8 	bl	8002438 <HAL_DMA_Start_IT>
 8001688:	4603      	mov	r3, r0
 800168a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fda6 	bl	80011e2 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001696:	e00d      	b.n	80016b4 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80016a0:	e008      	b.n	80016b4 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80016ae:	e001      	b.n	80016b4 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80016b0:	2302      	movs	r3, #2
 80016b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80016b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3718      	adds	r7, #24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	50000300 	.word	0x50000300
 80016c4:	50000100 	.word	0x50000100
 80016c8:	08001fa1 	.word	0x08001fa1
 80016cc:	08002079 	.word	0x08002079
 80016d0:	08002095 	.word	0x08002095

080016d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b0b6      	sub	sp, #216	; 0xd8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001706:	2300      	movs	r3, #0
 8001708:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800170c:	2300      	movs	r3, #0
 800170e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001716:	2b01      	cmp	r3, #1
 8001718:	d101      	bne.n	800171e <HAL_ADC_ConfigChannel+0x22>
 800171a:	2302      	movs	r3, #2
 800171c:	e3c8      	b.n	8001eb0 <HAL_ADC_ConfigChannel+0x7b4>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2201      	movs	r2, #1
 8001722:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff fd6d 	bl	800120a <LL_ADC_REG_IsConversionOngoing>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	f040 83ad 	bne.w	8001e92 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6818      	ldr	r0, [r3, #0]
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	6859      	ldr	r1, [r3, #4]
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	461a      	mov	r2, r3
 8001746:	f7ff fc4a 	bl	8000fde <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fd5b 	bl	800120a <LL_ADC_REG_IsConversionOngoing>
 8001754:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fd67 	bl	8001230 <LL_ADC_INJ_IsConversionOngoing>
 8001762:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001766:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800176a:	2b00      	cmp	r3, #0
 800176c:	f040 81d9 	bne.w	8001b22 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001770:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001774:	2b00      	cmp	r3, #0
 8001776:	f040 81d4 	bne.w	8001b22 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001782:	d10f      	bne.n	80017a4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6818      	ldr	r0, [r3, #0]
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2200      	movs	r2, #0
 800178e:	4619      	mov	r1, r3
 8001790:	f7ff fc51 	bl	8001036 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff fbf8 	bl	8000f92 <LL_ADC_SetSamplingTimeCommonConfig>
 80017a2:	e00e      	b.n	80017c2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6818      	ldr	r0, [r3, #0]
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	6819      	ldr	r1, [r3, #0]
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	461a      	mov	r2, r3
 80017b2:	f7ff fc40 	bl	8001036 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2100      	movs	r1, #0
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fbe8 	bl	8000f92 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	695a      	ldr	r2, [r3, #20]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	08db      	lsrs	r3, r3, #3
 80017ce:	f003 0303 	and.w	r3, r3, #3
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	691b      	ldr	r3, [r3, #16]
 80017e0:	2b04      	cmp	r3, #4
 80017e2:	d022      	beq.n	800182a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6818      	ldr	r0, [r3, #0]
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	6919      	ldr	r1, [r3, #16]
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80017f4:	f7ff fb42 	bl	8000e7c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6818      	ldr	r0, [r3, #0]
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	6919      	ldr	r1, [r3, #16]
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	461a      	mov	r2, r3
 8001806:	f7ff fb8e 	bl	8000f26 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6818      	ldr	r0, [r3, #0]
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	6919      	ldr	r1, [r3, #16]
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	7f1b      	ldrb	r3, [r3, #28]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d102      	bne.n	8001820 <HAL_ADC_ConfigChannel+0x124>
 800181a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800181e:	e000      	b.n	8001822 <HAL_ADC_ConfigChannel+0x126>
 8001820:	2300      	movs	r3, #0
 8001822:	461a      	mov	r2, r3
 8001824:	f7ff fb9a 	bl	8000f5c <LL_ADC_SetOffsetSaturation>
 8001828:	e17b      	b.n	8001b22 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2100      	movs	r1, #0
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff fb47 	bl	8000ec4 <LL_ADC_GetOffsetChannel>
 8001836:	4603      	mov	r3, r0
 8001838:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800183c:	2b00      	cmp	r3, #0
 800183e:	d10a      	bne.n	8001856 <HAL_ADC_ConfigChannel+0x15a>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2100      	movs	r1, #0
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fb3c 	bl	8000ec4 <LL_ADC_GetOffsetChannel>
 800184c:	4603      	mov	r3, r0
 800184e:	0e9b      	lsrs	r3, r3, #26
 8001850:	f003 021f 	and.w	r2, r3, #31
 8001854:	e01e      	b.n	8001894 <HAL_ADC_ConfigChannel+0x198>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2100      	movs	r1, #0
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff fb31 	bl	8000ec4 <LL_ADC_GetOffsetChannel>
 8001862:	4603      	mov	r3, r0
 8001864:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001868:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800186c:	fa93 f3a3 	rbit	r3, r3
 8001870:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001874:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001878:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800187c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d101      	bne.n	8001888 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001884:	2320      	movs	r3, #32
 8001886:	e004      	b.n	8001892 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001888:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800188c:	fab3 f383 	clz	r3, r3
 8001890:	b2db      	uxtb	r3, r3
 8001892:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800189c:	2b00      	cmp	r3, #0
 800189e:	d105      	bne.n	80018ac <HAL_ADC_ConfigChannel+0x1b0>
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	0e9b      	lsrs	r3, r3, #26
 80018a6:	f003 031f 	and.w	r3, r3, #31
 80018aa:	e018      	b.n	80018de <HAL_ADC_ConfigChannel+0x1e2>
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80018b8:	fa93 f3a3 	rbit	r3, r3
 80018bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80018c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80018c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80018d0:	2320      	movs	r3, #32
 80018d2:	e004      	b.n	80018de <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80018d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80018d8:	fab3 f383 	clz	r3, r3
 80018dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80018de:	429a      	cmp	r2, r3
 80018e0:	d106      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2200      	movs	r2, #0
 80018e8:	2100      	movs	r1, #0
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff fb00 	bl	8000ef0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2101      	movs	r1, #1
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff fae4 	bl	8000ec4 <LL_ADC_GetOffsetChannel>
 80018fc:	4603      	mov	r3, r0
 80018fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001902:	2b00      	cmp	r3, #0
 8001904:	d10a      	bne.n	800191c <HAL_ADC_ConfigChannel+0x220>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2101      	movs	r1, #1
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff fad9 	bl	8000ec4 <LL_ADC_GetOffsetChannel>
 8001912:	4603      	mov	r3, r0
 8001914:	0e9b      	lsrs	r3, r3, #26
 8001916:	f003 021f 	and.w	r2, r3, #31
 800191a:	e01e      	b.n	800195a <HAL_ADC_ConfigChannel+0x25e>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2101      	movs	r1, #1
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff face 	bl	8000ec4 <LL_ADC_GetOffsetChannel>
 8001928:	4603      	mov	r3, r0
 800192a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001932:	fa93 f3a3 	rbit	r3, r3
 8001936:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800193a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800193e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001942:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001946:	2b00      	cmp	r3, #0
 8001948:	d101      	bne.n	800194e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800194a:	2320      	movs	r3, #32
 800194c:	e004      	b.n	8001958 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800194e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001952:	fab3 f383 	clz	r3, r3
 8001956:	b2db      	uxtb	r3, r3
 8001958:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001962:	2b00      	cmp	r3, #0
 8001964:	d105      	bne.n	8001972 <HAL_ADC_ConfigChannel+0x276>
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	0e9b      	lsrs	r3, r3, #26
 800196c:	f003 031f 	and.w	r3, r3, #31
 8001970:	e018      	b.n	80019a4 <HAL_ADC_ConfigChannel+0x2a8>
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800197e:	fa93 f3a3 	rbit	r3, r3
 8001982:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001986:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800198a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800198e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001996:	2320      	movs	r3, #32
 8001998:	e004      	b.n	80019a4 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800199a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800199e:	fab3 f383 	clz	r3, r3
 80019a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d106      	bne.n	80019b6 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2200      	movs	r2, #0
 80019ae:	2101      	movs	r1, #1
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff fa9d 	bl	8000ef0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2102      	movs	r1, #2
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff fa81 	bl	8000ec4 <LL_ADC_GetOffsetChannel>
 80019c2:	4603      	mov	r3, r0
 80019c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d10a      	bne.n	80019e2 <HAL_ADC_ConfigChannel+0x2e6>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2102      	movs	r1, #2
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff fa76 	bl	8000ec4 <LL_ADC_GetOffsetChannel>
 80019d8:	4603      	mov	r3, r0
 80019da:	0e9b      	lsrs	r3, r3, #26
 80019dc:	f003 021f 	and.w	r2, r3, #31
 80019e0:	e01e      	b.n	8001a20 <HAL_ADC_ConfigChannel+0x324>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2102      	movs	r1, #2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff fa6b 	bl	8000ec4 <LL_ADC_GetOffsetChannel>
 80019ee:	4603      	mov	r3, r0
 80019f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019f8:	fa93 f3a3 	rbit	r3, r3
 80019fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001a00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001a08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d101      	bne.n	8001a14 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001a10:	2320      	movs	r3, #32
 8001a12:	e004      	b.n	8001a1e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001a14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a18:	fab3 f383 	clz	r3, r3
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d105      	bne.n	8001a38 <HAL_ADC_ConfigChannel+0x33c>
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	0e9b      	lsrs	r3, r3, #26
 8001a32:	f003 031f 	and.w	r3, r3, #31
 8001a36:	e016      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x36a>
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a44:	fa93 f3a3 	rbit	r3, r3
 8001a48:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001a4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001a50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8001a58:	2320      	movs	r3, #32
 8001a5a:	e004      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001a5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a60:	fab3 f383 	clz	r3, r3
 8001a64:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d106      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	2102      	movs	r1, #2
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fa3c 	bl	8000ef0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2103      	movs	r1, #3
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff fa20 	bl	8000ec4 <LL_ADC_GetOffsetChannel>
 8001a84:	4603      	mov	r3, r0
 8001a86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d10a      	bne.n	8001aa4 <HAL_ADC_ConfigChannel+0x3a8>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2103      	movs	r1, #3
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff fa15 	bl	8000ec4 <LL_ADC_GetOffsetChannel>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	0e9b      	lsrs	r3, r3, #26
 8001a9e:	f003 021f 	and.w	r2, r3, #31
 8001aa2:	e017      	b.n	8001ad4 <HAL_ADC_ConfigChannel+0x3d8>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2103      	movs	r1, #3
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff fa0a 	bl	8000ec4 <LL_ADC_GetOffsetChannel>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ab6:	fa93 f3a3 	rbit	r3, r3
 8001aba:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001abc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001abe:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001ac0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8001ac6:	2320      	movs	r3, #32
 8001ac8:	e003      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001aca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001acc:	fab3 f383 	clz	r3, r3
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d105      	bne.n	8001aec <HAL_ADC_ConfigChannel+0x3f0>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	0e9b      	lsrs	r3, r3, #26
 8001ae6:	f003 031f 	and.w	r3, r3, #31
 8001aea:	e011      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x414>
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001af4:	fa93 f3a3 	rbit	r3, r3
 8001af8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001afa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001afc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8001b04:	2320      	movs	r3, #32
 8001b06:	e003      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8001b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b0a:	fab3 f383 	clz	r3, r3
 8001b0e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d106      	bne.n	8001b22 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2103      	movs	r1, #3
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff f9e7 	bl	8000ef0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fb48 	bl	80011bc <LL_ADC_IsEnabled>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f040 8140 	bne.w	8001db4 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6818      	ldr	r0, [r3, #0]
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	6819      	ldr	r1, [r3, #0]
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	461a      	mov	r2, r3
 8001b42:	f7ff faa3 	bl	800108c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	4a8f      	ldr	r2, [pc, #572]	; (8001d88 <HAL_ADC_ConfigChannel+0x68c>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	f040 8131 	bne.w	8001db4 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10b      	bne.n	8001b7a <HAL_ADC_ConfigChannel+0x47e>
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	0e9b      	lsrs	r3, r3, #26
 8001b68:	3301      	adds	r3, #1
 8001b6a:	f003 031f 	and.w	r3, r3, #31
 8001b6e:	2b09      	cmp	r3, #9
 8001b70:	bf94      	ite	ls
 8001b72:	2301      	movls	r3, #1
 8001b74:	2300      	movhi	r3, #0
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	e019      	b.n	8001bae <HAL_ADC_ConfigChannel+0x4b2>
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b82:	fa93 f3a3 	rbit	r3, r3
 8001b86:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001b88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b8a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001b8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8001b92:	2320      	movs	r3, #32
 8001b94:	e003      	b.n	8001b9e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8001b96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b98:	fab3 f383 	clz	r3, r3
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	f003 031f 	and.w	r3, r3, #31
 8001ba4:	2b09      	cmp	r3, #9
 8001ba6:	bf94      	ite	ls
 8001ba8:	2301      	movls	r3, #1
 8001baa:	2300      	movhi	r3, #0
 8001bac:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d079      	beq.n	8001ca6 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d107      	bne.n	8001bce <HAL_ADC_ConfigChannel+0x4d2>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	0e9b      	lsrs	r3, r3, #26
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	069b      	lsls	r3, r3, #26
 8001bc8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bcc:	e015      	b.n	8001bfa <HAL_ADC_ConfigChannel+0x4fe>
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bd6:	fa93 f3a3 	rbit	r3, r3
 8001bda:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bde:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001be0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8001be6:	2320      	movs	r3, #32
 8001be8:	e003      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8001bea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bec:	fab3 f383 	clz	r3, r3
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	069b      	lsls	r3, r3, #26
 8001bf6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d109      	bne.n	8001c1a <HAL_ADC_ConfigChannel+0x51e>
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	0e9b      	lsrs	r3, r3, #26
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	f003 031f 	and.w	r3, r3, #31
 8001c12:	2101      	movs	r1, #1
 8001c14:	fa01 f303 	lsl.w	r3, r1, r3
 8001c18:	e017      	b.n	8001c4a <HAL_ADC_ConfigChannel+0x54e>
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c22:	fa93 f3a3 	rbit	r3, r3
 8001c26:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001c28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c2a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001c2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8001c32:	2320      	movs	r3, #32
 8001c34:	e003      	b.n	8001c3e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8001c36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c38:	fab3 f383 	clz	r3, r3
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	3301      	adds	r3, #1
 8001c40:	f003 031f 	and.w	r3, r3, #31
 8001c44:	2101      	movs	r1, #1
 8001c46:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4a:	ea42 0103 	orr.w	r1, r2, r3
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d10a      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x574>
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	0e9b      	lsrs	r3, r3, #26
 8001c60:	3301      	adds	r3, #1
 8001c62:	f003 021f 	and.w	r2, r3, #31
 8001c66:	4613      	mov	r3, r2
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	4413      	add	r3, r2
 8001c6c:	051b      	lsls	r3, r3, #20
 8001c6e:	e018      	b.n	8001ca2 <HAL_ADC_ConfigChannel+0x5a6>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c78:	fa93 f3a3 	rbit	r3, r3
 8001c7c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c80:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8001c88:	2320      	movs	r3, #32
 8001c8a:	e003      	b.n	8001c94 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8001c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c8e:	fab3 f383 	clz	r3, r3
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	3301      	adds	r3, #1
 8001c96:	f003 021f 	and.w	r2, r3, #31
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	4413      	add	r3, r2
 8001ca0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ca2:	430b      	orrs	r3, r1
 8001ca4:	e081      	b.n	8001daa <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d107      	bne.n	8001cc2 <HAL_ADC_ConfigChannel+0x5c6>
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	0e9b      	lsrs	r3, r3, #26
 8001cb8:	3301      	adds	r3, #1
 8001cba:	069b      	lsls	r3, r3, #26
 8001cbc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cc0:	e015      	b.n	8001cee <HAL_ADC_ConfigChannel+0x5f2>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cca:	fa93 f3a3 	rbit	r3, r3
 8001cce:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8001cda:	2320      	movs	r3, #32
 8001cdc:	e003      	b.n	8001ce6 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8001cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce0:	fab3 f383 	clz	r3, r3
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	069b      	lsls	r3, r3, #26
 8001cea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d109      	bne.n	8001d0e <HAL_ADC_ConfigChannel+0x612>
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	0e9b      	lsrs	r3, r3, #26
 8001d00:	3301      	adds	r3, #1
 8001d02:	f003 031f 	and.w	r3, r3, #31
 8001d06:	2101      	movs	r1, #1
 8001d08:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0c:	e017      	b.n	8001d3e <HAL_ADC_ConfigChannel+0x642>
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d14:	6a3b      	ldr	r3, [r7, #32]
 8001d16:	fa93 f3a3 	rbit	r3, r3
 8001d1a:	61fb      	str	r3, [r7, #28]
  return result;
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8001d26:	2320      	movs	r3, #32
 8001d28:	e003      	b.n	8001d32 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	fab3 f383 	clz	r3, r3
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	3301      	adds	r3, #1
 8001d34:	f003 031f 	and.w	r3, r3, #31
 8001d38:	2101      	movs	r1, #1
 8001d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3e:	ea42 0103 	orr.w	r1, r2, r3
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d10d      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x66e>
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	0e9b      	lsrs	r3, r3, #26
 8001d54:	3301      	adds	r3, #1
 8001d56:	f003 021f 	and.w	r2, r3, #31
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	4413      	add	r3, r2
 8001d60:	3b1e      	subs	r3, #30
 8001d62:	051b      	lsls	r3, r3, #20
 8001d64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d68:	e01e      	b.n	8001da8 <HAL_ADC_ConfigChannel+0x6ac>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	fa93 f3a3 	rbit	r3, r3
 8001d76:	613b      	str	r3, [r7, #16]
  return result;
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d104      	bne.n	8001d8c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8001d82:	2320      	movs	r3, #32
 8001d84:	e006      	b.n	8001d94 <HAL_ADC_ConfigChannel+0x698>
 8001d86:	bf00      	nop
 8001d88:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	fab3 f383 	clz	r3, r3
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	3301      	adds	r3, #1
 8001d96:	f003 021f 	and.w	r2, r3, #31
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	4413      	add	r3, r2
 8001da0:	3b1e      	subs	r3, #30
 8001da2:	051b      	lsls	r3, r3, #20
 8001da4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001da8:	430b      	orrs	r3, r1
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	6892      	ldr	r2, [r2, #8]
 8001dae:	4619      	mov	r1, r3
 8001db0:	f7ff f941 	bl	8001036 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	4b3f      	ldr	r3, [pc, #252]	; (8001eb8 <HAL_ADC_ConfigChannel+0x7bc>)
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d071      	beq.n	8001ea4 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001dc0:	483e      	ldr	r0, [pc, #248]	; (8001ebc <HAL_ADC_ConfigChannel+0x7c0>)
 8001dc2:	f7ff f84d 	bl	8000e60 <LL_ADC_GetCommonPathInternalCh>
 8001dc6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a3c      	ldr	r2, [pc, #240]	; (8001ec0 <HAL_ADC_ConfigChannel+0x7c4>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d004      	beq.n	8001dde <HAL_ADC_ConfigChannel+0x6e2>
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a3a      	ldr	r2, [pc, #232]	; (8001ec4 <HAL_ADC_ConfigChannel+0x7c8>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d127      	bne.n	8001e2e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001dde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001de2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d121      	bne.n	8001e2e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001df2:	d157      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001df4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001df8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	482f      	ldr	r0, [pc, #188]	; (8001ebc <HAL_ADC_ConfigChannel+0x7c0>)
 8001e00:	f7ff f81b 	bl	8000e3a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e04:	4b30      	ldr	r3, [pc, #192]	; (8001ec8 <HAL_ADC_ConfigChannel+0x7cc>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	099b      	lsrs	r3, r3, #6
 8001e0a:	4a30      	ldr	r2, [pc, #192]	; (8001ecc <HAL_ADC_ConfigChannel+0x7d0>)
 8001e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e10:	099b      	lsrs	r3, r3, #6
 8001e12:	1c5a      	adds	r2, r3, #1
 8001e14:	4613      	mov	r3, r2
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	4413      	add	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e1e:	e002      	b.n	8001e26 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1f9      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e2c:	e03a      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a27      	ldr	r2, [pc, #156]	; (8001ed0 <HAL_ADC_ConfigChannel+0x7d4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d113      	bne.n	8001e60 <HAL_ADC_ConfigChannel+0x764>
 8001e38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d10d      	bne.n	8001e60 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a22      	ldr	r2, [pc, #136]	; (8001ed4 <HAL_ADC_ConfigChannel+0x7d8>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d02a      	beq.n	8001ea4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e56:	4619      	mov	r1, r3
 8001e58:	4818      	ldr	r0, [pc, #96]	; (8001ebc <HAL_ADC_ConfigChannel+0x7c0>)
 8001e5a:	f7fe ffee 	bl	8000e3a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e5e:	e021      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a1c      	ldr	r2, [pc, #112]	; (8001ed8 <HAL_ADC_ConfigChannel+0x7dc>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d11c      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d116      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a16      	ldr	r2, [pc, #88]	; (8001ed4 <HAL_ADC_ConfigChannel+0x7d8>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d011      	beq.n	8001ea4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e88:	4619      	mov	r1, r3
 8001e8a:	480c      	ldr	r0, [pc, #48]	; (8001ebc <HAL_ADC_ConfigChannel+0x7c0>)
 8001e8c:	f7fe ffd5 	bl	8000e3a <LL_ADC_SetCommonPathInternalCh>
 8001e90:	e008      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e96:	f043 0220 	orr.w	r2, r3, #32
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001eac:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	37d8      	adds	r7, #216	; 0xd8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	80080000 	.word	0x80080000
 8001ebc:	50000300 	.word	0x50000300
 8001ec0:	c3210000 	.word	0xc3210000
 8001ec4:	90c00010 	.word	0x90c00010
 8001ec8:	20000000 	.word	0x20000000
 8001ecc:	053e2d63 	.word	0x053e2d63
 8001ed0:	c7520000 	.word	0xc7520000
 8001ed4:	50000100 	.word	0x50000100
 8001ed8:	cb840000 	.word	0xcb840000

08001edc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff f967 	bl	80011bc <LL_ADC_IsEnabled>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d14d      	bne.n	8001f90 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	4b28      	ldr	r3, [pc, #160]	; (8001f9c <ADC_Enable+0xc0>)
 8001efc:	4013      	ands	r3, r2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00d      	beq.n	8001f1e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f06:	f043 0210 	orr.w	r2, r3, #16
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f12:	f043 0201 	orr.w	r2, r3, #1
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e039      	b.n	8001f92 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff f936 	bl	8001194 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001f28:	f7fe ff68 	bl	8000dfc <HAL_GetTick>
 8001f2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f2e:	e028      	b.n	8001f82 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff f941 	bl	80011bc <LL_ADC_IsEnabled>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d104      	bne.n	8001f4a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff f925 	bl	8001194 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f4a:	f7fe ff57 	bl	8000dfc <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d914      	bls.n	8001f82 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d00d      	beq.n	8001f82 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6a:	f043 0210 	orr.w	r2, r3, #16
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f76:	f043 0201 	orr.w	r2, r3, #1
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e007      	b.n	8001f92 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d1cf      	bne.n	8001f30 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	8000003f 	.word	0x8000003f

08001fa0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fac:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d14b      	bne.n	8002052 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fbe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0308 	and.w	r3, r3, #8
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d021      	beq.n	8002018 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7fe ffed 	bl	8000fb8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d032      	beq.n	800204a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d12b      	bne.n	800204a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002002:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d11f      	bne.n	800204a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200e:	f043 0201 	orr.w	r2, r3, #1
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	65da      	str	r2, [r3, #92]	; 0x5c
 8002016:	e018      	b.n	800204a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d111      	bne.n	800204a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002036:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d105      	bne.n	800204a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002042:	f043 0201 	orr.w	r2, r3, #1
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f7fe fc56 	bl	80008fc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002050:	e00e      	b.n	8002070 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002056:	f003 0310 	and.w	r3, r3, #16
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f7ff fb42 	bl	80016e8 <HAL_ADC_ErrorCallback>
}
 8002064:	e004      	b.n	8002070 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	4798      	blx	r3
}
 8002070:	bf00      	nop
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002084:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f7ff fb24 	bl	80016d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800208c:	bf00      	nop
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020b2:	f043 0204 	orr.w	r2, r3, #4
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f7ff fb14 	bl	80016e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020c0:	bf00      	nop
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020d8:	4b0c      	ldr	r3, [pc, #48]	; (800210c <__NVIC_SetPriorityGrouping+0x44>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020e4:	4013      	ands	r3, r2
 80020e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020fa:	4a04      	ldr	r2, [pc, #16]	; (800210c <__NVIC_SetPriorityGrouping+0x44>)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	60d3      	str	r3, [r2, #12]
}
 8002100:	bf00      	nop
 8002102:	3714      	adds	r7, #20
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002114:	4b04      	ldr	r3, [pc, #16]	; (8002128 <__NVIC_GetPriorityGrouping+0x18>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	0a1b      	lsrs	r3, r3, #8
 800211a:	f003 0307 	and.w	r3, r3, #7
}
 800211e:	4618      	mov	r0, r3
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213a:	2b00      	cmp	r3, #0
 800213c:	db0b      	blt.n	8002156 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	f003 021f 	and.w	r2, r3, #31
 8002144:	4907      	ldr	r1, [pc, #28]	; (8002164 <__NVIC_EnableIRQ+0x38>)
 8002146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214a:	095b      	lsrs	r3, r3, #5
 800214c:	2001      	movs	r0, #1
 800214e:	fa00 f202 	lsl.w	r2, r0, r2
 8002152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	e000e100 	.word	0xe000e100

08002168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	6039      	str	r1, [r7, #0]
 8002172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002178:	2b00      	cmp	r3, #0
 800217a:	db0a      	blt.n	8002192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	b2da      	uxtb	r2, r3
 8002180:	490c      	ldr	r1, [pc, #48]	; (80021b4 <__NVIC_SetPriority+0x4c>)
 8002182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002186:	0112      	lsls	r2, r2, #4
 8002188:	b2d2      	uxtb	r2, r2
 800218a:	440b      	add	r3, r1
 800218c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002190:	e00a      	b.n	80021a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	b2da      	uxtb	r2, r3
 8002196:	4908      	ldr	r1, [pc, #32]	; (80021b8 <__NVIC_SetPriority+0x50>)
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	f003 030f 	and.w	r3, r3, #15
 800219e:	3b04      	subs	r3, #4
 80021a0:	0112      	lsls	r2, r2, #4
 80021a2:	b2d2      	uxtb	r2, r2
 80021a4:	440b      	add	r3, r1
 80021a6:	761a      	strb	r2, [r3, #24]
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	e000e100 	.word	0xe000e100
 80021b8:	e000ed00 	.word	0xe000ed00

080021bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021bc:	b480      	push	{r7}
 80021be:	b089      	sub	sp, #36	; 0x24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	f1c3 0307 	rsb	r3, r3, #7
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	bf28      	it	cs
 80021da:	2304      	movcs	r3, #4
 80021dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	3304      	adds	r3, #4
 80021e2:	2b06      	cmp	r3, #6
 80021e4:	d902      	bls.n	80021ec <NVIC_EncodePriority+0x30>
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	3b03      	subs	r3, #3
 80021ea:	e000      	b.n	80021ee <NVIC_EncodePriority+0x32>
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f0:	f04f 32ff 	mov.w	r2, #4294967295
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43da      	mvns	r2, r3
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	401a      	ands	r2, r3
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002204:	f04f 31ff 	mov.w	r1, #4294967295
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	fa01 f303 	lsl.w	r3, r1, r3
 800220e:	43d9      	mvns	r1, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002214:	4313      	orrs	r3, r2
         );
}
 8002216:	4618      	mov	r0, r3
 8002218:	3724      	adds	r7, #36	; 0x24
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
	...

08002224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3b01      	subs	r3, #1
 8002230:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002234:	d301      	bcc.n	800223a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002236:	2301      	movs	r3, #1
 8002238:	e00f      	b.n	800225a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800223a:	4a0a      	ldr	r2, [pc, #40]	; (8002264 <SysTick_Config+0x40>)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3b01      	subs	r3, #1
 8002240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002242:	210f      	movs	r1, #15
 8002244:	f04f 30ff 	mov.w	r0, #4294967295
 8002248:	f7ff ff8e 	bl	8002168 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800224c:	4b05      	ldr	r3, [pc, #20]	; (8002264 <SysTick_Config+0x40>)
 800224e:	2200      	movs	r2, #0
 8002250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002252:	4b04      	ldr	r3, [pc, #16]	; (8002264 <SysTick_Config+0x40>)
 8002254:	2207      	movs	r2, #7
 8002256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	e000e010 	.word	0xe000e010

08002268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f7ff ff29 	bl	80020c8 <__NVIC_SetPriorityGrouping>
}
 8002276:	bf00      	nop
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b086      	sub	sp, #24
 8002282:	af00      	add	r7, sp, #0
 8002284:	4603      	mov	r3, r0
 8002286:	60b9      	str	r1, [r7, #8]
 8002288:	607a      	str	r2, [r7, #4]
 800228a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800228c:	f7ff ff40 	bl	8002110 <__NVIC_GetPriorityGrouping>
 8002290:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	68b9      	ldr	r1, [r7, #8]
 8002296:	6978      	ldr	r0, [r7, #20]
 8002298:	f7ff ff90 	bl	80021bc <NVIC_EncodePriority>
 800229c:	4602      	mov	r2, r0
 800229e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022a2:	4611      	mov	r1, r2
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff ff5f 	bl	8002168 <__NVIC_SetPriority>
}
 80022aa:	bf00      	nop
 80022ac:	3718      	adds	r7, #24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b082      	sub	sp, #8
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	4603      	mov	r3, r0
 80022ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff ff33 	bl	800212c <__NVIC_EnableIRQ>
}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b082      	sub	sp, #8
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7ff ffa4 	bl	8002224 <SysTick_Config>
 80022dc:	4603      	mov	r3, r0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
	...

080022e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e08d      	b.n	8002416 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	461a      	mov	r2, r3
 8002300:	4b47      	ldr	r3, [pc, #284]	; (8002420 <HAL_DMA_Init+0x138>)
 8002302:	429a      	cmp	r2, r3
 8002304:	d80f      	bhi.n	8002326 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	461a      	mov	r2, r3
 800230c:	4b45      	ldr	r3, [pc, #276]	; (8002424 <HAL_DMA_Init+0x13c>)
 800230e:	4413      	add	r3, r2
 8002310:	4a45      	ldr	r2, [pc, #276]	; (8002428 <HAL_DMA_Init+0x140>)
 8002312:	fba2 2303 	umull	r2, r3, r2, r3
 8002316:	091b      	lsrs	r3, r3, #4
 8002318:	009a      	lsls	r2, r3, #2
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a42      	ldr	r2, [pc, #264]	; (800242c <HAL_DMA_Init+0x144>)
 8002322:	641a      	str	r2, [r3, #64]	; 0x40
 8002324:	e00e      	b.n	8002344 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	461a      	mov	r2, r3
 800232c:	4b40      	ldr	r3, [pc, #256]	; (8002430 <HAL_DMA_Init+0x148>)
 800232e:	4413      	add	r3, r2
 8002330:	4a3d      	ldr	r2, [pc, #244]	; (8002428 <HAL_DMA_Init+0x140>)
 8002332:	fba2 2303 	umull	r2, r3, r2, r3
 8002336:	091b      	lsrs	r3, r3, #4
 8002338:	009a      	lsls	r2, r3, #2
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a3c      	ldr	r2, [pc, #240]	; (8002434 <HAL_DMA_Init+0x14c>)
 8002342:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2202      	movs	r2, #2
 8002348:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800235a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800235e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002368:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002374:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002380:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	4313      	orrs	r3, r2
 800238c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f9b6 	bl	8002708 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023a4:	d102      	bne.n	80023ac <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80023c0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d010      	beq.n	80023ec <HAL_DMA_Init+0x104>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b04      	cmp	r3, #4
 80023d0:	d80c      	bhi.n	80023ec <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 f9d6 	bl	8002784 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	e008      	b.n	80023fe <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40020407 	.word	0x40020407
 8002424:	bffdfff8 	.word	0xbffdfff8
 8002428:	cccccccd 	.word	0xcccccccd
 800242c:	40020000 	.word	0x40020000
 8002430:	bffdfbf8 	.word	0xbffdfbf8
 8002434:	40020400 	.word	0x40020400

08002438 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
 8002444:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002446:	2300      	movs	r3, #0
 8002448:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002450:	2b01      	cmp	r3, #1
 8002452:	d101      	bne.n	8002458 <HAL_DMA_Start_IT+0x20>
 8002454:	2302      	movs	r3, #2
 8002456:	e066      	b.n	8002526 <HAL_DMA_Start_IT+0xee>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b01      	cmp	r3, #1
 800246a:	d155      	bne.n	8002518 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2202      	movs	r2, #2
 8002470:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 0201 	bic.w	r2, r2, #1
 8002488:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	68b9      	ldr	r1, [r7, #8]
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f000 f8fb 	bl	800268c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	2b00      	cmp	r3, #0
 800249c:	d008      	beq.n	80024b0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f042 020e 	orr.w	r2, r2, #14
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	e00f      	b.n	80024d0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 0204 	bic.w	r2, r2, #4
 80024be:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 020a 	orr.w	r2, r2, #10
 80024ce:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d007      	beq.n	80024ee <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024ec:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d007      	beq.n	8002506 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002500:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002504:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f042 0201 	orr.w	r2, r2, #1
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	e005      	b.n	8002524 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002520:	2302      	movs	r3, #2
 8002522:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002524:	7dfb      	ldrb	r3, [r7, #23]
}
 8002526:	4618      	mov	r0, r3
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b084      	sub	sp, #16
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254a:	f003 031f 	and.w	r3, r3, #31
 800254e:	2204      	movs	r2, #4
 8002550:	409a      	lsls	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	4013      	ands	r3, r2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d026      	beq.n	80025a8 <HAL_DMA_IRQHandler+0x7a>
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	d021      	beq.n	80025a8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0320 	and.w	r3, r3, #32
 800256e:	2b00      	cmp	r3, #0
 8002570:	d107      	bne.n	8002582 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 0204 	bic.w	r2, r2, #4
 8002580:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002586:	f003 021f 	and.w	r2, r3, #31
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	2104      	movs	r1, #4
 8002590:	fa01 f202 	lsl.w	r2, r1, r2
 8002594:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	2b00      	cmp	r3, #0
 800259c:	d071      	beq.n	8002682 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80025a6:	e06c      	b.n	8002682 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ac:	f003 031f 	and.w	r3, r3, #31
 80025b0:	2202      	movs	r2, #2
 80025b2:	409a      	lsls	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4013      	ands	r3, r2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d02e      	beq.n	800261a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d029      	beq.n	800261a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0320 	and.w	r3, r3, #32
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10b      	bne.n	80025ec <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 020a 	bic.w	r2, r2, #10
 80025e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f0:	f003 021f 	and.w	r2, r3, #31
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	2102      	movs	r1, #2
 80025fa:	fa01 f202 	lsl.w	r2, r1, r2
 80025fe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260c:	2b00      	cmp	r3, #0
 800260e:	d038      	beq.n	8002682 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002618:	e033      	b.n	8002682 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261e:	f003 031f 	and.w	r3, r3, #31
 8002622:	2208      	movs	r2, #8
 8002624:	409a      	lsls	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	4013      	ands	r3, r2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d02a      	beq.n	8002684 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	f003 0308 	and.w	r3, r3, #8
 8002634:	2b00      	cmp	r3, #0
 8002636:	d025      	beq.n	8002684 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 020e 	bic.w	r2, r2, #14
 8002646:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264c:	f003 021f 	and.w	r2, r3, #31
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002654:	2101      	movs	r1, #1
 8002656:	fa01 f202 	lsl.w	r2, r1, r2
 800265a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002676:	2b00      	cmp	r3, #0
 8002678:	d004      	beq.n	8002684 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002682:	bf00      	nop
 8002684:	bf00      	nop
}
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
 8002698:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80026a2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d004      	beq.n	80026b6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80026b4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ba:	f003 021f 	and.w	r2, r3, #31
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	2101      	movs	r1, #1
 80026c4:	fa01 f202 	lsl.w	r2, r1, r2
 80026c8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	2b10      	cmp	r3, #16
 80026d8:	d108      	bne.n	80026ec <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68ba      	ldr	r2, [r7, #8]
 80026e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80026ea:	e007      	b.n	80026fc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	60da      	str	r2, [r3, #12]
}
 80026fc:	bf00      	nop
 80026fe:	3714      	adds	r7, #20
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002708:	b480      	push	{r7}
 800270a:	b087      	sub	sp, #28
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	461a      	mov	r2, r3
 8002716:	4b16      	ldr	r3, [pc, #88]	; (8002770 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002718:	429a      	cmp	r2, r3
 800271a:	d802      	bhi.n	8002722 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800271c:	4b15      	ldr	r3, [pc, #84]	; (8002774 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800271e:	617b      	str	r3, [r7, #20]
 8002720:	e001      	b.n	8002726 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002722:	4b15      	ldr	r3, [pc, #84]	; (8002778 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002724:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	b2db      	uxtb	r3, r3
 8002730:	3b08      	subs	r3, #8
 8002732:	4a12      	ldr	r2, [pc, #72]	; (800277c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002734:	fba2 2303 	umull	r2, r3, r2, r3
 8002738:	091b      	lsrs	r3, r3, #4
 800273a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002740:	089b      	lsrs	r3, r3, #2
 8002742:	009a      	lsls	r2, r3, #2
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	4413      	add	r3, r2
 8002748:	461a      	mov	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a0b      	ldr	r2, [pc, #44]	; (8002780 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002752:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f003 031f 	and.w	r3, r3, #31
 800275a:	2201      	movs	r2, #1
 800275c:	409a      	lsls	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002762:	bf00      	nop
 8002764:	371c      	adds	r7, #28
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	40020407 	.word	0x40020407
 8002774:	40020800 	.word	0x40020800
 8002778:	40020820 	.word	0x40020820
 800277c:	cccccccd 	.word	0xcccccccd
 8002780:	40020880 	.word	0x40020880

08002784 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	b2db      	uxtb	r3, r3
 8002792:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002798:	4413      	add	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	461a      	mov	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a08      	ldr	r2, [pc, #32]	; (80027c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80027a6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	f003 031f 	and.w	r3, r3, #31
 80027b0:	2201      	movs	r2, #1
 80027b2:	409a      	lsls	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80027b8:	bf00      	nop
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	1000823f 	.word	0x1000823f
 80027c8:	40020940 	.word	0x40020940

080027cc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e147      	b.n	8002a6e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d106      	bne.n	80027f8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7fe f95a 	bl	8000aac <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	699a      	ldr	r2, [r3, #24]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 0210 	bic.w	r2, r2, #16
 8002806:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002808:	f7fe faf8 	bl	8000dfc <HAL_GetTick>
 800280c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800280e:	e012      	b.n	8002836 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002810:	f7fe faf4 	bl	8000dfc <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b0a      	cmp	r3, #10
 800281c:	d90b      	bls.n	8002836 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002822:	f043 0201 	orr.w	r2, r3, #1
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2203      	movs	r2, #3
 800282e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e11b      	b.n	8002a6e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	f003 0308 	and.w	r3, r3, #8
 8002840:	2b08      	cmp	r3, #8
 8002842:	d0e5      	beq.n	8002810 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	699a      	ldr	r2, [r3, #24]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f042 0201 	orr.w	r2, r2, #1
 8002852:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002854:	f7fe fad2 	bl	8000dfc <HAL_GetTick>
 8002858:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800285a:	e012      	b.n	8002882 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800285c:	f7fe face 	bl	8000dfc <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b0a      	cmp	r3, #10
 8002868:	d90b      	bls.n	8002882 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800286e:	f043 0201 	orr.w	r2, r3, #1
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2203      	movs	r2, #3
 800287a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e0f5      	b.n	8002a6e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0e5      	beq.n	800285c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	699a      	ldr	r2, [r3, #24]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 0202 	orr.w	r2, r2, #2
 800289e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a74      	ldr	r2, [pc, #464]	; (8002a78 <HAL_FDCAN_Init+0x2ac>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d103      	bne.n	80028b2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80028aa:	4a74      	ldr	r2, [pc, #464]	; (8002a7c <HAL_FDCAN_Init+0x2b0>)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	7c1b      	ldrb	r3, [r3, #16]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d108      	bne.n	80028cc <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	699a      	ldr	r2, [r3, #24]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028c8:	619a      	str	r2, [r3, #24]
 80028ca:	e007      	b.n	80028dc <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	699a      	ldr	r2, [r3, #24]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028da:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	7c5b      	ldrb	r3, [r3, #17]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d108      	bne.n	80028f6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	699a      	ldr	r2, [r3, #24]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028f2:	619a      	str	r2, [r3, #24]
 80028f4:	e007      	b.n	8002906 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	699a      	ldr	r2, [r3, #24]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002904:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	7c9b      	ldrb	r3, [r3, #18]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d108      	bne.n	8002920 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	699a      	ldr	r2, [r3, #24]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800291c:	619a      	str	r2, [r3, #24]
 800291e:	e007      	b.n	8002930 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	699a      	ldr	r2, [r3, #24]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800292e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	689a      	ldr	r2, [r3, #8]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	430a      	orrs	r2, r1
 8002944:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	699a      	ldr	r2, [r3, #24]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002954:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	691a      	ldr	r2, [r3, #16]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 0210 	bic.w	r2, r2, #16
 8002964:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d108      	bne.n	8002980 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	699a      	ldr	r2, [r3, #24]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f042 0204 	orr.w	r2, r2, #4
 800297c:	619a      	str	r2, [r3, #24]
 800297e:	e02c      	b.n	80029da <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d028      	beq.n	80029da <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	2b02      	cmp	r3, #2
 800298e:	d01c      	beq.n	80029ca <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	699a      	ldr	r2, [r3, #24]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800299e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	691a      	ldr	r2, [r3, #16]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0210 	orr.w	r2, r2, #16
 80029ae:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	d110      	bne.n	80029da <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	699a      	ldr	r2, [r3, #24]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f042 0220 	orr.w	r2, r2, #32
 80029c6:	619a      	str	r2, [r3, #24]
 80029c8:	e007      	b.n	80029da <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	699a      	ldr	r2, [r3, #24]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f042 0220 	orr.w	r2, r2, #32
 80029d8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	3b01      	subs	r3, #1
 80029e0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	3b01      	subs	r3, #1
 80029e8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80029ea:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80029f2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	3b01      	subs	r3, #1
 80029fc:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002a02:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002a04:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a0e:	d115      	bne.n	8002a3c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a14:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002a1e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a24:	3b01      	subs	r3, #1
 8002a26:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002a28:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	3b01      	subs	r3, #1
 8002a32:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002a38:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002a3a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f9f2 	bl	8002e3c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40006400 	.word	0x40006400
 8002a7c:	40006500 	.word	0x40006500

08002a80 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b087      	sub	sp, #28
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002a90:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002a92:	7dfb      	ldrb	r3, [r7, #23]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d002      	beq.n	8002a9e <HAL_FDCAN_ConfigFilter+0x1e>
 8002a98:	7dfb      	ldrb	r3, [r7, #23]
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d13d      	bne.n	8002b1a <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d119      	bne.n	8002ada <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002ab2:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8002aba:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	e01d      	b.n	8002b16 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	075a      	lsls	r2, r3, #29
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	079a      	lsls	r2, r3, #30
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	4413      	add	r3, r2
 8002b02:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	3304      	adds	r3, #4
 8002b0e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8002b16:	2300      	movs	r3, #0
 8002b18:	e006      	b.n	8002b28 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b1e:	f043 0202 	orr.w	r2, r3, #2
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
  }
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	371c      	adds	r7, #28
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
 8002b40:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d116      	bne.n	8002b7c <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b56:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	011a      	lsls	r2, r3, #4
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	431a      	orrs	r2, r3
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	e006      	b.n	8002b8a <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b80:	f043 0204 	orr.w	r2, r3, #4
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
  }
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002b96:	b480      	push	{r7}
 8002b98:	b083      	sub	sp, #12
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d110      	bne.n	8002bcc <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2202      	movs	r2, #2
 8002bae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	699a      	ldr	r2, [r3, #24]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 0201 	bic.w	r2, r2, #1
 8002bc0:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	e006      	b.n	8002bda <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bd0:	f043 0204 	orr.w	r2, r3, #4
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
  }
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b086      	sub	sp, #24
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	60f8      	str	r0, [r7, #12]
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d12c      	bne.n	8002c58 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002c06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d007      	beq.n	8002c1e <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c12:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e023      	b.n	8002c66 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002c26:	0c1b      	lsrs	r3, r3, #16
 8002c28:	f003 0303 	and.w	r3, r3, #3
 8002c2c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	68b9      	ldr	r1, [r7, #8]
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 f957 	bl	8002ee8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2101      	movs	r1, #1
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	fa01 f202 	lsl.w	r2, r1, r2
 8002c46:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	409a      	lsls	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8002c54:	2300      	movs	r3, #0
 8002c56:	e006      	b.n	8002c66 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c5c:	f043 0208 	orr.w	r2, r3, #8
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
  }
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b087      	sub	sp, #28
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	60f8      	str	r0, [r7, #12]
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002c80:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002c82:	7dfb      	ldrb	r3, [r7, #23]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d003      	beq.n	8002c90 <HAL_FDCAN_ActivateNotification+0x22>
 8002c88:	7dfb      	ldrb	r3, [r7, #23]
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	f040 80c8 	bne.w	8002e20 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c96:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d004      	beq.n	8002cac <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d03b      	beq.n	8002d24 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d004      	beq.n	8002cc0 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d031      	beq.n	8002d24 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d004      	beq.n	8002cd4 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	f003 0304 	and.w	r3, r3, #4
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d027      	beq.n	8002d24 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d004      	beq.n	8002ce8 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	f003 0308 	and.w	r3, r3, #8
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d01d      	beq.n	8002d24 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d004      	beq.n	8002cfc <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	f003 0310 	and.w	r3, r3, #16
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d013      	beq.n	8002d24 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d004      	beq.n	8002d10 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	f003 0320 	and.w	r3, r3, #32
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d009      	beq.n	8002d24 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00c      	beq.n	8002d34 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d107      	bne.n	8002d34 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f042 0201 	orr.w	r2, r2, #1
 8002d32:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d004      	beq.n	8002d48 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d13b      	bne.n	8002dc0 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d004      	beq.n	8002d5c <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d131      	bne.n	8002dc0 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d004      	beq.n	8002d70 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d127      	bne.n	8002dc0 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d004      	beq.n	8002d84 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	f003 0308 	and.w	r3, r3, #8
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d11d      	bne.n	8002dc0 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d004      	beq.n	8002d98 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	f003 0310 	and.w	r3, r3, #16
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d113      	bne.n	8002dc0 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d004      	beq.n	8002dac <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	f003 0320 	and.w	r3, r3, #32
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d109      	bne.n	8002dc0 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00c      	beq.n	8002dd0 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d007      	beq.n	8002dd0 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0202 	orr.w	r2, r2, #2
 8002dce:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d009      	beq.n	8002dee <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d009      	beq.n	8002e0c <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	e006      	b.n	8002e2e <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e24:	f043 0202 	orr.w	r2, r3, #2
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
  }
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	371c      	adds	r7, #28
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
	...

08002e3c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002e44:	4b27      	ldr	r3, [pc, #156]	; (8002ee4 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8002e46:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e56:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e5e:	041a      	lsls	r2, r3, #16
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e7c:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e84:	061a      	lsls	r2, r3, #24
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	e005      	b.n	8002eca <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	3304      	adds	r3, #4
 8002ec8:	60fb      	str	r3, [r7, #12]
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d3f3      	bcc.n	8002ebe <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8002ed6:	bf00      	nop
 8002ed8:	bf00      	nop
 8002eda:	3714      	adds	r7, #20
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr
 8002ee4:	4000a400 	.word	0x4000a400

08002ee8 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b089      	sub	sp, #36	; 0x24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
 8002ef4:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10a      	bne.n	8002f14 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002f06:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	61fb      	str	r3, [r7, #28]
 8002f12:	e00a      	b.n	8002f2a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002f1c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002f22:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002f24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f28:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002f34:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002f3a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002f40:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002f46:	4313      	orrs	r3, r2
 8002f48:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	4613      	mov	r3, r2
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	4413      	add	r3, r2
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	440b      	add	r3, r1
 8002f5a:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	69fa      	ldr	r2, [r7, #28]
 8002f60:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	3304      	adds	r3, #4
 8002f66:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	3304      	adds	r3, #4
 8002f72:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8002f74:	2300      	movs	r3, #0
 8002f76:	617b      	str	r3, [r7, #20]
 8002f78:	e020      	b.n	8002fbc <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	3303      	adds	r3, #3
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	4413      	add	r3, r2
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	3302      	adds	r3, #2
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	440b      	add	r3, r1
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002f92:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	3301      	adds	r3, #1
 8002f98:	6879      	ldr	r1, [r7, #4]
 8002f9a:	440b      	add	r3, r1
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002fa0:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	440a      	add	r2, r1
 8002fa8:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002faa:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	3304      	adds	r3, #4
 8002fb4:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	3304      	adds	r3, #4
 8002fba:	617b      	str	r3, [r7, #20]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	0c1b      	lsrs	r3, r3, #16
 8002fc2:	4a06      	ldr	r2, [pc, #24]	; (8002fdc <FDCAN_CopyMessageToRAM+0xf4>)
 8002fc4:	5cd3      	ldrb	r3, [r2, r3]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d3d5      	bcc.n	8002f7a <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8002fce:	bf00      	nop
 8002fd0:	bf00      	nop
 8002fd2:	3724      	adds	r7, #36	; 0x24
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	08004d98 	.word	0x08004d98

08002fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b087      	sub	sp, #28
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002fee:	e15a      	b.n	80032a6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2b00      	cmp	r3, #0
 8003004:	f000 814c 	beq.w	80032a0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f003 0303 	and.w	r3, r3, #3
 8003010:	2b01      	cmp	r3, #1
 8003012:	d005      	beq.n	8003020 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800301c:	2b02      	cmp	r3, #2
 800301e:	d130      	bne.n	8003082 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	2203      	movs	r2, #3
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	43db      	mvns	r3, r3
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	4013      	ands	r3, r2
 8003036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	68da      	ldr	r2, [r3, #12]
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	4313      	orrs	r3, r2
 8003048:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003056:	2201      	movs	r2, #1
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	43db      	mvns	r3, r3
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	4013      	ands	r3, r2
 8003064:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	091b      	lsrs	r3, r3, #4
 800306c:	f003 0201 	and.w	r2, r3, #1
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	4313      	orrs	r3, r2
 800307a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	2b03      	cmp	r3, #3
 800308c:	d017      	beq.n	80030be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	2203      	movs	r2, #3
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	43db      	mvns	r3, r3
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	4013      	ands	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f003 0303 	and.w	r3, r3, #3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d123      	bne.n	8003112 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	08da      	lsrs	r2, r3, #3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	3208      	adds	r2, #8
 80030d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	220f      	movs	r2, #15
 80030e2:	fa02 f303 	lsl.w	r3, r2, r3
 80030e6:	43db      	mvns	r3, r3
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	4013      	ands	r3, r2
 80030ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	691a      	ldr	r2, [r3, #16]
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	fa02 f303 	lsl.w	r3, r2, r3
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	4313      	orrs	r3, r2
 8003102:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	08da      	lsrs	r2, r3, #3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	3208      	adds	r2, #8
 800310c:	6939      	ldr	r1, [r7, #16]
 800310e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	2203      	movs	r2, #3
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	43db      	mvns	r3, r3
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	4013      	ands	r3, r2
 8003128:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f003 0203 	and.w	r2, r3, #3
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	4313      	orrs	r3, r2
 800313e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800314e:	2b00      	cmp	r3, #0
 8003150:	f000 80a6 	beq.w	80032a0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003154:	4b5b      	ldr	r3, [pc, #364]	; (80032c4 <HAL_GPIO_Init+0x2e4>)
 8003156:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003158:	4a5a      	ldr	r2, [pc, #360]	; (80032c4 <HAL_GPIO_Init+0x2e4>)
 800315a:	f043 0301 	orr.w	r3, r3, #1
 800315e:	6613      	str	r3, [r2, #96]	; 0x60
 8003160:	4b58      	ldr	r3, [pc, #352]	; (80032c4 <HAL_GPIO_Init+0x2e4>)
 8003162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	60bb      	str	r3, [r7, #8]
 800316a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800316c:	4a56      	ldr	r2, [pc, #344]	; (80032c8 <HAL_GPIO_Init+0x2e8>)
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	089b      	lsrs	r3, r3, #2
 8003172:	3302      	adds	r3, #2
 8003174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003178:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f003 0303 	and.w	r3, r3, #3
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	220f      	movs	r2, #15
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	43db      	mvns	r3, r3
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	4013      	ands	r3, r2
 800318e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003196:	d01f      	beq.n	80031d8 <HAL_GPIO_Init+0x1f8>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a4c      	ldr	r2, [pc, #304]	; (80032cc <HAL_GPIO_Init+0x2ec>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d019      	beq.n	80031d4 <HAL_GPIO_Init+0x1f4>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a4b      	ldr	r2, [pc, #300]	; (80032d0 <HAL_GPIO_Init+0x2f0>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d013      	beq.n	80031d0 <HAL_GPIO_Init+0x1f0>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a4a      	ldr	r2, [pc, #296]	; (80032d4 <HAL_GPIO_Init+0x2f4>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d00d      	beq.n	80031cc <HAL_GPIO_Init+0x1ec>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a49      	ldr	r2, [pc, #292]	; (80032d8 <HAL_GPIO_Init+0x2f8>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d007      	beq.n	80031c8 <HAL_GPIO_Init+0x1e8>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a48      	ldr	r2, [pc, #288]	; (80032dc <HAL_GPIO_Init+0x2fc>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d101      	bne.n	80031c4 <HAL_GPIO_Init+0x1e4>
 80031c0:	2305      	movs	r3, #5
 80031c2:	e00a      	b.n	80031da <HAL_GPIO_Init+0x1fa>
 80031c4:	2306      	movs	r3, #6
 80031c6:	e008      	b.n	80031da <HAL_GPIO_Init+0x1fa>
 80031c8:	2304      	movs	r3, #4
 80031ca:	e006      	b.n	80031da <HAL_GPIO_Init+0x1fa>
 80031cc:	2303      	movs	r3, #3
 80031ce:	e004      	b.n	80031da <HAL_GPIO_Init+0x1fa>
 80031d0:	2302      	movs	r3, #2
 80031d2:	e002      	b.n	80031da <HAL_GPIO_Init+0x1fa>
 80031d4:	2301      	movs	r3, #1
 80031d6:	e000      	b.n	80031da <HAL_GPIO_Init+0x1fa>
 80031d8:	2300      	movs	r3, #0
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	f002 0203 	and.w	r2, r2, #3
 80031e0:	0092      	lsls	r2, r2, #2
 80031e2:	4093      	lsls	r3, r2
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031ea:	4937      	ldr	r1, [pc, #220]	; (80032c8 <HAL_GPIO_Init+0x2e8>)
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	089b      	lsrs	r3, r3, #2
 80031f0:	3302      	adds	r3, #2
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031f8:	4b39      	ldr	r3, [pc, #228]	; (80032e0 <HAL_GPIO_Init+0x300>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	43db      	mvns	r3, r3
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	4013      	ands	r3, r2
 8003206:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	4313      	orrs	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800321c:	4a30      	ldr	r2, [pc, #192]	; (80032e0 <HAL_GPIO_Init+0x300>)
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003222:	4b2f      	ldr	r3, [pc, #188]	; (80032e0 <HAL_GPIO_Init+0x300>)
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	43db      	mvns	r3, r3
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	4013      	ands	r3, r2
 8003230:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4313      	orrs	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003246:	4a26      	ldr	r2, [pc, #152]	; (80032e0 <HAL_GPIO_Init+0x300>)
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800324c:	4b24      	ldr	r3, [pc, #144]	; (80032e0 <HAL_GPIO_Init+0x300>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	43db      	mvns	r3, r3
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	4013      	ands	r3, r2
 800325a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d003      	beq.n	8003270 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	4313      	orrs	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003270:	4a1b      	ldr	r2, [pc, #108]	; (80032e0 <HAL_GPIO_Init+0x300>)
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003276:	4b1a      	ldr	r3, [pc, #104]	; (80032e0 <HAL_GPIO_Init+0x300>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	43db      	mvns	r3, r3
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	4013      	ands	r3, r2
 8003284:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4313      	orrs	r3, r2
 8003298:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800329a:	4a11      	ldr	r2, [pc, #68]	; (80032e0 <HAL_GPIO_Init+0x300>)
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	3301      	adds	r3, #1
 80032a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	fa22 f303 	lsr.w	r3, r2, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f47f ae9d 	bne.w	8002ff0 <HAL_GPIO_Init+0x10>
  }
}
 80032b6:	bf00      	nop
 80032b8:	bf00      	nop
 80032ba:	371c      	adds	r7, #28
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	40021000 	.word	0x40021000
 80032c8:	40010000 	.word	0x40010000
 80032cc:	48000400 	.word	0x48000400
 80032d0:	48000800 	.word	0x48000800
 80032d4:	48000c00 	.word	0x48000c00
 80032d8:	48001000 	.word	0x48001000
 80032dc:	48001400 	.word	0x48001400
 80032e0:	40010400 	.word	0x40010400

080032e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	460b      	mov	r3, r1
 80032ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	691a      	ldr	r2, [r3, #16]
 80032f4:	887b      	ldrh	r3, [r7, #2]
 80032f6:	4013      	ands	r3, r2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d002      	beq.n	8003302 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032fc:	2301      	movs	r3, #1
 80032fe:	73fb      	strb	r3, [r7, #15]
 8003300:	e001      	b.n	8003306 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003302:	2300      	movs	r3, #0
 8003304:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003306:	7bfb      	ldrb	r3, [r7, #15]
}
 8003308:	4618      	mov	r0, r3
 800330a:	3714      	adds	r7, #20
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	460b      	mov	r3, r1
 800331e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003326:	887a      	ldrh	r2, [r7, #2]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4013      	ands	r3, r2
 800332c:	041a      	lsls	r2, r3, #16
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	43d9      	mvns	r1, r3
 8003332:	887b      	ldrh	r3, [r7, #2]
 8003334:	400b      	ands	r3, r1
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	619a      	str	r2, [r3, #24]
}
 800333c:	bf00      	nop
 800333e:	3714      	adds	r7, #20
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d141      	bne.n	80033da <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003356:	4b4b      	ldr	r3, [pc, #300]	; (8003484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800335e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003362:	d131      	bne.n	80033c8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003364:	4b47      	ldr	r3, [pc, #284]	; (8003484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003366:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800336a:	4a46      	ldr	r2, [pc, #280]	; (8003484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800336c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003370:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003374:	4b43      	ldr	r3, [pc, #268]	; (8003484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800337c:	4a41      	ldr	r2, [pc, #260]	; (8003484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800337e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003382:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003384:	4b40      	ldr	r3, [pc, #256]	; (8003488 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2232      	movs	r2, #50	; 0x32
 800338a:	fb02 f303 	mul.w	r3, r2, r3
 800338e:	4a3f      	ldr	r2, [pc, #252]	; (800348c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003390:	fba2 2303 	umull	r2, r3, r2, r3
 8003394:	0c9b      	lsrs	r3, r3, #18
 8003396:	3301      	adds	r3, #1
 8003398:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800339a:	e002      	b.n	80033a2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	3b01      	subs	r3, #1
 80033a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033a2:	4b38      	ldr	r3, [pc, #224]	; (8003484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ae:	d102      	bne.n	80033b6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1f2      	bne.n	800339c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033b6:	4b33      	ldr	r3, [pc, #204]	; (8003484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033c2:	d158      	bne.n	8003476 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e057      	b.n	8003478 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033c8:	4b2e      	ldr	r3, [pc, #184]	; (8003484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033ce:	4a2d      	ldr	r2, [pc, #180]	; (8003484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80033d8:	e04d      	b.n	8003476 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033e0:	d141      	bne.n	8003466 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80033e2:	4b28      	ldr	r3, [pc, #160]	; (8003484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ee:	d131      	bne.n	8003454 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033f0:	4b24      	ldr	r3, [pc, #144]	; (8003484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033f6:	4a23      	ldr	r2, [pc, #140]	; (8003484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003400:	4b20      	ldr	r3, [pc, #128]	; (8003484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003408:	4a1e      	ldr	r2, [pc, #120]	; (8003484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800340a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800340e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003410:	4b1d      	ldr	r3, [pc, #116]	; (8003488 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2232      	movs	r2, #50	; 0x32
 8003416:	fb02 f303 	mul.w	r3, r2, r3
 800341a:	4a1c      	ldr	r2, [pc, #112]	; (800348c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800341c:	fba2 2303 	umull	r2, r3, r2, r3
 8003420:	0c9b      	lsrs	r3, r3, #18
 8003422:	3301      	adds	r3, #1
 8003424:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003426:	e002      	b.n	800342e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	3b01      	subs	r3, #1
 800342c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800342e:	4b15      	ldr	r3, [pc, #84]	; (8003484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800343a:	d102      	bne.n	8003442 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f2      	bne.n	8003428 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003442:	4b10      	ldr	r3, [pc, #64]	; (8003484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800344a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800344e:	d112      	bne.n	8003476 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e011      	b.n	8003478 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003454:	4b0b      	ldr	r3, [pc, #44]	; (8003484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003456:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800345a:	4a0a      	ldr	r2, [pc, #40]	; (8003484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800345c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003460:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003464:	e007      	b.n	8003476 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003466:	4b07      	ldr	r3, [pc, #28]	; (8003484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800346e:	4a05      	ldr	r2, [pc, #20]	; (8003484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003470:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003474:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	40007000 	.word	0x40007000
 8003488:	20000000 	.word	0x20000000
 800348c:	431bde83 	.word	0x431bde83

08003490 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b088      	sub	sp, #32
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e306      	b.n	8003ab0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d075      	beq.n	800359a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034ae:	4b97      	ldr	r3, [pc, #604]	; (800370c <HAL_RCC_OscConfig+0x27c>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 030c 	and.w	r3, r3, #12
 80034b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034b8:	4b94      	ldr	r3, [pc, #592]	; (800370c <HAL_RCC_OscConfig+0x27c>)
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	f003 0303 	and.w	r3, r3, #3
 80034c0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	2b0c      	cmp	r3, #12
 80034c6:	d102      	bne.n	80034ce <HAL_RCC_OscConfig+0x3e>
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	2b03      	cmp	r3, #3
 80034cc:	d002      	beq.n	80034d4 <HAL_RCC_OscConfig+0x44>
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	2b08      	cmp	r3, #8
 80034d2:	d10b      	bne.n	80034ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d4:	4b8d      	ldr	r3, [pc, #564]	; (800370c <HAL_RCC_OscConfig+0x27c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d05b      	beq.n	8003598 <HAL_RCC_OscConfig+0x108>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d157      	bne.n	8003598 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e2e1      	b.n	8003ab0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f4:	d106      	bne.n	8003504 <HAL_RCC_OscConfig+0x74>
 80034f6:	4b85      	ldr	r3, [pc, #532]	; (800370c <HAL_RCC_OscConfig+0x27c>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a84      	ldr	r2, [pc, #528]	; (800370c <HAL_RCC_OscConfig+0x27c>)
 80034fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003500:	6013      	str	r3, [r2, #0]
 8003502:	e01d      	b.n	8003540 <HAL_RCC_OscConfig+0xb0>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800350c:	d10c      	bne.n	8003528 <HAL_RCC_OscConfig+0x98>
 800350e:	4b7f      	ldr	r3, [pc, #508]	; (800370c <HAL_RCC_OscConfig+0x27c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a7e      	ldr	r2, [pc, #504]	; (800370c <HAL_RCC_OscConfig+0x27c>)
 8003514:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003518:	6013      	str	r3, [r2, #0]
 800351a:	4b7c      	ldr	r3, [pc, #496]	; (800370c <HAL_RCC_OscConfig+0x27c>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a7b      	ldr	r2, [pc, #492]	; (800370c <HAL_RCC_OscConfig+0x27c>)
 8003520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003524:	6013      	str	r3, [r2, #0]
 8003526:	e00b      	b.n	8003540 <HAL_RCC_OscConfig+0xb0>
 8003528:	4b78      	ldr	r3, [pc, #480]	; (800370c <HAL_RCC_OscConfig+0x27c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a77      	ldr	r2, [pc, #476]	; (800370c <HAL_RCC_OscConfig+0x27c>)
 800352e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003532:	6013      	str	r3, [r2, #0]
 8003534:	4b75      	ldr	r3, [pc, #468]	; (800370c <HAL_RCC_OscConfig+0x27c>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a74      	ldr	r2, [pc, #464]	; (800370c <HAL_RCC_OscConfig+0x27c>)
 800353a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800353e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d013      	beq.n	8003570 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003548:	f7fd fc58 	bl	8000dfc <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003550:	f7fd fc54 	bl	8000dfc <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b64      	cmp	r3, #100	; 0x64
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e2a6      	b.n	8003ab0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003562:	4b6a      	ldr	r3, [pc, #424]	; (800370c <HAL_RCC_OscConfig+0x27c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0f0      	beq.n	8003550 <HAL_RCC_OscConfig+0xc0>
 800356e:	e014      	b.n	800359a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003570:	f7fd fc44 	bl	8000dfc <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003578:	f7fd fc40 	bl	8000dfc <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b64      	cmp	r3, #100	; 0x64
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e292      	b.n	8003ab0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800358a:	4b60      	ldr	r3, [pc, #384]	; (800370c <HAL_RCC_OscConfig+0x27c>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1f0      	bne.n	8003578 <HAL_RCC_OscConfig+0xe8>
 8003596:	e000      	b.n	800359a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d075      	beq.n	8003692 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035a6:	4b59      	ldr	r3, [pc, #356]	; (800370c <HAL_RCC_OscConfig+0x27c>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 030c 	and.w	r3, r3, #12
 80035ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035b0:	4b56      	ldr	r3, [pc, #344]	; (800370c <HAL_RCC_OscConfig+0x27c>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f003 0303 	and.w	r3, r3, #3
 80035b8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	2b0c      	cmp	r3, #12
 80035be:	d102      	bne.n	80035c6 <HAL_RCC_OscConfig+0x136>
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d002      	beq.n	80035cc <HAL_RCC_OscConfig+0x13c>
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	2b04      	cmp	r3, #4
 80035ca:	d11f      	bne.n	800360c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035cc:	4b4f      	ldr	r3, [pc, #316]	; (800370c <HAL_RCC_OscConfig+0x27c>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d005      	beq.n	80035e4 <HAL_RCC_OscConfig+0x154>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e265      	b.n	8003ab0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e4:	4b49      	ldr	r3, [pc, #292]	; (800370c <HAL_RCC_OscConfig+0x27c>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	061b      	lsls	r3, r3, #24
 80035f2:	4946      	ldr	r1, [pc, #280]	; (800370c <HAL_RCC_OscConfig+0x27c>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80035f8:	4b45      	ldr	r3, [pc, #276]	; (8003710 <HAL_RCC_OscConfig+0x280>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fd fbb1 	bl	8000d64 <HAL_InitTick>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d043      	beq.n	8003690 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e251      	b.n	8003ab0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d023      	beq.n	800365c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003614:	4b3d      	ldr	r3, [pc, #244]	; (800370c <HAL_RCC_OscConfig+0x27c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a3c      	ldr	r2, [pc, #240]	; (800370c <HAL_RCC_OscConfig+0x27c>)
 800361a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800361e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003620:	f7fd fbec 	bl	8000dfc <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003628:	f7fd fbe8 	bl	8000dfc <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e23a      	b.n	8003ab0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800363a:	4b34      	ldr	r3, [pc, #208]	; (800370c <HAL_RCC_OscConfig+0x27c>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003642:	2b00      	cmp	r3, #0
 8003644:	d0f0      	beq.n	8003628 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003646:	4b31      	ldr	r3, [pc, #196]	; (800370c <HAL_RCC_OscConfig+0x27c>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	061b      	lsls	r3, r3, #24
 8003654:	492d      	ldr	r1, [pc, #180]	; (800370c <HAL_RCC_OscConfig+0x27c>)
 8003656:	4313      	orrs	r3, r2
 8003658:	604b      	str	r3, [r1, #4]
 800365a:	e01a      	b.n	8003692 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800365c:	4b2b      	ldr	r3, [pc, #172]	; (800370c <HAL_RCC_OscConfig+0x27c>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a2a      	ldr	r2, [pc, #168]	; (800370c <HAL_RCC_OscConfig+0x27c>)
 8003662:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003668:	f7fd fbc8 	bl	8000dfc <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003670:	f7fd fbc4 	bl	8000dfc <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e216      	b.n	8003ab0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003682:	4b22      	ldr	r3, [pc, #136]	; (800370c <HAL_RCC_OscConfig+0x27c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1f0      	bne.n	8003670 <HAL_RCC_OscConfig+0x1e0>
 800368e:	e000      	b.n	8003692 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003690:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0308 	and.w	r3, r3, #8
 800369a:	2b00      	cmp	r3, #0
 800369c:	d041      	beq.n	8003722 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d01c      	beq.n	80036e0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036a6:	4b19      	ldr	r3, [pc, #100]	; (800370c <HAL_RCC_OscConfig+0x27c>)
 80036a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036ac:	4a17      	ldr	r2, [pc, #92]	; (800370c <HAL_RCC_OscConfig+0x27c>)
 80036ae:	f043 0301 	orr.w	r3, r3, #1
 80036b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b6:	f7fd fba1 	bl	8000dfc <HAL_GetTick>
 80036ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036bc:	e008      	b.n	80036d0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036be:	f7fd fb9d 	bl	8000dfc <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d901      	bls.n	80036d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e1ef      	b.n	8003ab0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036d0:	4b0e      	ldr	r3, [pc, #56]	; (800370c <HAL_RCC_OscConfig+0x27c>)
 80036d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d0ef      	beq.n	80036be <HAL_RCC_OscConfig+0x22e>
 80036de:	e020      	b.n	8003722 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036e0:	4b0a      	ldr	r3, [pc, #40]	; (800370c <HAL_RCC_OscConfig+0x27c>)
 80036e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036e6:	4a09      	ldr	r2, [pc, #36]	; (800370c <HAL_RCC_OscConfig+0x27c>)
 80036e8:	f023 0301 	bic.w	r3, r3, #1
 80036ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f0:	f7fd fb84 	bl	8000dfc <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036f6:	e00d      	b.n	8003714 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036f8:	f7fd fb80 	bl	8000dfc <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d906      	bls.n	8003714 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e1d2      	b.n	8003ab0 <HAL_RCC_OscConfig+0x620>
 800370a:	bf00      	nop
 800370c:	40021000 	.word	0x40021000
 8003710:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003714:	4b8c      	ldr	r3, [pc, #560]	; (8003948 <HAL_RCC_OscConfig+0x4b8>)
 8003716:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1ea      	bne.n	80036f8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0304 	and.w	r3, r3, #4
 800372a:	2b00      	cmp	r3, #0
 800372c:	f000 80a6 	beq.w	800387c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003730:	2300      	movs	r3, #0
 8003732:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003734:	4b84      	ldr	r3, [pc, #528]	; (8003948 <HAL_RCC_OscConfig+0x4b8>)
 8003736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <HAL_RCC_OscConfig+0x2b4>
 8003740:	2301      	movs	r3, #1
 8003742:	e000      	b.n	8003746 <HAL_RCC_OscConfig+0x2b6>
 8003744:	2300      	movs	r3, #0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00d      	beq.n	8003766 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800374a:	4b7f      	ldr	r3, [pc, #508]	; (8003948 <HAL_RCC_OscConfig+0x4b8>)
 800374c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374e:	4a7e      	ldr	r2, [pc, #504]	; (8003948 <HAL_RCC_OscConfig+0x4b8>)
 8003750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003754:	6593      	str	r3, [r2, #88]	; 0x58
 8003756:	4b7c      	ldr	r3, [pc, #496]	; (8003948 <HAL_RCC_OscConfig+0x4b8>)
 8003758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003762:	2301      	movs	r3, #1
 8003764:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003766:	4b79      	ldr	r3, [pc, #484]	; (800394c <HAL_RCC_OscConfig+0x4bc>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376e:	2b00      	cmp	r3, #0
 8003770:	d118      	bne.n	80037a4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003772:	4b76      	ldr	r3, [pc, #472]	; (800394c <HAL_RCC_OscConfig+0x4bc>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a75      	ldr	r2, [pc, #468]	; (800394c <HAL_RCC_OscConfig+0x4bc>)
 8003778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800377c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800377e:	f7fd fb3d 	bl	8000dfc <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003784:	e008      	b.n	8003798 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003786:	f7fd fb39 	bl	8000dfc <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d901      	bls.n	8003798 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e18b      	b.n	8003ab0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003798:	4b6c      	ldr	r3, [pc, #432]	; (800394c <HAL_RCC_OscConfig+0x4bc>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d0f0      	beq.n	8003786 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d108      	bne.n	80037be <HAL_RCC_OscConfig+0x32e>
 80037ac:	4b66      	ldr	r3, [pc, #408]	; (8003948 <HAL_RCC_OscConfig+0x4b8>)
 80037ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b2:	4a65      	ldr	r2, [pc, #404]	; (8003948 <HAL_RCC_OscConfig+0x4b8>)
 80037b4:	f043 0301 	orr.w	r3, r3, #1
 80037b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037bc:	e024      	b.n	8003808 <HAL_RCC_OscConfig+0x378>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	2b05      	cmp	r3, #5
 80037c4:	d110      	bne.n	80037e8 <HAL_RCC_OscConfig+0x358>
 80037c6:	4b60      	ldr	r3, [pc, #384]	; (8003948 <HAL_RCC_OscConfig+0x4b8>)
 80037c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037cc:	4a5e      	ldr	r2, [pc, #376]	; (8003948 <HAL_RCC_OscConfig+0x4b8>)
 80037ce:	f043 0304 	orr.w	r3, r3, #4
 80037d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037d6:	4b5c      	ldr	r3, [pc, #368]	; (8003948 <HAL_RCC_OscConfig+0x4b8>)
 80037d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037dc:	4a5a      	ldr	r2, [pc, #360]	; (8003948 <HAL_RCC_OscConfig+0x4b8>)
 80037de:	f043 0301 	orr.w	r3, r3, #1
 80037e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037e6:	e00f      	b.n	8003808 <HAL_RCC_OscConfig+0x378>
 80037e8:	4b57      	ldr	r3, [pc, #348]	; (8003948 <HAL_RCC_OscConfig+0x4b8>)
 80037ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ee:	4a56      	ldr	r2, [pc, #344]	; (8003948 <HAL_RCC_OscConfig+0x4b8>)
 80037f0:	f023 0301 	bic.w	r3, r3, #1
 80037f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037f8:	4b53      	ldr	r3, [pc, #332]	; (8003948 <HAL_RCC_OscConfig+0x4b8>)
 80037fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fe:	4a52      	ldr	r2, [pc, #328]	; (8003948 <HAL_RCC_OscConfig+0x4b8>)
 8003800:	f023 0304 	bic.w	r3, r3, #4
 8003804:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d016      	beq.n	800383e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003810:	f7fd faf4 	bl	8000dfc <HAL_GetTick>
 8003814:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003816:	e00a      	b.n	800382e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003818:	f7fd faf0 	bl	8000dfc <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	f241 3288 	movw	r2, #5000	; 0x1388
 8003826:	4293      	cmp	r3, r2
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e140      	b.n	8003ab0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800382e:	4b46      	ldr	r3, [pc, #280]	; (8003948 <HAL_RCC_OscConfig+0x4b8>)
 8003830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d0ed      	beq.n	8003818 <HAL_RCC_OscConfig+0x388>
 800383c:	e015      	b.n	800386a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800383e:	f7fd fadd 	bl	8000dfc <HAL_GetTick>
 8003842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003844:	e00a      	b.n	800385c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003846:	f7fd fad9 	bl	8000dfc <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	f241 3288 	movw	r2, #5000	; 0x1388
 8003854:	4293      	cmp	r3, r2
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e129      	b.n	8003ab0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800385c:	4b3a      	ldr	r3, [pc, #232]	; (8003948 <HAL_RCC_OscConfig+0x4b8>)
 800385e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1ed      	bne.n	8003846 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800386a:	7ffb      	ldrb	r3, [r7, #31]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d105      	bne.n	800387c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003870:	4b35      	ldr	r3, [pc, #212]	; (8003948 <HAL_RCC_OscConfig+0x4b8>)
 8003872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003874:	4a34      	ldr	r2, [pc, #208]	; (8003948 <HAL_RCC_OscConfig+0x4b8>)
 8003876:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800387a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0320 	and.w	r3, r3, #32
 8003884:	2b00      	cmp	r3, #0
 8003886:	d03c      	beq.n	8003902 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d01c      	beq.n	80038ca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003890:	4b2d      	ldr	r3, [pc, #180]	; (8003948 <HAL_RCC_OscConfig+0x4b8>)
 8003892:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003896:	4a2c      	ldr	r2, [pc, #176]	; (8003948 <HAL_RCC_OscConfig+0x4b8>)
 8003898:	f043 0301 	orr.w	r3, r3, #1
 800389c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a0:	f7fd faac 	bl	8000dfc <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038a8:	f7fd faa8 	bl	8000dfc <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e0fa      	b.n	8003ab0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038ba:	4b23      	ldr	r3, [pc, #140]	; (8003948 <HAL_RCC_OscConfig+0x4b8>)
 80038bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d0ef      	beq.n	80038a8 <HAL_RCC_OscConfig+0x418>
 80038c8:	e01b      	b.n	8003902 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80038ca:	4b1f      	ldr	r3, [pc, #124]	; (8003948 <HAL_RCC_OscConfig+0x4b8>)
 80038cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038d0:	4a1d      	ldr	r2, [pc, #116]	; (8003948 <HAL_RCC_OscConfig+0x4b8>)
 80038d2:	f023 0301 	bic.w	r3, r3, #1
 80038d6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038da:	f7fd fa8f 	bl	8000dfc <HAL_GetTick>
 80038de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038e0:	e008      	b.n	80038f4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038e2:	f7fd fa8b 	bl	8000dfc <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e0dd      	b.n	8003ab0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038f4:	4b14      	ldr	r3, [pc, #80]	; (8003948 <HAL_RCC_OscConfig+0x4b8>)
 80038f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1ef      	bne.n	80038e2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 80d1 	beq.w	8003aae <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800390c:	4b0e      	ldr	r3, [pc, #56]	; (8003948 <HAL_RCC_OscConfig+0x4b8>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f003 030c 	and.w	r3, r3, #12
 8003914:	2b0c      	cmp	r3, #12
 8003916:	f000 808b 	beq.w	8003a30 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	2b02      	cmp	r3, #2
 8003920:	d15e      	bne.n	80039e0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003922:	4b09      	ldr	r3, [pc, #36]	; (8003948 <HAL_RCC_OscConfig+0x4b8>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a08      	ldr	r2, [pc, #32]	; (8003948 <HAL_RCC_OscConfig+0x4b8>)
 8003928:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800392c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392e:	f7fd fa65 	bl	8000dfc <HAL_GetTick>
 8003932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003934:	e00c      	b.n	8003950 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003936:	f7fd fa61 	bl	8000dfc <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d905      	bls.n	8003950 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e0b3      	b.n	8003ab0 <HAL_RCC_OscConfig+0x620>
 8003948:	40021000 	.word	0x40021000
 800394c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003950:	4b59      	ldr	r3, [pc, #356]	; (8003ab8 <HAL_RCC_OscConfig+0x628>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1ec      	bne.n	8003936 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800395c:	4b56      	ldr	r3, [pc, #344]	; (8003ab8 <HAL_RCC_OscConfig+0x628>)
 800395e:	68da      	ldr	r2, [r3, #12]
 8003960:	4b56      	ldr	r3, [pc, #344]	; (8003abc <HAL_RCC_OscConfig+0x62c>)
 8003962:	4013      	ands	r3, r2
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6a11      	ldr	r1, [r2, #32]
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800396c:	3a01      	subs	r2, #1
 800396e:	0112      	lsls	r2, r2, #4
 8003970:	4311      	orrs	r1, r2
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003976:	0212      	lsls	r2, r2, #8
 8003978:	4311      	orrs	r1, r2
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800397e:	0852      	lsrs	r2, r2, #1
 8003980:	3a01      	subs	r2, #1
 8003982:	0552      	lsls	r2, r2, #21
 8003984:	4311      	orrs	r1, r2
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800398a:	0852      	lsrs	r2, r2, #1
 800398c:	3a01      	subs	r2, #1
 800398e:	0652      	lsls	r2, r2, #25
 8003990:	4311      	orrs	r1, r2
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003996:	06d2      	lsls	r2, r2, #27
 8003998:	430a      	orrs	r2, r1
 800399a:	4947      	ldr	r1, [pc, #284]	; (8003ab8 <HAL_RCC_OscConfig+0x628>)
 800399c:	4313      	orrs	r3, r2
 800399e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039a0:	4b45      	ldr	r3, [pc, #276]	; (8003ab8 <HAL_RCC_OscConfig+0x628>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a44      	ldr	r2, [pc, #272]	; (8003ab8 <HAL_RCC_OscConfig+0x628>)
 80039a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039aa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039ac:	4b42      	ldr	r3, [pc, #264]	; (8003ab8 <HAL_RCC_OscConfig+0x628>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	4a41      	ldr	r2, [pc, #260]	; (8003ab8 <HAL_RCC_OscConfig+0x628>)
 80039b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b8:	f7fd fa20 	bl	8000dfc <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c0:	f7fd fa1c 	bl	8000dfc <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e06e      	b.n	8003ab0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039d2:	4b39      	ldr	r3, [pc, #228]	; (8003ab8 <HAL_RCC_OscConfig+0x628>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0f0      	beq.n	80039c0 <HAL_RCC_OscConfig+0x530>
 80039de:	e066      	b.n	8003aae <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039e0:	4b35      	ldr	r3, [pc, #212]	; (8003ab8 <HAL_RCC_OscConfig+0x628>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a34      	ldr	r2, [pc, #208]	; (8003ab8 <HAL_RCC_OscConfig+0x628>)
 80039e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039ea:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80039ec:	4b32      	ldr	r3, [pc, #200]	; (8003ab8 <HAL_RCC_OscConfig+0x628>)
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	4a31      	ldr	r2, [pc, #196]	; (8003ab8 <HAL_RCC_OscConfig+0x628>)
 80039f2:	f023 0303 	bic.w	r3, r3, #3
 80039f6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80039f8:	4b2f      	ldr	r3, [pc, #188]	; (8003ab8 <HAL_RCC_OscConfig+0x628>)
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	4a2e      	ldr	r2, [pc, #184]	; (8003ab8 <HAL_RCC_OscConfig+0x628>)
 80039fe:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a06:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a08:	f7fd f9f8 	bl	8000dfc <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a10:	f7fd f9f4 	bl	8000dfc <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e046      	b.n	8003ab0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a22:	4b25      	ldr	r3, [pc, #148]	; (8003ab8 <HAL_RCC_OscConfig+0x628>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1f0      	bne.n	8003a10 <HAL_RCC_OscConfig+0x580>
 8003a2e:	e03e      	b.n	8003aae <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	69db      	ldr	r3, [r3, #28]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d101      	bne.n	8003a3c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e039      	b.n	8003ab0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003a3c:	4b1e      	ldr	r3, [pc, #120]	; (8003ab8 <HAL_RCC_OscConfig+0x628>)
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f003 0203 	and.w	r2, r3, #3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d12c      	bne.n	8003aaa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d123      	bne.n	8003aaa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d11b      	bne.n	8003aaa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d113      	bne.n	8003aaa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8c:	085b      	lsrs	r3, r3, #1
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d109      	bne.n	8003aaa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa0:	085b      	lsrs	r3, r3, #1
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d001      	beq.n	8003aae <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e000      	b.n	8003ab0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3720      	adds	r7, #32
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	019f800c 	.word	0x019f800c

08003ac0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003aca:	2300      	movs	r3, #0
 8003acc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e11e      	b.n	8003d16 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ad8:	4b91      	ldr	r3, [pc, #580]	; (8003d20 <HAL_RCC_ClockConfig+0x260>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 030f 	and.w	r3, r3, #15
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d910      	bls.n	8003b08 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae6:	4b8e      	ldr	r3, [pc, #568]	; (8003d20 <HAL_RCC_ClockConfig+0x260>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f023 020f 	bic.w	r2, r3, #15
 8003aee:	498c      	ldr	r1, [pc, #560]	; (8003d20 <HAL_RCC_ClockConfig+0x260>)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af6:	4b8a      	ldr	r3, [pc, #552]	; (8003d20 <HAL_RCC_ClockConfig+0x260>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 030f 	and.w	r3, r3, #15
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d001      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e106      	b.n	8003d16 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d073      	beq.n	8003bfc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	2b03      	cmp	r3, #3
 8003b1a:	d129      	bne.n	8003b70 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b1c:	4b81      	ldr	r3, [pc, #516]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e0f4      	b.n	8003d16 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003b2c:	f000 f966 	bl	8003dfc <RCC_GetSysClockFreqFromPLLSource>
 8003b30:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	4a7c      	ldr	r2, [pc, #496]	; (8003d28 <HAL_RCC_ClockConfig+0x268>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d93f      	bls.n	8003bba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b3a:	4b7a      	ldr	r3, [pc, #488]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d009      	beq.n	8003b5a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d033      	beq.n	8003bba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d12f      	bne.n	8003bba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b5a:	4b72      	ldr	r3, [pc, #456]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b62:	4a70      	ldr	r2, [pc, #448]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b68:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003b6a:	2380      	movs	r3, #128	; 0x80
 8003b6c:	617b      	str	r3, [r7, #20]
 8003b6e:	e024      	b.n	8003bba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d107      	bne.n	8003b88 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b78:	4b6a      	ldr	r3, [pc, #424]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d109      	bne.n	8003b98 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e0c6      	b.n	8003d16 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b88:	4b66      	ldr	r3, [pc, #408]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d101      	bne.n	8003b98 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e0be      	b.n	8003d16 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003b98:	f000 f8ce 	bl	8003d38 <HAL_RCC_GetSysClockFreq>
 8003b9c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	4a61      	ldr	r2, [pc, #388]	; (8003d28 <HAL_RCC_ClockConfig+0x268>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d909      	bls.n	8003bba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ba6:	4b5f      	ldr	r3, [pc, #380]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bae:	4a5d      	ldr	r2, [pc, #372]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bb4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003bb6:	2380      	movs	r3, #128	; 0x80
 8003bb8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003bba:	4b5a      	ldr	r3, [pc, #360]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f023 0203 	bic.w	r2, r3, #3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	4957      	ldr	r1, [pc, #348]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bcc:	f7fd f916 	bl	8000dfc <HAL_GetTick>
 8003bd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bd2:	e00a      	b.n	8003bea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bd4:	f7fd f912 	bl	8000dfc <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e095      	b.n	8003d16 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bea:	4b4e      	ldr	r3, [pc, #312]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 020c 	and.w	r2, r3, #12
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d1eb      	bne.n	8003bd4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d023      	beq.n	8003c50 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0304 	and.w	r3, r3, #4
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d005      	beq.n	8003c20 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c14:	4b43      	ldr	r3, [pc, #268]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	4a42      	ldr	r2, [pc, #264]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003c1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c1e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0308 	and.w	r3, r3, #8
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d007      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003c2c:	4b3d      	ldr	r3, [pc, #244]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003c34:	4a3b      	ldr	r2, [pc, #236]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003c36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c3a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c3c:	4b39      	ldr	r3, [pc, #228]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	4936      	ldr	r1, [pc, #216]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	608b      	str	r3, [r1, #8]
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	2b80      	cmp	r3, #128	; 0x80
 8003c54:	d105      	bne.n	8003c62 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003c56:	4b33      	ldr	r3, [pc, #204]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	4a32      	ldr	r2, [pc, #200]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003c5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c60:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c62:	4b2f      	ldr	r3, [pc, #188]	; (8003d20 <HAL_RCC_ClockConfig+0x260>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d21d      	bcs.n	8003cac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c70:	4b2b      	ldr	r3, [pc, #172]	; (8003d20 <HAL_RCC_ClockConfig+0x260>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f023 020f 	bic.w	r2, r3, #15
 8003c78:	4929      	ldr	r1, [pc, #164]	; (8003d20 <HAL_RCC_ClockConfig+0x260>)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c80:	f7fd f8bc 	bl	8000dfc <HAL_GetTick>
 8003c84:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c86:	e00a      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c88:	f7fd f8b8 	bl	8000dfc <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e03b      	b.n	8003d16 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c9e:	4b20      	ldr	r3, [pc, #128]	; (8003d20 <HAL_RCC_ClockConfig+0x260>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 030f 	and.w	r3, r3, #15
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d1ed      	bne.n	8003c88 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d008      	beq.n	8003cca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cb8:	4b1a      	ldr	r3, [pc, #104]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	4917      	ldr	r1, [pc, #92]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d009      	beq.n	8003cea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cd6:	4b13      	ldr	r3, [pc, #76]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	490f      	ldr	r1, [pc, #60]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003cea:	f000 f825 	bl	8003d38 <HAL_RCC_GetSysClockFreq>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	4b0c      	ldr	r3, [pc, #48]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	091b      	lsrs	r3, r3, #4
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	490c      	ldr	r1, [pc, #48]	; (8003d2c <HAL_RCC_ClockConfig+0x26c>)
 8003cfc:	5ccb      	ldrb	r3, [r1, r3]
 8003cfe:	f003 031f 	and.w	r3, r3, #31
 8003d02:	fa22 f303 	lsr.w	r3, r2, r3
 8003d06:	4a0a      	ldr	r2, [pc, #40]	; (8003d30 <HAL_RCC_ClockConfig+0x270>)
 8003d08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003d0a:	4b0a      	ldr	r3, [pc, #40]	; (8003d34 <HAL_RCC_ClockConfig+0x274>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7fd f828 	bl	8000d64 <HAL_InitTick>
 8003d14:	4603      	mov	r3, r0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3718      	adds	r7, #24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	40022000 	.word	0x40022000
 8003d24:	40021000 	.word	0x40021000
 8003d28:	04c4b400 	.word	0x04c4b400
 8003d2c:	08004d88 	.word	0x08004d88
 8003d30:	20000000 	.word	0x20000000
 8003d34:	20000004 	.word	0x20000004

08003d38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b087      	sub	sp, #28
 8003d3c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003d3e:	4b2c      	ldr	r3, [pc, #176]	; (8003df0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 030c 	and.w	r3, r3, #12
 8003d46:	2b04      	cmp	r3, #4
 8003d48:	d102      	bne.n	8003d50 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d4a:	4b2a      	ldr	r3, [pc, #168]	; (8003df4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d4c:	613b      	str	r3, [r7, #16]
 8003d4e:	e047      	b.n	8003de0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003d50:	4b27      	ldr	r3, [pc, #156]	; (8003df0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 030c 	and.w	r3, r3, #12
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d102      	bne.n	8003d62 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d5c:	4b26      	ldr	r3, [pc, #152]	; (8003df8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d5e:	613b      	str	r3, [r7, #16]
 8003d60:	e03e      	b.n	8003de0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003d62:	4b23      	ldr	r3, [pc, #140]	; (8003df0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 030c 	and.w	r3, r3, #12
 8003d6a:	2b0c      	cmp	r3, #12
 8003d6c:	d136      	bne.n	8003ddc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d6e:	4b20      	ldr	r3, [pc, #128]	; (8003df0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	f003 0303 	and.w	r3, r3, #3
 8003d76:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d78:	4b1d      	ldr	r3, [pc, #116]	; (8003df0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	091b      	lsrs	r3, r3, #4
 8003d7e:	f003 030f 	and.w	r3, r3, #15
 8003d82:	3301      	adds	r3, #1
 8003d84:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2b03      	cmp	r3, #3
 8003d8a:	d10c      	bne.n	8003da6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d8c:	4a1a      	ldr	r2, [pc, #104]	; (8003df8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d94:	4a16      	ldr	r2, [pc, #88]	; (8003df0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d96:	68d2      	ldr	r2, [r2, #12]
 8003d98:	0a12      	lsrs	r2, r2, #8
 8003d9a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d9e:	fb02 f303 	mul.w	r3, r2, r3
 8003da2:	617b      	str	r3, [r7, #20]
      break;
 8003da4:	e00c      	b.n	8003dc0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003da6:	4a13      	ldr	r2, [pc, #76]	; (8003df4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dae:	4a10      	ldr	r2, [pc, #64]	; (8003df0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003db0:	68d2      	ldr	r2, [r2, #12]
 8003db2:	0a12      	lsrs	r2, r2, #8
 8003db4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003db8:	fb02 f303 	mul.w	r3, r2, r3
 8003dbc:	617b      	str	r3, [r7, #20]
      break;
 8003dbe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003dc0:	4b0b      	ldr	r3, [pc, #44]	; (8003df0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	0e5b      	lsrs	r3, r3, #25
 8003dc6:	f003 0303 	and.w	r3, r3, #3
 8003dca:	3301      	adds	r3, #1
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd8:	613b      	str	r3, [r7, #16]
 8003dda:	e001      	b.n	8003de0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003de0:	693b      	ldr	r3, [r7, #16]
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	371c      	adds	r7, #28
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	40021000 	.word	0x40021000
 8003df4:	00f42400 	.word	0x00f42400
 8003df8:	007a1200 	.word	0x007a1200

08003dfc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b087      	sub	sp, #28
 8003e00:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e02:	4b1e      	ldr	r3, [pc, #120]	; (8003e7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	f003 0303 	and.w	r3, r3, #3
 8003e0a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e0c:	4b1b      	ldr	r3, [pc, #108]	; (8003e7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	091b      	lsrs	r3, r3, #4
 8003e12:	f003 030f 	and.w	r3, r3, #15
 8003e16:	3301      	adds	r3, #1
 8003e18:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d10c      	bne.n	8003e3a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e20:	4a17      	ldr	r2, [pc, #92]	; (8003e80 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e28:	4a14      	ldr	r2, [pc, #80]	; (8003e7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e2a:	68d2      	ldr	r2, [r2, #12]
 8003e2c:	0a12      	lsrs	r2, r2, #8
 8003e2e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e32:	fb02 f303 	mul.w	r3, r2, r3
 8003e36:	617b      	str	r3, [r7, #20]
    break;
 8003e38:	e00c      	b.n	8003e54 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e3a:	4a12      	ldr	r2, [pc, #72]	; (8003e84 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e42:	4a0e      	ldr	r2, [pc, #56]	; (8003e7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e44:	68d2      	ldr	r2, [r2, #12]
 8003e46:	0a12      	lsrs	r2, r2, #8
 8003e48:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e4c:	fb02 f303 	mul.w	r3, r2, r3
 8003e50:	617b      	str	r3, [r7, #20]
    break;
 8003e52:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e54:	4b09      	ldr	r3, [pc, #36]	; (8003e7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	0e5b      	lsrs	r3, r3, #25
 8003e5a:	f003 0303 	and.w	r3, r3, #3
 8003e5e:	3301      	adds	r3, #1
 8003e60:	005b      	lsls	r3, r3, #1
 8003e62:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e6c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003e6e:	687b      	ldr	r3, [r7, #4]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	371c      	adds	r7, #28
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	007a1200 	.word	0x007a1200
 8003e84:	00f42400 	.word	0x00f42400

08003e88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e90:	2300      	movs	r3, #0
 8003e92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e94:	2300      	movs	r3, #0
 8003e96:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 8098 	beq.w	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eaa:	4b43      	ldr	r3, [pc, #268]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10d      	bne.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eb6:	4b40      	ldr	r3, [pc, #256]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eba:	4a3f      	ldr	r2, [pc, #252]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ec0:	6593      	str	r3, [r2, #88]	; 0x58
 8003ec2:	4b3d      	ldr	r3, [pc, #244]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eca:	60bb      	str	r3, [r7, #8]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ed2:	4b3a      	ldr	r3, [pc, #232]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a39      	ldr	r2, [pc, #228]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003edc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ede:	f7fc ff8d 	bl	8000dfc <HAL_GetTick>
 8003ee2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ee4:	e009      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ee6:	f7fc ff89 	bl	8000dfc <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d902      	bls.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	74fb      	strb	r3, [r7, #19]
        break;
 8003ef8:	e005      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003efa:	4b30      	ldr	r3, [pc, #192]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d0ef      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003f06:	7cfb      	ldrb	r3, [r7, #19]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d159      	bne.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f0c:	4b2a      	ldr	r3, [pc, #168]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f16:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d01e      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d019      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f28:	4b23      	ldr	r3, [pc, #140]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f32:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f34:	4b20      	ldr	r3, [pc, #128]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f3a:	4a1f      	ldr	r2, [pc, #124]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f44:	4b1c      	ldr	r3, [pc, #112]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f4a:	4a1b      	ldr	r2, [pc, #108]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f54:	4a18      	ldr	r2, [pc, #96]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d016      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f66:	f7fc ff49 	bl	8000dfc <HAL_GetTick>
 8003f6a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f6c:	e00b      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f6e:	f7fc ff45 	bl	8000dfc <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d902      	bls.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	74fb      	strb	r3, [r7, #19]
            break;
 8003f84:	e006      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f86:	4b0c      	ldr	r3, [pc, #48]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d0ec      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003f94:	7cfb      	ldrb	r3, [r7, #19]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10b      	bne.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f9a:	4b07      	ldr	r3, [pc, #28]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa8:	4903      	ldr	r1, [pc, #12]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003fb0:	e008      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fb2:	7cfb      	ldrb	r3, [r7, #19]
 8003fb4:	74bb      	strb	r3, [r7, #18]
 8003fb6:	e005      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003fb8:	40021000 	.word	0x40021000
 8003fbc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc0:	7cfb      	ldrb	r3, [r7, #19]
 8003fc2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fc4:	7c7b      	ldrb	r3, [r7, #17]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d105      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fca:	4ba6      	ldr	r3, [pc, #664]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fce:	4aa5      	ldr	r2, [pc, #660]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fd4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00a      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fe2:	4ba0      	ldr	r3, [pc, #640]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe8:	f023 0203 	bic.w	r2, r3, #3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	499c      	ldr	r1, [pc, #624]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00a      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004004:	4b97      	ldr	r3, [pc, #604]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400a:	f023 020c 	bic.w	r2, r3, #12
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	4994      	ldr	r1, [pc, #592]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004014:	4313      	orrs	r3, r2
 8004016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0304 	and.w	r3, r3, #4
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00a      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004026:	4b8f      	ldr	r3, [pc, #572]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	498b      	ldr	r1, [pc, #556]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004036:	4313      	orrs	r3, r2
 8004038:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0308 	and.w	r3, r3, #8
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00a      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004048:	4b86      	ldr	r3, [pc, #536]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800404a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	4983      	ldr	r1, [pc, #524]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004058:	4313      	orrs	r3, r2
 800405a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0320 	and.w	r3, r3, #32
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00a      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800406a:	4b7e      	ldr	r3, [pc, #504]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800406c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004070:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	497a      	ldr	r1, [pc, #488]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800407a:	4313      	orrs	r3, r2
 800407c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00a      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800408c:	4b75      	ldr	r3, [pc, #468]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800408e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004092:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	4972      	ldr	r1, [pc, #456]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800409c:	4313      	orrs	r3, r2
 800409e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00a      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040ae:	4b6d      	ldr	r3, [pc, #436]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	69db      	ldr	r3, [r3, #28]
 80040bc:	4969      	ldr	r1, [pc, #420]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00a      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040d0:	4b64      	ldr	r3, [pc, #400]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	4961      	ldr	r1, [pc, #388]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00a      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040f2:	4b5c      	ldr	r3, [pc, #368]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	4958      	ldr	r1, [pc, #352]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004102:	4313      	orrs	r3, r2
 8004104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004110:	2b00      	cmp	r3, #0
 8004112:	d015      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004114:	4b53      	ldr	r3, [pc, #332]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004122:	4950      	ldr	r1, [pc, #320]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004124:	4313      	orrs	r3, r2
 8004126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004132:	d105      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004134:	4b4b      	ldr	r3, [pc, #300]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	4a4a      	ldr	r2, [pc, #296]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800413a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800413e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004148:	2b00      	cmp	r3, #0
 800414a:	d015      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800414c:	4b45      	ldr	r3, [pc, #276]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800414e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004152:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415a:	4942      	ldr	r1, [pc, #264]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800415c:	4313      	orrs	r3, r2
 800415e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004166:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800416a:	d105      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800416c:	4b3d      	ldr	r3, [pc, #244]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	4a3c      	ldr	r2, [pc, #240]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004172:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004176:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d015      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004184:	4b37      	ldr	r3, [pc, #220]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004192:	4934      	ldr	r1, [pc, #208]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004194:	4313      	orrs	r3, r2
 8004196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041a2:	d105      	bne.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041a4:	4b2f      	ldr	r3, [pc, #188]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	4a2e      	ldr	r2, [pc, #184]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041ae:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d015      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041bc:	4b29      	ldr	r3, [pc, #164]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ca:	4926      	ldr	r1, [pc, #152]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041da:	d105      	bne.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041dc:	4b21      	ldr	r3, [pc, #132]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	4a20      	ldr	r2, [pc, #128]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041e6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d015      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041f4:	4b1b      	ldr	r3, [pc, #108]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004202:	4918      	ldr	r1, [pc, #96]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004204:	4313      	orrs	r3, r2
 8004206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004212:	d105      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004214:	4b13      	ldr	r3, [pc, #76]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	4a12      	ldr	r2, [pc, #72]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800421a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800421e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d015      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800422c:	4b0d      	ldr	r3, [pc, #52]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800422e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004232:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800423a:	490a      	ldr	r1, [pc, #40]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800423c:	4313      	orrs	r3, r2
 800423e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004246:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800424a:	d105      	bne.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800424c:	4b05      	ldr	r3, [pc, #20]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	4a04      	ldr	r2, [pc, #16]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004256:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004258:	7cbb      	ldrb	r3, [r7, #18]
}
 800425a:	4618      	mov	r0, r3
 800425c:	3718      	adds	r7, #24
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	40021000 	.word	0x40021000

08004268 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e049      	b.n	800430e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d106      	bne.n	8004294 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7fc fc66 	bl	8000b60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2202      	movs	r2, #2
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	3304      	adds	r3, #4
 80042a4:	4619      	mov	r1, r3
 80042a6:	4610      	mov	r0, r2
 80042a8:	f000 fb42 	bl	8004930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
	...

08004318 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004326:	b2db      	uxtb	r3, r3
 8004328:	2b01      	cmp	r3, #1
 800432a:	d001      	beq.n	8004330 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e04a      	b.n	80043c6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2202      	movs	r2, #2
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0201 	orr.w	r2, r2, #1
 8004346:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a21      	ldr	r2, [pc, #132]	; (80043d4 <HAL_TIM_Base_Start_IT+0xbc>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d018      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0x6c>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800435a:	d013      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0x6c>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a1d      	ldr	r2, [pc, #116]	; (80043d8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d00e      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0x6c>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a1c      	ldr	r2, [pc, #112]	; (80043dc <HAL_TIM_Base_Start_IT+0xc4>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d009      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0x6c>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a1a      	ldr	r2, [pc, #104]	; (80043e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d004      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0x6c>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a19      	ldr	r2, [pc, #100]	; (80043e4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d115      	bne.n	80043b0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689a      	ldr	r2, [r3, #8]
 800438a:	4b17      	ldr	r3, [pc, #92]	; (80043e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800438c:	4013      	ands	r3, r2
 800438e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2b06      	cmp	r3, #6
 8004394:	d015      	beq.n	80043c2 <HAL_TIM_Base_Start_IT+0xaa>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800439c:	d011      	beq.n	80043c2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f042 0201 	orr.w	r2, r2, #1
 80043ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ae:	e008      	b.n	80043c2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0201 	orr.w	r2, r2, #1
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	e000      	b.n	80043c4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3714      	adds	r7, #20
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	40012c00 	.word	0x40012c00
 80043d8:	40000400 	.word	0x40000400
 80043dc:	40000800 	.word	0x40000800
 80043e0:	40013400 	.word	0x40013400
 80043e4:	40014000 	.word	0x40014000
 80043e8:	00010007 	.word	0x00010007

080043ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d122      	bne.n	8004448 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b02      	cmp	r3, #2
 800440e:	d11b      	bne.n	8004448 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f06f 0202 	mvn.w	r2, #2
 8004418:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 fa60 	bl	80048f4 <HAL_TIM_IC_CaptureCallback>
 8004434:	e005      	b.n	8004442 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 fa52 	bl	80048e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 fa63 	bl	8004908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	f003 0304 	and.w	r3, r3, #4
 8004452:	2b04      	cmp	r3, #4
 8004454:	d122      	bne.n	800449c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	2b04      	cmp	r3, #4
 8004462:	d11b      	bne.n	800449c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f06f 0204 	mvn.w	r2, #4
 800446c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2202      	movs	r2, #2
 8004472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 fa36 	bl	80048f4 <HAL_TIM_IC_CaptureCallback>
 8004488:	e005      	b.n	8004496 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 fa28 	bl	80048e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 fa39 	bl	8004908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	f003 0308 	and.w	r3, r3, #8
 80044a6:	2b08      	cmp	r3, #8
 80044a8:	d122      	bne.n	80044f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f003 0308 	and.w	r3, r3, #8
 80044b4:	2b08      	cmp	r3, #8
 80044b6:	d11b      	bne.n	80044f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f06f 0208 	mvn.w	r2, #8
 80044c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2204      	movs	r2, #4
 80044c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	f003 0303 	and.w	r3, r3, #3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 fa0c 	bl	80048f4 <HAL_TIM_IC_CaptureCallback>
 80044dc:	e005      	b.n	80044ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f9fe 	bl	80048e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 fa0f 	bl	8004908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	f003 0310 	and.w	r3, r3, #16
 80044fa:	2b10      	cmp	r3, #16
 80044fc:	d122      	bne.n	8004544 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f003 0310 	and.w	r3, r3, #16
 8004508:	2b10      	cmp	r3, #16
 800450a:	d11b      	bne.n	8004544 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f06f 0210 	mvn.w	r2, #16
 8004514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2208      	movs	r2, #8
 800451a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f9e2 	bl	80048f4 <HAL_TIM_IC_CaptureCallback>
 8004530:	e005      	b.n	800453e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f9d4 	bl	80048e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 f9e5 	bl	8004908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b01      	cmp	r3, #1
 8004550:	d10e      	bne.n	8004570 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b01      	cmp	r3, #1
 800455e:	d107      	bne.n	8004570 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f06f 0201 	mvn.w	r2, #1
 8004568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7fc f9d6 	bl	800091c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800457a:	2b80      	cmp	r3, #128	; 0x80
 800457c:	d10e      	bne.n	800459c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004588:	2b80      	cmp	r3, #128	; 0x80
 800458a:	d107      	bne.n	800459c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 fb82 	bl	8004ca0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045aa:	d10e      	bne.n	80045ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b6:	2b80      	cmp	r3, #128	; 0x80
 80045b8:	d107      	bne.n	80045ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80045c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 fb75 	bl	8004cb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d4:	2b40      	cmp	r3, #64	; 0x40
 80045d6:	d10e      	bne.n	80045f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e2:	2b40      	cmp	r3, #64	; 0x40
 80045e4:	d107      	bne.n	80045f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 f993 	bl	800491c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	f003 0320 	and.w	r3, r3, #32
 8004600:	2b20      	cmp	r3, #32
 8004602:	d10e      	bne.n	8004622 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	f003 0320 	and.w	r3, r3, #32
 800460e:	2b20      	cmp	r3, #32
 8004610:	d107      	bne.n	8004622 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f06f 0220 	mvn.w	r2, #32
 800461a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 fb35 	bl	8004c8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800462c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004630:	d10f      	bne.n	8004652 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800463c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004640:	d107      	bne.n	8004652 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800464a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 fb3b 	bl	8004cc8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800465c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004660:	d10f      	bne.n	8004682 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800466c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004670:	d107      	bne.n	8004682 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800467a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 fb2d 	bl	8004cdc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800468c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004690:	d10f      	bne.n	80046b2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800469c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046a0:	d107      	bne.n	80046b2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80046aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 fb1f 	bl	8004cf0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046c0:	d10f      	bne.n	80046e2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046d0:	d107      	bne.n	80046e2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80046da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 fb11 	bl	8004d04 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046e2:	bf00      	nop
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
	...

080046ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046f6:	2300      	movs	r3, #0
 80046f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004700:	2b01      	cmp	r3, #1
 8004702:	d101      	bne.n	8004708 <HAL_TIM_ConfigClockSource+0x1c>
 8004704:	2302      	movs	r3, #2
 8004706:	e0de      	b.n	80048c6 <HAL_TIM_ConfigClockSource+0x1da>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2202      	movs	r2, #2
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004726:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800472a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004732:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68ba      	ldr	r2, [r7, #8]
 800473a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a63      	ldr	r2, [pc, #396]	; (80048d0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004742:	4293      	cmp	r3, r2
 8004744:	f000 80a9 	beq.w	800489a <HAL_TIM_ConfigClockSource+0x1ae>
 8004748:	4a61      	ldr	r2, [pc, #388]	; (80048d0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800474a:	4293      	cmp	r3, r2
 800474c:	f200 80ae 	bhi.w	80048ac <HAL_TIM_ConfigClockSource+0x1c0>
 8004750:	4a60      	ldr	r2, [pc, #384]	; (80048d4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004752:	4293      	cmp	r3, r2
 8004754:	f000 80a1 	beq.w	800489a <HAL_TIM_ConfigClockSource+0x1ae>
 8004758:	4a5e      	ldr	r2, [pc, #376]	; (80048d4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800475a:	4293      	cmp	r3, r2
 800475c:	f200 80a6 	bhi.w	80048ac <HAL_TIM_ConfigClockSource+0x1c0>
 8004760:	4a5d      	ldr	r2, [pc, #372]	; (80048d8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004762:	4293      	cmp	r3, r2
 8004764:	f000 8099 	beq.w	800489a <HAL_TIM_ConfigClockSource+0x1ae>
 8004768:	4a5b      	ldr	r2, [pc, #364]	; (80048d8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800476a:	4293      	cmp	r3, r2
 800476c:	f200 809e 	bhi.w	80048ac <HAL_TIM_ConfigClockSource+0x1c0>
 8004770:	4a5a      	ldr	r2, [pc, #360]	; (80048dc <HAL_TIM_ConfigClockSource+0x1f0>)
 8004772:	4293      	cmp	r3, r2
 8004774:	f000 8091 	beq.w	800489a <HAL_TIM_ConfigClockSource+0x1ae>
 8004778:	4a58      	ldr	r2, [pc, #352]	; (80048dc <HAL_TIM_ConfigClockSource+0x1f0>)
 800477a:	4293      	cmp	r3, r2
 800477c:	f200 8096 	bhi.w	80048ac <HAL_TIM_ConfigClockSource+0x1c0>
 8004780:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004784:	f000 8089 	beq.w	800489a <HAL_TIM_ConfigClockSource+0x1ae>
 8004788:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800478c:	f200 808e 	bhi.w	80048ac <HAL_TIM_ConfigClockSource+0x1c0>
 8004790:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004794:	d03e      	beq.n	8004814 <HAL_TIM_ConfigClockSource+0x128>
 8004796:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800479a:	f200 8087 	bhi.w	80048ac <HAL_TIM_ConfigClockSource+0x1c0>
 800479e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047a2:	f000 8086 	beq.w	80048b2 <HAL_TIM_ConfigClockSource+0x1c6>
 80047a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047aa:	d87f      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x1c0>
 80047ac:	2b70      	cmp	r3, #112	; 0x70
 80047ae:	d01a      	beq.n	80047e6 <HAL_TIM_ConfigClockSource+0xfa>
 80047b0:	2b70      	cmp	r3, #112	; 0x70
 80047b2:	d87b      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x1c0>
 80047b4:	2b60      	cmp	r3, #96	; 0x60
 80047b6:	d050      	beq.n	800485a <HAL_TIM_ConfigClockSource+0x16e>
 80047b8:	2b60      	cmp	r3, #96	; 0x60
 80047ba:	d877      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x1c0>
 80047bc:	2b50      	cmp	r3, #80	; 0x50
 80047be:	d03c      	beq.n	800483a <HAL_TIM_ConfigClockSource+0x14e>
 80047c0:	2b50      	cmp	r3, #80	; 0x50
 80047c2:	d873      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x1c0>
 80047c4:	2b40      	cmp	r3, #64	; 0x40
 80047c6:	d058      	beq.n	800487a <HAL_TIM_ConfigClockSource+0x18e>
 80047c8:	2b40      	cmp	r3, #64	; 0x40
 80047ca:	d86f      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x1c0>
 80047cc:	2b30      	cmp	r3, #48	; 0x30
 80047ce:	d064      	beq.n	800489a <HAL_TIM_ConfigClockSource+0x1ae>
 80047d0:	2b30      	cmp	r3, #48	; 0x30
 80047d2:	d86b      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x1c0>
 80047d4:	2b20      	cmp	r3, #32
 80047d6:	d060      	beq.n	800489a <HAL_TIM_ConfigClockSource+0x1ae>
 80047d8:	2b20      	cmp	r3, #32
 80047da:	d867      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x1c0>
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d05c      	beq.n	800489a <HAL_TIM_ConfigClockSource+0x1ae>
 80047e0:	2b10      	cmp	r3, #16
 80047e2:	d05a      	beq.n	800489a <HAL_TIM_ConfigClockSource+0x1ae>
 80047e4:	e062      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6818      	ldr	r0, [r3, #0]
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	6899      	ldr	r1, [r3, #8]
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685a      	ldr	r2, [r3, #4]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	f000 f9a7 	bl	8004b48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004808:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	609a      	str	r2, [r3, #8]
      break;
 8004812:	e04f      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6818      	ldr	r0, [r3, #0]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	6899      	ldr	r1, [r3, #8]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	f000 f990 	bl	8004b48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689a      	ldr	r2, [r3, #8]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004836:	609a      	str	r2, [r3, #8]
      break;
 8004838:	e03c      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6818      	ldr	r0, [r3, #0]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	6859      	ldr	r1, [r3, #4]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	461a      	mov	r2, r3
 8004848:	f000 f902 	bl	8004a50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2150      	movs	r1, #80	; 0x50
 8004852:	4618      	mov	r0, r3
 8004854:	f000 f95b 	bl	8004b0e <TIM_ITRx_SetConfig>
      break;
 8004858:	e02c      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6818      	ldr	r0, [r3, #0]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	6859      	ldr	r1, [r3, #4]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	461a      	mov	r2, r3
 8004868:	f000 f921 	bl	8004aae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2160      	movs	r1, #96	; 0x60
 8004872:	4618      	mov	r0, r3
 8004874:	f000 f94b 	bl	8004b0e <TIM_ITRx_SetConfig>
      break;
 8004878:	e01c      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6818      	ldr	r0, [r3, #0]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	6859      	ldr	r1, [r3, #4]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	461a      	mov	r2, r3
 8004888:	f000 f8e2 	bl	8004a50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2140      	movs	r1, #64	; 0x40
 8004892:	4618      	mov	r0, r3
 8004894:	f000 f93b 	bl	8004b0e <TIM_ITRx_SetConfig>
      break;
 8004898:	e00c      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4619      	mov	r1, r3
 80048a4:	4610      	mov	r0, r2
 80048a6:	f000 f932 	bl	8004b0e <TIM_ITRx_SetConfig>
      break;
 80048aa:	e003      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	73fb      	strb	r3, [r7, #15]
      break;
 80048b0:	e000      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80048b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	00100070 	.word	0x00100070
 80048d4:	00100040 	.word	0x00100040
 80048d8:	00100030 	.word	0x00100030
 80048dc:	00100020 	.word	0x00100020

080048e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a3c      	ldr	r2, [pc, #240]	; (8004a34 <TIM_Base_SetConfig+0x104>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d00f      	beq.n	8004968 <TIM_Base_SetConfig+0x38>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800494e:	d00b      	beq.n	8004968 <TIM_Base_SetConfig+0x38>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a39      	ldr	r2, [pc, #228]	; (8004a38 <TIM_Base_SetConfig+0x108>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d007      	beq.n	8004968 <TIM_Base_SetConfig+0x38>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a38      	ldr	r2, [pc, #224]	; (8004a3c <TIM_Base_SetConfig+0x10c>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d003      	beq.n	8004968 <TIM_Base_SetConfig+0x38>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a37      	ldr	r2, [pc, #220]	; (8004a40 <TIM_Base_SetConfig+0x110>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d108      	bne.n	800497a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800496e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	4313      	orrs	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a2d      	ldr	r2, [pc, #180]	; (8004a34 <TIM_Base_SetConfig+0x104>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d01b      	beq.n	80049ba <TIM_Base_SetConfig+0x8a>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004988:	d017      	beq.n	80049ba <TIM_Base_SetConfig+0x8a>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a2a      	ldr	r2, [pc, #168]	; (8004a38 <TIM_Base_SetConfig+0x108>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d013      	beq.n	80049ba <TIM_Base_SetConfig+0x8a>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a29      	ldr	r2, [pc, #164]	; (8004a3c <TIM_Base_SetConfig+0x10c>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d00f      	beq.n	80049ba <TIM_Base_SetConfig+0x8a>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a28      	ldr	r2, [pc, #160]	; (8004a40 <TIM_Base_SetConfig+0x110>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d00b      	beq.n	80049ba <TIM_Base_SetConfig+0x8a>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a27      	ldr	r2, [pc, #156]	; (8004a44 <TIM_Base_SetConfig+0x114>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d007      	beq.n	80049ba <TIM_Base_SetConfig+0x8a>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a26      	ldr	r2, [pc, #152]	; (8004a48 <TIM_Base_SetConfig+0x118>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d003      	beq.n	80049ba <TIM_Base_SetConfig+0x8a>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a25      	ldr	r2, [pc, #148]	; (8004a4c <TIM_Base_SetConfig+0x11c>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d108      	bne.n	80049cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	689a      	ldr	r2, [r3, #8]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a10      	ldr	r2, [pc, #64]	; (8004a34 <TIM_Base_SetConfig+0x104>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d00f      	beq.n	8004a18 <TIM_Base_SetConfig+0xe8>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a11      	ldr	r2, [pc, #68]	; (8004a40 <TIM_Base_SetConfig+0x110>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d00b      	beq.n	8004a18 <TIM_Base_SetConfig+0xe8>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a10      	ldr	r2, [pc, #64]	; (8004a44 <TIM_Base_SetConfig+0x114>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d007      	beq.n	8004a18 <TIM_Base_SetConfig+0xe8>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a0f      	ldr	r2, [pc, #60]	; (8004a48 <TIM_Base_SetConfig+0x118>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d003      	beq.n	8004a18 <TIM_Base_SetConfig+0xe8>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a0e      	ldr	r2, [pc, #56]	; (8004a4c <TIM_Base_SetConfig+0x11c>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d103      	bne.n	8004a20 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	691a      	ldr	r2, [r3, #16]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	615a      	str	r2, [r3, #20]
}
 8004a26:	bf00      	nop
 8004a28:	3714      	adds	r7, #20
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	40012c00 	.word	0x40012c00
 8004a38:	40000400 	.word	0x40000400
 8004a3c:	40000800 	.word	0x40000800
 8004a40:	40013400 	.word	0x40013400
 8004a44:	40014000 	.word	0x40014000
 8004a48:	40014400 	.word	0x40014400
 8004a4c:	40014800 	.word	0x40014800

08004a50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b087      	sub	sp, #28
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	f023 0201 	bic.w	r2, r3, #1
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	011b      	lsls	r3, r3, #4
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f023 030a 	bic.w	r3, r3, #10
 8004a8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	621a      	str	r2, [r3, #32]
}
 8004aa2:	bf00      	nop
 8004aa4:	371c      	adds	r7, #28
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b087      	sub	sp, #28
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	60f8      	str	r0, [r7, #12]
 8004ab6:	60b9      	str	r1, [r7, #8]
 8004ab8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	f023 0210 	bic.w	r2, r3, #16
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6a1b      	ldr	r3, [r3, #32]
 8004ad0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ad8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	031b      	lsls	r3, r3, #12
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004aea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	011b      	lsls	r3, r3, #4
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	621a      	str	r2, [r3, #32]
}
 8004b02:	bf00      	nop
 8004b04:	371c      	adds	r7, #28
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b085      	sub	sp, #20
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
 8004b16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b2a:	683a      	ldr	r2, [r7, #0]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	f043 0307 	orr.w	r3, r3, #7
 8004b34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	609a      	str	r2, [r3, #8]
}
 8004b3c:	bf00      	nop
 8004b3e:	3714      	adds	r7, #20
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
 8004b54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	021a      	lsls	r2, r3, #8
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	609a      	str	r2, [r3, #8]
}
 8004b7c:	bf00      	nop
 8004b7e:	371c      	adds	r7, #28
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d101      	bne.n	8004ba0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	e065      	b.n	8004c6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a2c      	ldr	r2, [pc, #176]	; (8004c78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d004      	beq.n	8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a2b      	ldr	r2, [pc, #172]	; (8004c7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d108      	bne.n	8004be6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004bda:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a1b      	ldr	r2, [pc, #108]	; (8004c78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d018      	beq.n	8004c40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c16:	d013      	beq.n	8004c40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a18      	ldr	r2, [pc, #96]	; (8004c80 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d00e      	beq.n	8004c40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a17      	ldr	r2, [pc, #92]	; (8004c84 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d009      	beq.n	8004c40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a12      	ldr	r2, [pc, #72]	; (8004c7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d004      	beq.n	8004c40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a13      	ldr	r2, [pc, #76]	; (8004c88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d10c      	bne.n	8004c5a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3714      	adds	r7, #20
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	40012c00 	.word	0x40012c00
 8004c7c:	40013400 	.word	0x40013400
 8004c80:	40000400 	.word	0x40000400
 8004c84:	40000800 	.word	0x40000800
 8004c88:	40014000 	.word	0x40014000

08004c8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <__libc_init_array>:
 8004d18:	b570      	push	{r4, r5, r6, lr}
 8004d1a:	4d0d      	ldr	r5, [pc, #52]	; (8004d50 <__libc_init_array+0x38>)
 8004d1c:	4c0d      	ldr	r4, [pc, #52]	; (8004d54 <__libc_init_array+0x3c>)
 8004d1e:	1b64      	subs	r4, r4, r5
 8004d20:	10a4      	asrs	r4, r4, #2
 8004d22:	2600      	movs	r6, #0
 8004d24:	42a6      	cmp	r6, r4
 8004d26:	d109      	bne.n	8004d3c <__libc_init_array+0x24>
 8004d28:	4d0b      	ldr	r5, [pc, #44]	; (8004d58 <__libc_init_array+0x40>)
 8004d2a:	4c0c      	ldr	r4, [pc, #48]	; (8004d5c <__libc_init_array+0x44>)
 8004d2c:	f000 f820 	bl	8004d70 <_init>
 8004d30:	1b64      	subs	r4, r4, r5
 8004d32:	10a4      	asrs	r4, r4, #2
 8004d34:	2600      	movs	r6, #0
 8004d36:	42a6      	cmp	r6, r4
 8004d38:	d105      	bne.n	8004d46 <__libc_init_array+0x2e>
 8004d3a:	bd70      	pop	{r4, r5, r6, pc}
 8004d3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d40:	4798      	blx	r3
 8004d42:	3601      	adds	r6, #1
 8004d44:	e7ee      	b.n	8004d24 <__libc_init_array+0xc>
 8004d46:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d4a:	4798      	blx	r3
 8004d4c:	3601      	adds	r6, #1
 8004d4e:	e7f2      	b.n	8004d36 <__libc_init_array+0x1e>
 8004d50:	08004da8 	.word	0x08004da8
 8004d54:	08004da8 	.word	0x08004da8
 8004d58:	08004da8 	.word	0x08004da8
 8004d5c:	08004dac 	.word	0x08004dac

08004d60 <memset>:
 8004d60:	4402      	add	r2, r0
 8004d62:	4603      	mov	r3, r0
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d100      	bne.n	8004d6a <memset+0xa>
 8004d68:	4770      	bx	lr
 8004d6a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d6e:	e7f9      	b.n	8004d64 <memset+0x4>

08004d70 <_init>:
 8004d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d72:	bf00      	nop
 8004d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d76:	bc08      	pop	{r3}
 8004d78:	469e      	mov	lr, r3
 8004d7a:	4770      	bx	lr

08004d7c <_fini>:
 8004d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d7e:	bf00      	nop
 8004d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d82:	bc08      	pop	{r3}
 8004d84:	469e      	mov	lr, r3
 8004d86:	4770      	bx	lr
